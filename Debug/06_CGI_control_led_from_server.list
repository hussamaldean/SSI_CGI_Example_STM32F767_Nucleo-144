
06_CGI_control_led_from_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015478  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002c550  08015678  08015678  00025678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08041bc8  08041bc8  00060088  2**0
                  CONTENTS
  4 .ARM          00000008  08041bc8  08041bc8  00051bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08041bd0  08041bd0  00060088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08041bd0  08041bd0  00051bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08041bd4  08041bd4  00051bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08041bd8  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e1c  20000088  08041c60  00060088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ea4  08041c60  00066ea4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00060088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b6d0  00000000  00000000  000600b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ceb  00000000  00000000  0009b786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  000a2478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  000a3e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365b0  00000000  00000000  000a56f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036eb2  00000000  00000000  000dbca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113bba  00000000  00000000  00112b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00226714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007334  00000000  00000000  00226768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	08015660 	.word	0x08015660

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	08015660 	.word	0x08015660

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <bcd_to_decimal>:
#include "stdint.h"
uint8_t rtc_data[3];
#define ds3231_add (0x68<<1)
extern I2C_HandleTypeDef hi2c1;

static int bcd_to_decimal(unsigned char x) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    return x - 6 * (x >> 4);
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	091b      	lsrs	r3, r3, #4
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	460b      	mov	r3, r1
 800061e:	0089      	lsls	r1, r1, #2
 8000620:	1a5b      	subs	r3, r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <ds3231_update>:

void ds3231_update()
	{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, ds3231_add, 0x00, I2C_MEMADD_SIZE_8BIT,&rtc_data, 3, 100);
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	9302      	str	r3, [sp, #8]
 800063e:	2303      	movs	r3, #3
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <ds3231_update+0x24>)
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2200      	movs	r2, #0
 800064a:	21d0      	movs	r1, #208	; 0xd0
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <ds3231_update+0x28>)
 800064e:	f002 fdd5 	bl	80031fc <HAL_I2C_Mem_Read>
	}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000694 	.word	0x20000694
 800065c:	20000724 	.word	0x20000724

08000660 <get_seconds>:

uint8_t get_seconds()
	{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

	return bcd_to_decimal(rtc_data[0]);
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <get_seconds+0x18>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffcd 	bl	8000608 <bcd_to_decimal>
 800066e:	4603      	mov	r3, r0
 8000670:	b2db      	uxtb	r3, r3
	}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000694 	.word	0x20000694

0800067c <get_minutes>:

uint8_t get_minutes()
	{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

	return bcd_to_decimal(rtc_data[1]);
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <get_minutes+0x18>)
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ffbf 	bl	8000608 <bcd_to_decimal>
 800068a:	4603      	mov	r3, r0
 800068c:	b2db      	uxtb	r3, r3
	}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000694 	.word	0x20000694

08000698 <get_hours>:

uint8_t get_hours()
	{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	return bcd_to_decimal(rtc_data[2]);
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <get_hours+0x18>)
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ffb1 	bl	8000608 <bcd_to_decimal>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b2db      	uxtb	r3, r3
	}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000694 	.word	0x20000694

080006b4 <led_cgi_handler>:


tCGI CGI_ARR[1];

const char * led_cgi_handler(int iIndex, int iNumParams, char *pcParam[],char *pcValue[])
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	603b      	str	r3, [r7, #0]
	if(iIndex == 0)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d15a      	bne.n	800077e <led_cgi_handler+0xca>
	{
		   //HAL_GPIO_WritePin(GPIOB, Green_Pin|Red_Pin|Blue_Pin, GPIO_PIN_RESET);

		   for (int i = 0; i < iNumParams; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e053      	b.n	8000776 <led_cgi_handler+0xc2>
		   {

				  if(strcmp(pcParam[i] ,"led") == 0)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	492b      	ldr	r1, [pc, #172]	; (8000788 <led_cgi_handler+0xd4>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fdb0 	bl	8000240 <strcmp>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d144      	bne.n	8000770 <led_cgi_handler+0xbc>
				  {
					  if(strcmp(pcValue[i], "1") == 0)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	4413      	add	r3, r2
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4926      	ldr	r1, [pc, #152]	; (800078c <led_cgi_handler+0xd8>)
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fda4 	bl	8000240 <strcmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d104      	bne.n	8000708 <led_cgi_handler+0x54>
					  {
						  HAL_GPIO_TogglePin(GPIOB,Green_Pin) ;
 80006fe:	2101      	movs	r1, #1
 8000700:	4823      	ldr	r0, [pc, #140]	; (8000790 <led_cgi_handler+0xdc>)
 8000702:	f002 fcd0 	bl	80030a6 <HAL_GPIO_TogglePin>
 8000706:	e033      	b.n	8000770 <led_cgi_handler+0xbc>
					  }

					  else if(strcmp(pcValue[i], "2") == 0)
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4920      	ldr	r1, [pc, #128]	; (8000794 <led_cgi_handler+0xe0>)
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd93 	bl	8000240 <strcmp>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d104      	bne.n	800072a <led_cgi_handler+0x76>
					  {
						  HAL_GPIO_TogglePin(GPIOB,Blue_Pin) ;
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	481b      	ldr	r0, [pc, #108]	; (8000790 <led_cgi_handler+0xdc>)
 8000724:	f002 fcbf 	bl	80030a6 <HAL_GPIO_TogglePin>
 8000728:	e022      	b.n	8000770 <led_cgi_handler+0xbc>
					  }

					  else if(strcmp(pcValue[i], "3") == 0)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	4413      	add	r3, r2
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4918      	ldr	r1, [pc, #96]	; (8000798 <led_cgi_handler+0xe4>)
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd82 	bl	8000240 <strcmp>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <led_cgi_handler+0x9a>
					  {
						  HAL_GPIO_TogglePin(GPIOB,Red_Pin) ;
 8000742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <led_cgi_handler+0xdc>)
 8000748:	f002 fcad 	bl	80030a6 <HAL_GPIO_TogglePin>
 800074c:	e010      	b.n	8000770 <led_cgi_handler+0xbc>
					  }
					  else if (strcmp(pcValue[i], "4") == 0)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4910      	ldr	r1, [pc, #64]	; (800079c <led_cgi_handler+0xe8>)
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd70 	bl	8000240 <strcmp>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d104      	bne.n	8000770 <led_cgi_handler+0xbc>
					  {HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin) ;}
 8000766:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <led_cgi_handler+0xec>)
 800076c:	f002 fc9b 	bl	80030a6 <HAL_GPIO_TogglePin>
		   for (int i = 0; i < iNumParams; i++)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	429a      	cmp	r2, r3
 800077c:	dba7      	blt.n	80006ce <led_cgi_handler+0x1a>

		   }


	}
	return "/led_control.html";
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <led_cgi_handler+0xf0>)
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	08015684 	.word	0x08015684
 800078c:	08015688 	.word	0x08015688
 8000790:	40020400 	.word	0x40020400
 8000794:	0801568c 	.word	0x0801568c
 8000798:	08015690 	.word	0x08015690
 800079c:	08015694 	.word	0x08015694
 80007a0:	40021400 	.word	0x40021400
 80007a4:	08015698 	.word	0x08015698

080007a8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar (int ch)
	{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	230a      	movs	r3, #10
 80007b4:	2201      	movs	r2, #1
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <__io_putchar+0x20>)
 80007b8:	f004 fa9a 	bl	8004cf0 <HAL_UART_Transmit>
	return ch;
 80007bc:	687b      	ldr	r3, [r7, #4]
	}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200006a0 	.word	0x200006a0

080007cc <ethernetif_notify_conn_changed>:


void ethernetif_notify_conn_changed(struct netif *netif)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
if(netif_is_link_up(netif))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d003      	beq.n	80007ee <ethernetif_notify_conn_changed+0x22>
	{
	printf("cable is connected\r\n");
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <ethernetif_notify_conn_changed+0x30>)
 80007e8:	f013 fd66 	bl	80142b8 <puts>
	}
else {printf("cable is disconnected\r\n ");}
}
 80007ec:	e002      	b.n	80007f4 <ethernetif_notify_conn_changed+0x28>
else {printf("cable is disconnected\r\n ");}
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <ethernetif_notify_conn_changed+0x34>)
 80007f0:	f013 fcdc 	bl	80141ac <iprintf>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	080156ac 	.word	0x080156ac
 8000800:	080156c0 	.word	0x080156c0

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fcad 	bl	8001166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f84c 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f97a 	bl	8000b08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000814:	f000 f8b6 	bl	8000984 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000818:	f000 f946 	bl	8000aa8 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 800081c:	f004 ff0e 	bl	800563c <MX_LWIP_Init>
  MX_I2C1_Init();
 8000820:	f000 f902 	bl	8000a28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ethernetif_notify_conn_changed(&gnetif);
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <main+0x84>)
 8000826:	f7ff ffd1 	bl	80007cc <ethernetif_notify_conn_changed>
  //printf("IP address from dhcp: %s \r\n",ip4addr_ntoa(&gnetif.ip_addr));
  httpd_init();
 800082a:	f006 fddf 	bl	80073ec <httpd_init>
  http_set_ssi_handler(ssi_handler,tags,number_of_tags);
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <main+0x88>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2202      	movs	r2, #2
 8000834:	4619      	mov	r1, r3
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <main+0x8c>)
 8000838:	f006 fdf8 	bl	800742c <http_set_ssi_handler>
  CGI_ARR[0] = LED_CGI;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <main+0x90>)
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <main+0x94>)
 8000840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000844:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_ARR,1);
 8000848:	2101      	movs	r1, #1
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <main+0x90>)
 800084c:	f006 fe30 	bl	80074b0 <http_set_cgi_handlers>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000850:	f004 ff3a 	bl	80056c8 <MX_LWIP_Process>

	  printf("IP address from dhcp: %s \r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <main+0x98>)
 8000856:	f012 fca7 	bl	80131a8 <ip4addr_ntoa>
 800085a:	4603      	mov	r3, r0
 800085c:	4619      	mov	r1, r3
 800085e:	4810      	ldr	r0, [pc, #64]	; (80008a0 <main+0x9c>)
 8000860:	f013 fca4 	bl	80141ac <iprintf>
	  if(HAL_GetTick()-previous>1000)
 8000864:	f000 fcd0 	bl	8001208 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <main+0xa0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000874:	d9ec      	bls.n	8000850 <main+0x4c>
	  	  	  {
		  	  previous=HAL_GetTick();
 8000876:	f000 fcc7 	bl	8001208 <HAL_GetTick>
 800087a:	4603      	mov	r3, r0
 800087c:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <main+0xa0>)
 800087e:	6013      	str	r3, [r2, #0]
		  	  ds3231_update();
 8000880:	f7ff fed8 	bl	8000634 <ds3231_update>
	  MX_LWIP_Process();
 8000884:	e7e4      	b.n	8000850 <main+0x4c>
 8000886:	bf00      	nop
 8000888:	200007c0 	.word	0x200007c0
 800088c:	20000008 	.word	0x20000008
 8000890:	08000c3d 	.word	0x08000c3d
 8000894:	20000698 	.word	0x20000698
 8000898:	080187c8 	.word	0x080187c8
 800089c:	200007c4 	.word	0x200007c4
 80008a0:	080156dc 	.word	0x080156dc
 80008a4:	200007b8 	.word	0x200007b8

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2234      	movs	r2, #52	; 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f013 fc70 	bl	801419c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <SystemClock_Config+0xd4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a2a      	ldr	r2, [pc, #168]	; (800097c <SystemClock_Config+0xd4>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <SystemClock_Config+0xd4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <SystemClock_Config+0xd8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a25      	ldr	r2, [pc, #148]	; (8000980 <SystemClock_Config+0xd8>)
 80008ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <SystemClock_Config+0xd8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000900:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000904:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000914:	23d8      	movs	r3, #216	; 0xd8
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4618      	mov	r0, r3
 800092a:	f003 f8bb 	bl	8003aa4 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000934:	f000 f97c 	bl	8000c30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000938:	f003 f864 	bl	8003a04 <HAL_PWREx_EnableOverDrive>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000942:	f000 f975 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	230f      	movs	r3, #15
 8000948:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2302      	movs	r3, #2
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000952:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2107      	movs	r1, #7
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fb4b 	bl	8004000 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000970:	f000 f95e 	bl	8000c30 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3750      	adds	r7, #80	; 0x50
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_ADC1_Init+0x98>)
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <MX_ADC1_Init+0x9c>)
 800099a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_ADC1_Init+0x98>)
 800099e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <MX_ADC1_Init+0xa0>)
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009e6:	f000 fc3f 	bl	8001268 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009f0:	f000 f91e 	bl	8000c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009f4:	2303      	movs	r3, #3
 80009f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0x98>)
 8000a06:	f000 fd4f 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a10:	f000 f90e 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000770 	.word	0x20000770
 8000a20:	40012000 	.word	0x40012000
 8000a24:	0f000001 	.word	0x0f000001

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_I2C1_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <MX_I2C1_Init+0x7c>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a64:	f002 fb3a 	bl	80030dc <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 f8df 	bl	8000c30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a76:	f002 ff2d 	bl	80038d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a80:	f000 f8d6 	bl	8000c30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a88:	f002 ff6f 	bl	800396a <HAL_I2CEx_ConfigDigitalFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f8cd 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000724 	.word	0x20000724
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	20404768 	.word	0x20404768

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <MX_USART3_UART_Init+0x5c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000aec:	f004 f8b2 	bl	8004c54 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f89b 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200006a0 	.word	0x200006a0
 8000b04:	40004800 	.word	0x40004800

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a40      	ldr	r2, [pc, #256]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b3b      	ldr	r3, [pc, #236]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a3a      	ldr	r2, [pc, #232]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a34      	ldr	r2, [pc, #208]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7e:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0320 	and.w	r3, r3, #32
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Pin|Red_Pin|Blue_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bcc:	4816      	ldr	r0, [pc, #88]	; (8000c28 <MX_GPIO_Init+0x120>)
 8000bce:	f002 fa51 	bl	8003074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_GPIO_Init+0x124>)
 8000bda:	f002 fa4b 	bl	8003074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_Pin Red_Pin Blue_Pin */
  GPIO_InitStruct.Pin = Green_Pin|Red_Pin|Blue_Pin;
 8000bde:	f244 0381 	movw	r3, #16513	; 0x4081
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_GPIO_Init+0x120>)
 8000bf8:	f002 f890 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_GPIO_Init+0x124>)
 8000c16:	f002 f881 	bl	8002d1c <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3730      	adds	r7, #48	; 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40021400 	.word	0x40021400

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <ssi_handler>:
extern ADC_HandleTypeDef hadc1;
char const* ssi_tags[]= {"TIME","SENSOR"};
char const** tags=ssi_tags;

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
	{
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]



	switch (iIndex)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <ssi_handler+0x1a>
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d018      	beq.n	8000c86 <ssi_handler+0x4a>
 8000c54:	e029      	b.n	8000caa <ssi_handler+0x6e>
		{
	case 0: sprintf(pcInsert, "RTC Time=%d:%d:%d",get_hours(),get_minutes(),get_seconds());return strlen(pcInsert); break;
 8000c56:	f7ff fd1f 	bl	8000698 <get_hours>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461c      	mov	r4, r3
 8000c5e:	f7ff fd0d 	bl	800067c <get_minutes>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461d      	mov	r5, r3
 8000c66:	f7ff fcfb 	bl	8000660 <get_seconds>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	462b      	mov	r3, r5
 8000c70:	4622      	mov	r2, r4
 8000c72:	4910      	ldr	r1, [pc, #64]	; (8000cb4 <ssi_handler+0x78>)
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f013 fb67 	bl	8014348 <siprintf>
 8000c7a:	68b8      	ldr	r0, [r7, #8]
 8000c7c:	f7ff faea 	bl	8000254 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	e012      	b.n	8000cac <ssi_handler+0x70>
	case 1: HAL_ADC_Start(&hadc1); sprintf(pcInsert, "ADC raw value %d",(int)HAL_ADC_GetValue(&hadc1));return strlen(pcInsert); break;
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <ssi_handler+0x7c>)
 8000c88:	f000 fb32 	bl	80012f0 <HAL_ADC_Start>
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <ssi_handler+0x7c>)
 8000c8e:	f000 fbfd 	bl	800148c <HAL_ADC_GetValue>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	4909      	ldr	r1, [pc, #36]	; (8000cbc <ssi_handler+0x80>)
 8000c98:	68b8      	ldr	r0, [r7, #8]
 8000c9a:	f013 fb55 	bl	8014348 <siprintf>
 8000c9e:	68b8      	ldr	r0, [r7, #8]
 8000ca0:	f7ff fad8 	bl	8000254 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	e000      	b.n	8000cac <ssi_handler+0x70>
	default :break;
		}
	return 0;
 8000caa:	2300      	movs	r3, #0
	}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb4:	08015708 	.word	0x08015708
 8000cb8:	20000770 	.word	0x20000770
 8000cbc:	0801571c 	.word	0x0801571c

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x44>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <HAL_ADC_MspInit+0x74>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d123      	bne.n	8000d72 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_ADC_MspInit+0x78>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_ADC_MspInit+0x78>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_ADC_MspInit+0x78>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_ADC_MspInit+0x78>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_ADC_MspInit+0x78>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_ADC_MspInit+0x78>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = sensor_Pin;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(sensor_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_ADC_MspInit+0x7c>)
 8000d6e:	f001 ffd5 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40012000 	.word	0x40012000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ae      	sub	sp, #184	; 0xb8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2290      	movs	r2, #144	; 0x90
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f013 f9f7 	bl	801419c <memset>
  if(hi2c->Instance==I2C1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <HAL_I2C_MspInit+0xb4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d13c      	bne.n	8000e32 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fb1c 	bl	8004404 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dd2:	f7ff ff2d 	bl	8000c30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_I2C_MspInit+0xb8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_I2C_MspInit+0xb8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_I2C_MspInit+0xb8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e12:	4619      	mov	r1, r3
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <HAL_I2C_MspInit+0xbc>)
 8000e16:	f001 ff81 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_I2C_MspInit+0xb8>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_I2C_MspInit+0xb8>)
 8000e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_I2C_MspInit+0xb8>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	37b8      	adds	r7, #184	; 0xb8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ae      	sub	sp, #184	; 0xb8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2290      	movs	r2, #144	; 0x90
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f013 f997 	bl	801419c <memset>
  if(huart->Instance==USART3)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_UART_MspInit+0xb4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d13c      	bne.n	8000ef2 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fabc 	bl	8004404 <HAL_RCCEx_PeriphCLKConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e92:	f7ff fecd 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_UART_MspInit+0xb8>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_UART_MspInit+0xb8>)
 8000e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_UART_MspInit+0xb8>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_UART_MspInit+0xb8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_UART_MspInit+0xb8>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_UART_MspInit+0xb8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_UART_MspInit+0xbc>)
 8000eee:	f001 ff15 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	37b8      	adds	r7, #184	; 0xb8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004800 	.word	0x40004800
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020c00 	.word	0x40020c00

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f944 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	return 1;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_kill>:

int _kill(int pid, int sig)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <_kill+0x20>)
 8000f78:	2216      	movs	r2, #22
 8000f7a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20006e94 	.word	0x20006e94

08000f90 <_exit>:

void _exit (int status)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffe5 	bl	8000f6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fa2:	e7fe      	b.n	8000fa2 <_exit+0x12>

08000fa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
	}

return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e009      	b.n	8001004 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fbd5 	bl	80007a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <_write+0x12>
	}
	return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103e:	605a      	str	r2, [r3, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d205      	bcs.n	80010bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <_sbrk+0x6c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	20080000 	.word	0x20080000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	200000a4 	.word	0x200000a4
 80010e8:	20006ea8 	.word	0x20006ea8
 80010ec:	20006e94 	.word	0x20006e94

080010f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113e:	f7ff ffd7 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f012 ffd1 	bl	80140e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fb5d 	bl	8000804 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001158:	08041bd8 	.word	0x08041bd8
  ldr r2, =_sbss
 800115c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001160:	20006ea4 	.word	0x20006ea4

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>

08001166 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 fc9e 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f805 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001176:	f7ff fda3 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fcab 	bl	8001afa <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011bc:	f000 fc81 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	20000014 	.word	0x20000014
 80011dc:	20000010 	.word	0x20000010

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000014 	.word	0x20000014
 8001204:	200007bc 	.word	0x200007bc

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200007bc 	.word	0x200007bc

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000014 	.word	0x20000014

08001268 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e031      	b.n	80012e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd3e 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d116      	bne.n	80012d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_ADC_Init+0x84>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	f043 0202 	orr.w	r2, r3, #2
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fa4c 	bl	8001754 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f023 0303 	bic.w	r3, r3, #3
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
 80012d2:	e001      	b.n	80012d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	ffffeefd 	.word	0xffffeefd

080012f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Start+0x1a>
 8001306:	2302      	movs	r3, #2
 8001308:	e0ad      	b.n	8001466 <HAL_ADC_Start+0x176>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d018      	beq.n	8001352 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001330:	4b50      	ldr	r3, [pc, #320]	; (8001474 <HAL_ADC_Start+0x184>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a50      	ldr	r2, [pc, #320]	; (8001478 <HAL_ADC_Start+0x188>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9a      	lsrs	r2, r3, #18
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001344:	e002      	b.n	800134c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d175      	bne.n	800144c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <HAL_ADC_Start+0x18c>)
 8001366:	4013      	ands	r3, r2
 8001368:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139a:	d106      	bne.n	80013aa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f023 0206 	bic.w	r2, r3, #6
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	645a      	str	r2, [r3, #68]	; 0x44
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_ADC_Start+0x190>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d143      	bne.n	8001464 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	e03a      	b.n	8001464 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a24      	ldr	r2, [pc, #144]	; (8001484 <HAL_ADC_Start+0x194>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d10e      	bne.n	8001416 <HAL_ADC_Start+0x126>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001414:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_ADC_Start+0x190>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	d120      	bne.n	8001464 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_ADC_Start+0x198>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d11b      	bne.n	8001464 <HAL_ADC_Start+0x174>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d114      	bne.n	8001464 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	e00b      	b.n	8001464 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f043 0210 	orr.w	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2000000c 	.word	0x2000000c
 8001478:	431bde83 	.word	0x431bde83
 800147c:	fffff8fe 	.word	0xfffff8fe
 8001480:	40012300 	.word	0x40012300
 8001484:	40012000 	.word	0x40012000
 8001488:	40012200 	.word	0x40012200

0800148c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e136      	b.n	8001732 <HAL_ADC_ConfigChannel+0x28a>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d93a      	bls.n	800154a <HAL_ADC_ConfigChannel+0xa2>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014dc:	d035      	beq.n	800154a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68d9      	ldr	r1, [r3, #12]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	3b1e      	subs	r3, #30
 80014f4:	2207      	movs	r2, #7
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	400a      	ands	r2, r1
 8001502:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a8d      	ldr	r2, [pc, #564]	; (8001740 <HAL_ADC_ConfigChannel+0x298>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10a      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68d9      	ldr	r1, [r3, #12]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	061a      	lsls	r2, r3, #24
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001522:	e035      	b.n	8001590 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68d9      	ldr	r1, [r3, #12]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4403      	add	r3, r0
 800153c:	3b1e      	subs	r3, #30
 800153e:	409a      	lsls	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001548:	e022      	b.n	8001590 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6919      	ldr	r1, [r3, #16]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	2207      	movs	r2, #7
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43da      	mvns	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	400a      	ands	r2, r1
 800156c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6919      	ldr	r1, [r3, #16]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	4603      	mov	r3, r0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	409a      	lsls	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b06      	cmp	r3, #6
 8001596:	d824      	bhi.n	80015e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b05      	subs	r3, #5
 80015aa:	221f      	movs	r2, #31
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43da      	mvns	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	400a      	ands	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b05      	subs	r3, #5
 80015d4:	fa00 f203 	lsl.w	r2, r0, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
 80015e0:	e04c      	b.n	800167c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d824      	bhi.n	8001634 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b23      	subs	r3, #35	; 0x23
 80015fc:	221f      	movs	r2, #31
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b23      	subs	r3, #35	; 0x23
 8001626:	fa00 f203 	lsl.w	r2, r0, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
 8001632:	e023      	b.n	800167c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b41      	subs	r3, #65	; 0x41
 8001646:	221f      	movs	r2, #31
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43da      	mvns	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	400a      	ands	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b41      	subs	r3, #65	; 0x41
 8001670:	fa00 f203 	lsl.w	r2, r0, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a30      	ldr	r2, [pc, #192]	; (8001744 <HAL_ADC_ConfigChannel+0x29c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10a      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1f4>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800168e:	d105      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 8001696:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800169a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a28      	ldr	r2, [pc, #160]	; (8001744 <HAL_ADC_ConfigChannel+0x29c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10f      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b12      	cmp	r3, #18
 80016ac:	d10b      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a22      	ldr	r2, [pc, #136]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_ADC_ConfigChannel+0x29c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d12b      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x280>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <HAL_ADC_ConfigChannel+0x298>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d003      	beq.n	80016e2 <HAL_ADC_ConfigChannel+0x23a>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d122      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_ADC_ConfigChannel+0x298>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_ADC_ConfigChannel+0x2a4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_ADC_ConfigChannel+0x2a8>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0c9a      	lsrs	r2, r3, #18
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800171a:	e002      	b.n	8001722 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3b01      	subs	r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f9      	bne.n	800171c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	10000012 	.word	0x10000012
 8001744:	40012000 	.word	0x40012000
 8001748:	40012300 	.word	0x40012300
 800174c:	2000000c 	.word	0x2000000c
 8001750:	431bde83 	.word	0x431bde83

08001754 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800175c:	4b78      	ldr	r3, [pc, #480]	; (8001940 <ADC_Init+0x1ec>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a77      	ldr	r2, [pc, #476]	; (8001940 <ADC_Init+0x1ec>)
 8001762:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001766:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001768:	4b75      	ldr	r3, [pc, #468]	; (8001940 <ADC_Init+0x1ec>)
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4973      	ldr	r1, [pc, #460]	; (8001940 <ADC_Init+0x1ec>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	021a      	lsls	r2, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	4a58      	ldr	r2, [pc, #352]	; (8001944 <ADC_Init+0x1f0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d022      	beq.n	800182e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	e00f      	b.n	800184e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800183c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800184c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0202 	bic.w	r2, r2, #2
 800185c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	005a      	lsls	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01b      	beq.n	80018b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800189a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	3b01      	subs	r3, #1
 80018a8:	035a      	lsls	r2, r3, #13
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	e007      	b.n	80018c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	3b01      	subs	r3, #1
 80018e0:	051a      	lsls	r2, r3, #20
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001906:	025a      	lsls	r2, r3, #9
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	029a      	lsls	r2, r3, #10
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40012300 	.word	0x40012300
 8001944:	0f000001 	.word	0x0f000001

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <__NVIC_SetPriorityGrouping+0x40>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	4313      	orrs	r3, r2
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x40>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00
 800198c:	05fa0000 	.word	0x05fa0000

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff47 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff5c 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffb0 	bl	8001a68 <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001b24:	4ba9      	ldr	r3, [pc, #676]	; (8001dcc <HAL_ETH_Init+0x2b8>)
 8001b26:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e181      	b.n	8001e3e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f003 fdc6 	bl	80056e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b54:	4b9e      	ldr	r3, [pc, #632]	; (8001dd0 <HAL_ETH_Init+0x2bc>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	4a9d      	ldr	r2, [pc, #628]	; (8001dd0 <HAL_ETH_Init+0x2bc>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b60:	4b9b      	ldr	r3, [pc, #620]	; (8001dd0 <HAL_ETH_Init+0x2bc>)
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b6c:	4b99      	ldr	r3, [pc, #612]	; (8001dd4 <HAL_ETH_Init+0x2c0>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a98      	ldr	r2, [pc, #608]	; (8001dd4 <HAL_ETH_Init+0x2c0>)
 8001b72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b76:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b78:	4b96      	ldr	r3, [pc, #600]	; (8001dd4 <HAL_ETH_Init+0x2c0>)
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4994      	ldr	r1, [pc, #592]	; (8001dd4 <HAL_ETH_Init+0x2c0>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9e:	f7ff fb33 	bl	8001208 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ba4:	e011      	b.n	8001bca <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001ba6:	f7ff fb2f 	bl	8001208 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bb4:	d909      	bls.n	8001bca <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e139      	b.n	8001e3e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e4      	bne.n	8001ba6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f023 031c 	bic.w	r3, r3, #28
 8001bea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bec:	f002 fbd6 	bl	800439c <HAL_RCC_GetHCLKFreq>
 8001bf0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4a78      	ldr	r2, [pc, #480]	; (8001dd8 <HAL_ETH_Init+0x2c4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d908      	bls.n	8001c0c <HAL_ETH_Init+0xf8>
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4a77      	ldr	r2, [pc, #476]	; (8001ddc <HAL_ETH_Init+0x2c8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d804      	bhi.n	8001c0c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e027      	b.n	8001c5c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	4a73      	ldr	r2, [pc, #460]	; (8001ddc <HAL_ETH_Init+0x2c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d908      	bls.n	8001c26 <HAL_ETH_Init+0x112>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4a6d      	ldr	r2, [pc, #436]	; (8001dcc <HAL_ETH_Init+0x2b8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d204      	bcs.n	8001c26 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f043 030c 	orr.w	r3, r3, #12
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	e01a      	b.n	8001c5c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <HAL_ETH_Init+0x2b8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d303      	bcc.n	8001c36 <HAL_ETH_Init+0x122>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4a6b      	ldr	r2, [pc, #428]	; (8001de0 <HAL_ETH_Init+0x2cc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d911      	bls.n	8001c5a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_ETH_Init+0x2cc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d908      	bls.n	8001c50 <HAL_ETH_Init+0x13c>
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4a68      	ldr	r2, [pc, #416]	; (8001de4 <HAL_ETH_Init+0x2d0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d804      	bhi.n	8001c50 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e005      	b.n	8001c5c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	e000      	b.n	8001c5c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c5a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c68:	2100      	movs	r1, #0
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fb98 	bl	80023a0 <HAL_ETH_WritePHYRegister>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001c7a:	6939      	ldr	r1, [r7, #16]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fd4d 	bl	800271c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0d7      	b.n	8001e3e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001c8e:	20ff      	movs	r0, #255	; 0xff
 8001c90:	f7ff fac6 	bl	8001220 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a5 	beq.w	8001de8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c9e:	f7ff fab3 	bl	8001208 <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2101      	movs	r1, #1
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fb0f 	bl	80022d0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001cb2:	f7ff faa9 	bl	8001208 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d90f      	bls.n	8001ce4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001cc8:	6939      	ldr	r1, [r7, #16]
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fd26 	bl	800271c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0ac      	b.n	8001e3e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0da      	beq.n	8001ca4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fb53 	bl	80023a0 <HAL_ETH_WritePHYRegister>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d04:	6939      	ldr	r1, [r7, #16]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fd08 	bl	800271c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001d14:	2301      	movs	r3, #1
 8001d16:	e092      	b.n	8001e3e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d18:	f7ff fa76 	bl	8001208 <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	461a      	mov	r2, r3
 8001d24:	2101      	movs	r1, #1
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fad2 	bl	80022d0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001d2c:	f7ff fa6c 	bl	8001208 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d90f      	bls.n	8001d5e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d42:	6939      	ldr	r1, [r7, #16]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fce9 	bl	800271c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e06f      	b.n	8001e3e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0da      	beq.n	8001d1e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2110      	movs	r1, #16
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 faad 	bl	80022d0 <HAL_ETH_ReadPHYRegister>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fcca 	bl	800271c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001d90:	2301      	movs	r3, #1
 8001d92:	e054      	b.n	8001e3e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e002      	b.n	8001dae <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	e035      	b.n	8001e2c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e030      	b.n	8001e2c <HAL_ETH_Init+0x318>
 8001dca:	bf00      	nop
 8001dcc:	03938700 	.word	0x03938700
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	01312cff 	.word	0x01312cff
 8001ddc:	02160ebf 	.word	0x02160ebf
 8001de0:	05f5e0ff 	.word	0x05f5e0ff
 8001de4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2100      	movs	r1, #0
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 facd 	bl	80023a0 <HAL_ETH_WritePHYRegister>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e10:	6939      	ldr	r1, [r7, #16]
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fc82 	bl	800271c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e00c      	b.n	8001e3e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001e24:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001e28:	f7ff f9fa 	bl	8001220 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001e2c:	6939      	ldr	r1, [r7, #16]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fc74 	bl	800271c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop

08001e48 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_ETH_DMATxDescListInit+0x20>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e052      	b.n	8001f0e <HAL_ETH_DMATxDescListInit+0xc6>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e030      	b.n	8001ee6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	015b      	lsls	r3, r3, #5
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e94:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d208      	bcs.n	8001eda <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	e002      	b.n	8001ee0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d3ca      	bcc.n	8001e84 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f241 0310 	movw	r3, #4112	; 0x1010
 8001ef8:	440b      	add	r3, r1
 8001efa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b087      	sub	sp, #28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ETH_DMARxDescListInit+0x20>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e056      	b.n	8001fe8 <HAL_ETH_DMARxDescListInit+0xce>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e034      	b.n	8001fc0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	015b      	lsls	r3, r3, #5
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f66:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f6e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d208      	bcs.n	8001fb4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	e002      	b.n	8001fba <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d3c6      	bcc.n	8001f56 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	f241 030c 	movw	r3, #4108	; 0x100c
 8001fd2:	440b      	add	r3, r1
 8001fd4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_ETH_TransmitFrame+0x24>
 8002014:	2302      	movs	r3, #2
 8002016:	e0cd      	b.n	80021b4 <HAL_ETH_TransmitFrame+0x1c0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800203e:	2301      	movs	r3, #1
 8002040:	e0b8      	b.n	80021b4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	da09      	bge.n	8002060 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2212      	movs	r2, #18
 8002050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0a9      	b.n	80021b4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002066:	4293      	cmp	r3, r2
 8002068:	d915      	bls.n	8002096 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	4a54      	ldr	r2, [pc, #336]	; (80021c0 <HAL_ETH_TransmitFrame+0x1cc>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0a9b      	lsrs	r3, r3, #10
 8002074:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <HAL_ETH_TransmitFrame+0x1cc>)
 800207a:	fba3 1302 	umull	r1, r3, r3, r2
 800207e:	0a9b      	lsrs	r3, r3, #10
 8002080:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	3301      	adds	r3, #1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e001      	b.n	800209a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d11c      	bne.n	80020da <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80020ae:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80020ba:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020ca:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	461a      	mov	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020d8:	e04b      	b.n	8002172 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e044      	b.n	800216a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ee:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d107      	bne.n	8002106 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002104:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800210e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3b01      	subs	r3, #1
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	429a      	cmp	r2, r3
 8002118:	d116      	bne.n	8002148 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002128:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <HAL_ETH_TransmitFrame+0x1d0>)
 800212e:	fb02 f203 	mul.w	r2, r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	4413      	add	r3, r2
 8002136:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800213a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002146:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002156:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	3301      	adds	r3, #1
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3b6      	bcc.n	80020e0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f241 0314 	movw	r3, #4116	; 0x1014
 800217a:	4413      	add	r3, r2
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f241 0314 	movw	r3, #4116	; 0x1014
 800218e:	4413      	add	r3, r2
 8002190:	2204      	movs	r2, #4
 8002192:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	f241 0304 	movw	r3, #4100	; 0x1004
 800219c:	4413      	add	r3, r2
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	ac02b00b 	.word	0xac02b00b
 80021c4:	fffffa0c 	.word	0xfffffa0c

080021c8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ETH_GetReceivedFrame+0x1a>
 80021de:	2302      	movs	r3, #2
 80021e0:	e070      	b.n	80022c4 <HAL_ETH_GetReceivedFrame+0xfc>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db5a      	blt.n	80022b2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d030      	beq.n	800226c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	2b01      	cmp	r3, #1
 800221a:	d103      	bne.n	8002224 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002238:	3b04      	subs	r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e02b      	b.n	80022c4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	461a      	mov	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
 800229a:	e00a      	b.n	80022b2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	460b      	mov	r3, r1
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b82      	cmp	r3, #130	; 0x82
 80022f0:	d101      	bne.n	80022f6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	e050      	b.n	8002398 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2282      	movs	r2, #130	; 0x82
 80022fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 031c 	and.w	r3, r3, #28
 800230c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8a1b      	ldrh	r3, [r3, #16]
 8002312:	02db      	lsls	r3, r3, #11
 8002314:	b29b      	uxth	r3, r3
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800231c:	897b      	ldrh	r3, [r7, #10]
 800231e:	019b      	lsls	r3, r3, #6
 8002320:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f023 0302 	bic.w	r3, r3, #2
 8002330:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002342:	f7fe ff61 	bl	8001208 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002348:	e015      	b.n	8002376 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800234a:	f7fe ff5d 	bl	8001208 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d309      	bcc.n	800236e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e014      	b.n	8002398 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e4      	bne.n	800234a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	b29b      	uxth	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	460b      	mov	r3, r1
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b42      	cmp	r3, #66	; 0x42
 80023c0:	d101      	bne.n	80023c6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	e04e      	b.n	8002464 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2242      	movs	r2, #66	; 0x42
 80023ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 031c 	and.w	r3, r3, #28
 80023dc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8a1b      	ldrh	r3, [r3, #16]
 80023e2:	02db      	lsls	r3, r3, #11
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	019b      	lsls	r3, r3, #6
 80023f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800241c:	f7fe fef4 	bl	8001208 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002422:	e015      	b.n	8002450 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002424:	f7fe fef0 	bl	8001208 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d309      	bcc.n	8002448 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e00d      	b.n	8002464 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e4      	bne.n	8002424 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_ETH_Start+0x16>
 800247e:	2302      	movs	r3, #2
 8002480:	e01f      	b.n	80024c2 <HAL_ETH_Start+0x56>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fb44 	bl	8002b20 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fb7b 	bl	8002b94 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fc12 	bl	8002cc8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fbaf 	bl	8002c08 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fbdc 	bl	8002c68 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_ETH_Stop+0x16>
 80024dc:	2302      	movs	r3, #2
 80024de:	e01f      	b.n	8002520 <HAL_ETH_Stop+0x56>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fba1 	bl	8002c38 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fbce 	bl	8002c98 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fb66 	bl	8002bce <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fbe0 	bl	8002cc8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fb26 	bl	8002b5a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_ETH_ConfigMAC+0x1c>
 8002540:	2302      	movs	r3, #2
 8002542:	e0e4      	b.n	800270e <HAL_ETH_ConfigMAC+0x1e6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80b1 	beq.w	80026be <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4b6c      	ldr	r3, [pc, #432]	; (8002718 <HAL_ETH_ConfigMAC+0x1f0>)
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002574:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800257a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002580:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002586:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800258c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002592:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002598:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800259e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80025a4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80025aa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80025b0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80025b6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7fe fe26 	bl	8001220 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025e4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80025ea:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80025f0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80025f6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80025fc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002602:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800260e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002610:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800261a:	2001      	movs	r0, #1
 800261c:	f7fe fe00 	bl	8001220 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002630:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800263a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	f64f 7341 	movw	r3, #65345	; 0xff41
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002658:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800265e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002664:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800266a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002670:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002688:	2001      	movs	r0, #1
 800268a:	f7fe fdc9 	bl	8001220 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe fdb6 	bl	8001220 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	61da      	str	r2, [r3, #28]
 80026bc:	e01e      	b.n	80026fc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80026cc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7fe fd96 	bl	8001220 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	ff20810f 	.word	0xff20810f

0800271c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0b0      	sub	sp, #192	; 0xc0
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002738:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002740:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800274a:	2300      	movs	r3, #0
 800274c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002766:	663b      	str	r3, [r7, #96]	; 0x60
 8002768:	e001      	b.n	800276e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800276e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002772:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002778:	2300      	movs	r3, #0
 800277a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002788:	2340      	movs	r3, #64	; 0x40
 800278a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80027f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027f4:	4bab      	ldr	r3, [pc, #684]	; (8002aa4 <ETH_MACDMAConfig+0x388>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80027fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002800:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002804:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002808:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800280e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002812:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002816:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800281c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800281e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002820:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002824:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002828:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800282a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800282c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800282e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002830:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002832:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002844:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002850:	2001      	movs	r0, #1
 8002852:	f7fe fce5 	bl	8001220 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800285e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002860:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002864:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002868:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800286a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800286e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002874:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800287a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800287c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002880:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002884:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800288c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800288e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800289a:	2001      	movs	r0, #1
 800289c:	f7fe fcc0 	bl	8001220 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028a8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028b2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028bc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80028c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028cc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028d0:	4013      	ands	r3, r2
 80028d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028da:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80028dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028e0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80028e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80028e6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80028e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80028ec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80028ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80028f2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80028f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80028f8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800290c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002918:	2001      	movs	r0, #1
 800291a:	f7fe fc81 	bl	8001220 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002926:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002928:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800292c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002942:	2001      	movs	r0, #1
 8002944:	f7fe fc6c 	bl	8001220 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002950:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800295a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002964:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002976:	2304      	movs	r3, #4
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800297a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800298c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002996:	2300      	movs	r3, #0
 8002998:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800299a:	2300      	movs	r3, #0
 800299c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f241 0318 	movw	r3, #4120	; 0x1018
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80029ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <ETH_MACDMAConfig+0x38c>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029ba:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80029bc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029be:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80029c0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80029c2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80029c4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80029c6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80029c8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80029ca:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80029cc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80029ce:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80029d0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80029d2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80029d6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80029da:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80029ee:	4413      	add	r3, r2
 80029f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7fe fc0a 	bl	8001220 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a14:	4413      	add	r3, r2
 8002a16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a1a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a20:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002a24:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a28:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002a2c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002a32:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a36:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a44:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fe fbe3 	bl	8001220 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a66:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10d      	bne.n	8002a8c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a78:	4413      	add	r3, r2
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6811      	ldr	r1, [r2, #0]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <ETH_MACDMAConfig+0x390>)
 8002a82:	431a      	orrs	r2, r3
 8002a84:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a88:	440b      	add	r3, r1
 8002a8a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	461a      	mov	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f80b 	bl	8002ab0 <ETH_MACAddressConfig>
}
 8002a9a:	bf00      	nop
 8002a9c:	37c0      	adds	r7, #192	; 0xc0
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	ff20810f 	.word	0xff20810f
 8002aa8:	f8de3f23 	.word	0xf8de3f23
 8002aac:	00010040 	.word	0x00010040

08002ab0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3305      	adds	r3, #5
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	3204      	adds	r2, #4
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <ETH_MACAddressConfig+0x68>)
 8002ad2:	4413      	add	r3, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3303      	adds	r3, #3
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	061a      	lsls	r2, r3, #24
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3301      	adds	r3, #1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	4313      	orrs	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <ETH_MACAddressConfig+0x6c>)
 8002b02:	4413      	add	r3, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	6013      	str	r3, [r2, #0]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40028040 	.word	0x40028040
 8002b1c:	40028044 	.word	0x40028044

08002b20 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b44:	2001      	movs	r0, #1
 8002b46:	f7fe fb6b 	bl	8001220 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0208 	bic.w	r2, r2, #8
 8002b74:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7fe fb4e 	bl	8001220 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0204 	orr.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fe fb31 	bl	8001220 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0204 	bic.w	r2, r2, #4
 8002be8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fe fb14 	bl	8001220 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c18:	4413      	add	r3, r2
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6811      	ldr	r1, [r2, #0]
 8002c20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c24:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c28:	440b      	add	r3, r1
 8002c2a:	601a      	str	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c48:	4413      	add	r3, r2
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6811      	ldr	r1, [r2, #0]
 8002c50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c54:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c58:	440b      	add	r3, r1
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c78:	4413      	add	r3, r2
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6811      	ldr	r1, [r2, #0]
 8002c80:	f043 0202 	orr.w	r2, r3, #2
 8002c84:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c88:	440b      	add	r3, r1
 8002c8a:	601a      	str	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ca8:	4413      	add	r3, r2
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6811      	ldr	r1, [r2, #0]
 8002cb0:	f023 0202 	bic.w	r2, r3, #2
 8002cb4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cb8:	440b      	add	r3, r1
 8002cba:	601a      	str	r2, [r3, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cdc:	4413      	add	r3, r2
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6811      	ldr	r1, [r2, #0]
 8002ce4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ce8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cec:	440b      	add	r3, r1
 8002cee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7fe fa8e 	bl	8001220 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d0e:	440b      	add	r3, r1
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e175      	b.n	8003028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	f040 8164 	bne.w	8003022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d005      	beq.n	8002d72 <HAL_GPIO_Init+0x56>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d130      	bne.n	8002dd4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da8:	2201      	movs	r2, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 0201 	and.w	r2, r3, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d017      	beq.n	8002e10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d123      	bne.n	8002e64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	08da      	lsrs	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3208      	adds	r2, #8
 8002e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	220f      	movs	r2, #15
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	69b9      	ldr	r1, [r7, #24]
 8002e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0203 	and.w	r2, r3, #3
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80be 	beq.w	8003022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea6:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a65      	ldr	r2, [pc, #404]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ebe:	4a61      	ldr	r2, [pc, #388]	; (8003044 <HAL_GPIO_Init+0x328>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_GPIO_Init+0x32c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d037      	beq.n	8002f5a <HAL_GPIO_Init+0x23e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a57      	ldr	r2, [pc, #348]	; (800304c <HAL_GPIO_Init+0x330>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_GPIO_Init+0x23a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d02b      	beq.n	8002f52 <HAL_GPIO_Init+0x236>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a55      	ldr	r2, [pc, #340]	; (8003054 <HAL_GPIO_Init+0x338>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d025      	beq.n	8002f4e <HAL_GPIO_Init+0x232>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a54      	ldr	r2, [pc, #336]	; (8003058 <HAL_GPIO_Init+0x33c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <HAL_GPIO_Init+0x22e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a53      	ldr	r2, [pc, #332]	; (800305c <HAL_GPIO_Init+0x340>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_GPIO_Init+0x22a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a52      	ldr	r2, [pc, #328]	; (8003060 <HAL_GPIO_Init+0x344>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a51      	ldr	r2, [pc, #324]	; (8003064 <HAL_GPIO_Init+0x348>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a50      	ldr	r2, [pc, #320]	; (8003068 <HAL_GPIO_Init+0x34c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4f      	ldr	r2, [pc, #316]	; (800306c <HAL_GPIO_Init+0x350>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f32:	2309      	movs	r3, #9
 8002f34:	e012      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f36:	230a      	movs	r3, #10
 8002f38:	e010      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	e00e      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00c      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f42:	2306      	movs	r3, #6
 8002f44:	e00a      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f46:	2305      	movs	r3, #5
 8002f48:	e008      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e004      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f002 0203 	and.w	r2, r2, #3
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	4093      	lsls	r3, r2
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f6c:	4935      	ldr	r1, [pc, #212]	; (8003044 <HAL_GPIO_Init+0x328>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	3302      	adds	r3, #2
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <HAL_GPIO_Init+0x354>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f9e:	4a34      	ldr	r2, [pc, #208]	; (8003070 <HAL_GPIO_Init+0x354>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa4:	4b32      	ldr	r3, [pc, #200]	; (8003070 <HAL_GPIO_Init+0x354>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <HAL_GPIO_Init+0x354>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <HAL_GPIO_Init+0x354>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_GPIO_Init+0x354>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_GPIO_Init+0x354>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <HAL_GPIO_Init+0x354>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3301      	adds	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	f67f ae86 	bls.w	8002d3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40013800 	.word	0x40013800
 8003048:	40020000 	.word	0x40020000
 800304c:	40020400 	.word	0x40020400
 8003050:	40020800 	.word	0x40020800
 8003054:	40020c00 	.word	0x40020c00
 8003058:	40021000 	.word	0x40021000
 800305c:	40021400 	.word	0x40021400
 8003060:	40021800 	.word	0x40021800
 8003064:	40021c00 	.word	0x40021c00
 8003068:	40022000 	.word	0x40022000
 800306c:	40022400 	.word	0x40022400
 8003070:	40013c00 	.word	0x40013c00

08003074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
 8003080:	4613      	mov	r3, r2
 8003082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003084:	787b      	ldrb	r3, [r7, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003090:	e003      	b.n	800309a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	041a      	lsls	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	619a      	str	r2, [r3, #24]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030b8:	887a      	ldrh	r2, [r7, #2]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	041a      	lsls	r2, r3, #16
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	400b      	ands	r3, r1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fe40 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800312c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	e006      	b.n	8003164 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003162:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d104      	bne.n	8003176 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_I2C_Init+0x11c>)
 8003182:	430b      	orrs	r3, r1
 8003184:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003194:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69d9      	ldr	r1, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	02008000 	.word	0x02008000

080031fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	4608      	mov	r0, r1
 8003206:	4611      	mov	r1, r2
 8003208:	461a      	mov	r2, r3
 800320a:	4603      	mov	r3, r0
 800320c:	817b      	strh	r3, [r7, #10]
 800320e:	460b      	mov	r3, r1
 8003210:	813b      	strh	r3, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	f040 80fd 	bne.w	800341e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_I2C_Mem_Read+0x34>
 800322a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0f1      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2C_Mem_Read+0x4e>
 8003246:	2302      	movs	r3, #2
 8003248:	e0ea      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003252:	f7fd ffd9 	bl	8001208 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2319      	movs	r3, #25
 800325e:	2201      	movs	r2, #1
 8003260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f95b 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0d5      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2222      	movs	r2, #34	; 0x22
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329c:	88f8      	ldrh	r0, [r7, #6]
 800329e:	893a      	ldrh	r2, [r7, #8]
 80032a0:	8979      	ldrh	r1, [r7, #10]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4603      	mov	r3, r0
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f8bf 	bl	8003430 <I2C_RequestMemoryRead>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0ad      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2bff      	cmp	r3, #255	; 0xff
 80032cc:	d90e      	bls.n	80032ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	22ff      	movs	r2, #255	; 0xff
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <HAL_I2C_Mem_Read+0x22c>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fac3 	bl	8003870 <I2C_TransferConfig>
 80032ea:	e00f      	b.n	800330c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	8979      	ldrh	r1, [r7, #10]
 80032fe:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <HAL_I2C_Mem_Read+0x22c>)
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fab2 	bl	8003870 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	2200      	movs	r2, #0
 8003314:	2104      	movs	r1, #4
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f902 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07c      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d034      	beq.n	80033cc <HAL_I2C_Mem_Read+0x1d0>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	2b00      	cmp	r3, #0
 8003368:	d130      	bne.n	80033cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	2200      	movs	r2, #0
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f8d3 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e04d      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2bff      	cmp	r3, #255	; 0xff
 800338c:	d90e      	bls.n	80033ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	b2da      	uxtb	r2, r3
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	2300      	movs	r3, #0
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fa63 	bl	8003870 <I2C_TransferConfig>
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	8979      	ldrh	r1, [r7, #10]
 80033be:	2300      	movs	r3, #0
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa52 	bl	8003870 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d19a      	bne.n	800330c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f920 	bl	8003620 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e01a      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2220      	movs	r2, #32
 80033f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_I2C_Mem_Read+0x230>)
 80033fe:	400b      	ands	r3, r1
 8003400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	80002400 	.word	0x80002400
 800342c:	fe00e800 	.word	0xfe00e800

08003430 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	8979      	ldrh	r1, [r7, #10]
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <I2C_RequestMemoryRead+0xa4>)
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa0a 	bl	8003870 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f89d 	bl	80035a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e02c      	b.n	80034ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
 8003480:	e015      	b.n	80034ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	b29b      	uxth	r3, r3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f883 	bl	80035a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e012      	b.n	80034ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2140      	movs	r1, #64	; 0x40
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f831 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	80002000 	.word	0x80002000

080034d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d103      	bne.n	80034f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d007      	beq.n	8003514 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	619a      	str	r2, [r3, #24]
  }
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e022      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003538:	d01e      	beq.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fd fe65 	bl	8001208 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e00f      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d0cd      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ac:	e02c      	b.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f870 	bl	8003698 <I2C_IsErrorOccurred>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e02a      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c8:	d01e      	beq.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fd fe1d 	bl	8001208 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d113      	bne.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e007      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d1cb      	bne.n	80035ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e028      	b.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f830 	bl	8003698 <I2C_IsErrorOccurred>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e026      	b.n	8003690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fd fde1 	bl	8001208 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e007      	b.n	8003690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b20      	cmp	r3, #32
 800368c:	d1cf      	bne.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d075      	beq.n	80037b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036cc:	e056      	b.n	800377c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d4:	d052      	beq.n	800377c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fd fd97 	bl	8001208 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_IsErrorOccurred+0x54>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d147      	bne.n	800377c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370e:	d12e      	bne.n	800376e <I2C_IsErrorOccurred+0xd6>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003716:	d02a      	beq.n	800376e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b20      	cmp	r3, #32
 800371c:	d027      	beq.n	800376e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800372e:	f7fd fd6b 	bl	8001208 <HAL_GetTick>
 8003732:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003734:	e01b      	b.n	800376e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003736:	f7fd fd67 	bl	8001208 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b19      	cmp	r3, #25
 8003742:	d914      	bls.n	800376e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b20      	cmp	r3, #32
 800377a:	d1dc      	bne.n	8003736 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d003      	beq.n	8003792 <I2C_IsErrorOccurred+0xfa>
 800378a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800378e:	2b00      	cmp	r3, #0
 8003790:	d09d      	beq.n	80036ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2220      	movs	r2, #32
 80037a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f043 0308 	orr.w	r3, r3, #8
 80037ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003816:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800381e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01c      	beq.n	8003860 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7ff fe56 	bl	80034d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <I2C_IsErrorOccurred+0x1d4>)
 8003838:	400b      	ands	r3, r1
 800383a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	431a      	orrs	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003864:	4618      	mov	r0, r3
 8003866:	3728      	adds	r7, #40	; 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fe00e800 	.word	0xfe00e800

08003870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	817b      	strh	r3, [r7, #10]
 800387e:	4613      	mov	r3, r2
 8003880:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003882:	897b      	ldrh	r3, [r7, #10]
 8003884:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003888:	7a7b      	ldrb	r3, [r7, #9]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003890:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	4313      	orrs	r3, r2
 800389a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800389e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	0d5b      	lsrs	r3, r3, #21
 80038aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <I2C_TransferConfig+0x60>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	43db      	mvns	r3, r3
 80038b4:	ea02 0103 	and.w	r1, r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	03ff63ff 	.word	0x03ff63ff

080038d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d138      	bne.n	800395c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e032      	b.n	800395e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	; 0x24
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396a:	b480      	push	{r7}
 800396c:	b085      	sub	sp, #20
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	d139      	bne.n	80039f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398a:	2302      	movs	r3, #2
 800398c:	e033      	b.n	80039f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2224      	movs	r2, #36	; 0x24
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e000      	b.n	80039f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a26:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a32:	f7fd fbe9 	bl	8001208 <HAL_GetTick>
 8003a36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a38:	e009      	b.n	8003a4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a3a:	f7fd fbe5 	bl	8001208 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a48:	d901      	bls.n	8003a4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e022      	b.n	8003a94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a68:	f7fd fbce 	bl	8001208 <HAL_GetTick>
 8003a6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a6e:	e009      	b.n	8003a84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a70:	f7fd fbca 	bl	8001208 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a7e:	d901      	bls.n	8003a84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e007      	b.n	8003a94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a90:	d1ee      	bne.n	8003a70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e29b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8087 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac8:	4b96      	ldr	r3, [pc, #600]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d00c      	beq.n	8003aee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad4:	4b93      	ldr	r3, [pc, #588]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d112      	bne.n	8003b06 <HAL_RCC_OscConfig+0x62>
 8003ae0:	4b90      	ldr	r3, [pc, #576]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aee:	4b8d      	ldr	r3, [pc, #564]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d06c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x130>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d168      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e275      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x7a>
 8003b10:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a83      	ldr	r2, [pc, #524]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e02e      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x9c>
 8003b26:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7e      	ldr	r2, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7b      	ldr	r2, [pc, #492]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b64:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6b      	ldr	r2, [pc, #428]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd fb40 	bl	8001208 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fb3c 	bl	8001208 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e229      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b61      	ldr	r3, [pc, #388]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd fb2c 	bl	8001208 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fb28 	bl	8001208 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e215      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x110>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d069      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bee:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d11c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x190>
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x17a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1e9      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	493d      	ldr	r1, [pc, #244]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	e040      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fade 	bl	8001208 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fd fada 	bl	8001208 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1c7      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4929      	ldr	r1, [pc, #164]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
 8003c82:	e018      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd faba 	bl	8001208 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fd fab6 	bl	8001208 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1a3      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d038      	beq.n	8003d34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d019      	beq.n	8003cfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fd fa97 	bl	8001208 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cde:	f7fd fa93 	bl	8001208 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e180      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x23a>
 8003cfc:	e01a      	b.n	8003d34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fa7d 	bl	8001208 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fd fa79 	bl	8001208 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d903      	bls.n	8003d28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e166      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
 8003d24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	4b92      	ldr	r3, [pc, #584]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ee      	bne.n	8003d12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a4 	beq.w	8003e8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d42:	4b8c      	ldr	r3, [pc, #560]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a88      	ldr	r2, [pc, #544]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5a:	4b86      	ldr	r3, [pc, #536]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6a:	4b83      	ldr	r3, [pc, #524]	; (8003f78 <HAL_RCC_OscConfig+0x4d4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d118      	bne.n	8003da8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d76:	4b80      	ldr	r3, [pc, #512]	; (8003f78 <HAL_RCC_OscConfig+0x4d4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7f      	ldr	r2, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0x4d4>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d82:	f7fd fa41 	bl	8001208 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd fa3d 	bl	8001208 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b64      	cmp	r3, #100	; 0x64
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e12a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <HAL_RCC_OscConfig+0x4d4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x31a>
 8003db0:	4b70      	ldr	r3, [pc, #448]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a6f      	ldr	r2, [pc, #444]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	e02d      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x33c>
 8003dc6:	4b6b      	ldr	r3, [pc, #428]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a6a      	ldr	r2, [pc, #424]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a67      	ldr	r2, [pc, #412]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	e01c      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCC_OscConfig+0x35e>
 8003de8:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a61      	ldr	r2, [pc, #388]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	4a5e      	ldr	r2, [pc, #376]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003e00:	e00b      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
 8003e02:	4b5c      	ldr	r3, [pc, #368]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a5b      	ldr	r2, [pc, #364]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd f9f1 	bl	8001208 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fd f9ed 	bl	8001208 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0d8      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCC_OscConfig+0x386>
 8003e4c:	e014      	b.n	8003e78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fd f9db 	bl	8001208 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd f9d7 	bl	8001208 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0c2      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6c:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80ae 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e94:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d06d      	beq.n	8003f7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d14b      	bne.n	8003f40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a31      	ldr	r2, [pc, #196]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f9a8 	bl	8001208 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd f9a4 	bl	8001208 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e091      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	071b      	lsls	r3, r3, #28
 8003f06:	491b      	ldr	r1, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fd f976 	bl	8001208 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fd f972 	bl	8001208 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e05f      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x47c>
 8003f3e:	e057      	b.n	8003ff0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd f95c 	bl	8001208 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd f958 	bl	8001208 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e045      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x4b0>
 8003f72:	e03d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x54c>
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <HAL_RCC_OscConfig+0x558>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d030      	beq.n	8003fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d129      	bne.n	8003fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d122      	bne.n	8003fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fac:	4013      	ands	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d119      	bne.n	8003fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d10f      	bne.n	8003fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0d0      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d910      	bls.n	8004048 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b67      	ldr	r3, [pc, #412]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 020f 	bic.w	r2, r3, #15
 800402e:	4965      	ldr	r1, [pc, #404]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b8      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a58      	ldr	r2, [pc, #352]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004078:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a52      	ldr	r2, [pc, #328]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004082:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	494d      	ldr	r1, [pc, #308]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d040      	beq.n	8004124 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d115      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e073      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 0203 	bic.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4936      	ldr	r1, [pc, #216]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f4:	f7fd f888 	bl	8001208 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fc:	f7fd f884 	bl	8001208 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e053      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 020c 	and.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d1eb      	bne.n	80040fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d210      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 020f 	bic.w	r2, r3, #15
 800413a:	4922      	ldr	r1, [pc, #136]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4916      	ldr	r1, [pc, #88]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490e      	ldr	r1, [pc, #56]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f821 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004196:	4602      	mov	r2, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	490a      	ldr	r1, [pc, #40]	; (80041cc <HAL_RCC_ClockConfig+0x1cc>)
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1d0>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1d4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fc ffe4 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40023c00 	.word	0x40023c00
 80041c8:	40023800 	.word	0x40023800
 80041cc:	080187d0 	.word	0x080187d0
 80041d0:	2000000c 	.word	0x2000000c
 80041d4:	20000010 	.word	0x20000010

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	2300      	movs	r3, #0
 80041ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f0:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d00d      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x40>
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	f200 80bd 	bhi.w	800437c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x34>
 8004206:	2b04      	cmp	r3, #4
 8004208:	d003      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x3a>
 800420a:	e0b7      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b61      	ldr	r3, [pc, #388]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800420e:	60bb      	str	r3, [r7, #8]
      break;
 8004210:	e0b7      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004212:	4b61      	ldr	r3, [pc, #388]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004214:	60bb      	str	r3, [r7, #8]
      break;
 8004216:	e0b4      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004220:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004222:	4b5b      	ldr	r3, [pc, #364]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04d      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b58      	ldr	r3, [pc, #352]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	ea02 0800 	and.w	r8, r2, r0
 8004246:	ea03 0901 	and.w	r9, r3, r1
 800424a:	4640      	mov	r0, r8
 800424c:	4649      	mov	r1, r9
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	014b      	lsls	r3, r1, #5
 8004258:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800425c:	0142      	lsls	r2, r0, #5
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	ebb0 0008 	subs.w	r0, r0, r8
 8004266:	eb61 0109 	sbc.w	r1, r1, r9
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	018b      	lsls	r3, r1, #6
 8004274:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004278:	0182      	lsls	r2, r0, #6
 800427a:	1a12      	subs	r2, r2, r0
 800427c:	eb63 0301 	sbc.w	r3, r3, r1
 8004280:	f04f 0000 	mov.w	r0, #0
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	00d9      	lsls	r1, r3, #3
 800428a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800428e:	00d0      	lsls	r0, r2, #3
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	eb12 0208 	adds.w	r2, r2, r8
 8004298:	eb43 0309 	adc.w	r3, r3, r9
 800429c:	f04f 0000 	mov.w	r0, #0
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	0259      	lsls	r1, r3, #9
 80042a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042aa:	0250      	lsls	r0, r2, #9
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	f7fc f828 	bl	8000310 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e04a      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	461a      	mov	r2, r3
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	ea02 0400 	and.w	r4, r2, r0
 80042e2:	ea03 0501 	and.w	r5, r3, r1
 80042e6:	4620      	mov	r0, r4
 80042e8:	4629      	mov	r1, r5
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	014b      	lsls	r3, r1, #5
 80042f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042f8:	0142      	lsls	r2, r0, #5
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	1b00      	subs	r0, r0, r4
 8004300:	eb61 0105 	sbc.w	r1, r1, r5
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	018b      	lsls	r3, r1, #6
 800430e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004312:	0182      	lsls	r2, r0, #6
 8004314:	1a12      	subs	r2, r2, r0
 8004316:	eb63 0301 	sbc.w	r3, r3, r1
 800431a:	f04f 0000 	mov.w	r0, #0
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	00d9      	lsls	r1, r3, #3
 8004324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004328:	00d0      	lsls	r0, r2, #3
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	1912      	adds	r2, r2, r4
 8004330:	eb45 0303 	adc.w	r3, r5, r3
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	0299      	lsls	r1, r3, #10
 800433e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004342:	0290      	lsls	r0, r2, #10
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	461a      	mov	r2, r3
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	f7fb ffdc 	bl	8000310 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4613      	mov	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	3301      	adds	r3, #1
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	60bb      	str	r3, [r7, #8]
      break;
 800437a:	e002      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800437e:	60bb      	str	r3, [r7, #8]
      break;
 8004380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004382:	68bb      	ldr	r3, [r7, #8]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	00f42400 	.word	0x00f42400
 8004398:	007a1200 	.word	0x007a1200

0800439c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b8:	f7ff fff0 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0a9b      	lsrs	r3, r3, #10
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4903      	ldr	r1, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	080187e0 	.word	0x080187e0

080043dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e0:	f7ff ffdc 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0b5b      	lsrs	r3, r3, #13
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	080187e0 	.word	0x080187e0

08004404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800442c:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a68      	ldr	r2, [pc, #416]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004436:	6093      	str	r3, [r2, #8]
 8004438:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	4964      	ldr	r1, [pc, #400]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d017      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445e:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	4959      	ldr	r1, [pc, #356]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800449a:	4b4e      	ldr	r3, [pc, #312]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	494a      	ldr	r1, [pc, #296]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b8:	d101      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 808b 	beq.w	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b3a      	ldr	r3, [pc, #232]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	4a39      	ldr	r2, [pc, #228]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6413      	str	r3, [r2, #64]	; 0x40
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004500:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fc fe7c 	bl	8001208 <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fc fe78 	bl	8001208 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e38f      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004526:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004532:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d035      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	d02e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004550:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004566:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004578:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d114      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fc fe40 	bl	8001208 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458a:	e00a      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fc fe3c 	bl	8001208 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e351      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ee      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ba:	d111      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ca:	400b      	ands	r3, r1
 80045cc:	4901      	ldr	r1, [pc, #4]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
 80045d2:	e00b      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000
 80045dc:	0ffffcff 	.word	0x0ffffcff
 80045e0:	4bb3      	ldr	r3, [pc, #716]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4ab2      	ldr	r2, [pc, #712]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045ea:	6093      	str	r3, [r2, #8]
 80045ec:	4bb0      	ldr	r3, [pc, #704]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f8:	49ad      	ldr	r1, [pc, #692]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800460a:	4ba9      	ldr	r3, [pc, #676]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	4aa7      	ldr	r2, [pc, #668]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800461a:	4ba5      	ldr	r3, [pc, #660]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	49a2      	ldr	r1, [pc, #648]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004638:	4b9d      	ldr	r3, [pc, #628]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004646:	499a      	ldr	r1, [pc, #616]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800465a:	4b95      	ldr	r3, [pc, #596]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004668:	4991      	ldr	r1, [pc, #580]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467c:	4b8c      	ldr	r3, [pc, #560]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468a:	4989      	ldr	r1, [pc, #548]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800469e:	4b84      	ldr	r3, [pc, #528]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4980      	ldr	r1, [pc, #512]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c0:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	4978      	ldr	r1, [pc, #480]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e2:	4b73      	ldr	r3, [pc, #460]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f023 020c 	bic.w	r2, r3, #12
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	496f      	ldr	r1, [pc, #444]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004704:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	4967      	ldr	r1, [pc, #412]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004726:	4b62      	ldr	r3, [pc, #392]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	495e      	ldr	r1, [pc, #376]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004748:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	4956      	ldr	r1, [pc, #344]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800476a:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	494d      	ldr	r1, [pc, #308]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800478c:	4b48      	ldr	r3, [pc, #288]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	4945      	ldr	r1, [pc, #276]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ae:	4b40      	ldr	r3, [pc, #256]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	493c      	ldr	r1, [pc, #240]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d0:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047de:	4934      	ldr	r1, [pc, #208]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047f2:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004800:	492b      	ldr	r1, [pc, #172]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004810:	d101      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004832:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004838:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	491b      	ldr	r1, [pc, #108]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004864:	4912      	ldr	r1, [pc, #72]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004888:	4909      	ldr	r1, [pc, #36]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	e002      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800
 80048b4:	4986      	ldr	r1, [pc, #536]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048c8:	4b81      	ldr	r3, [pc, #516]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d8:	497d      	ldr	r1, [pc, #500]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d006      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80d6 	beq.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f4:	4b76      	ldr	r3, [pc, #472]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a75      	ldr	r2, [pc, #468]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004900:	f7fc fc82 	bl	8001208 <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004908:	f7fc fc7e 	bl	8001208 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	; 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e195      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800491a:	4b6d      	ldr	r3, [pc, #436]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d021      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11d      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800493a:	4b65      	ldr	r3, [pc, #404]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004948:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494e:	0e1b      	lsrs	r3, r3, #24
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	019a      	lsls	r2, r3, #6
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	071b      	lsls	r3, r3, #28
 800496e:	4958      	ldr	r1, [pc, #352]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a0:	d129      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049a2:	4b4b      	ldr	r3, [pc, #300]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049b0:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b6:	0f1b      	lsrs	r3, r3, #28
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	019a      	lsls	r2, r3, #6
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	061b      	lsls	r3, r3, #24
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	071b      	lsls	r3, r3, #28
 80049d6:	493e      	ldr	r1, [pc, #248]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049de:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e4:	f023 021f 	bic.w	r2, r3, #31
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	3b01      	subs	r3, #1
 80049ee:	4938      	ldr	r1, [pc, #224]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01d      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a02:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a08:	0e1b      	lsrs	r3, r3, #24
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a10:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a16:	0f1b      	lsrs	r3, r3, #28
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	019a      	lsls	r2, r3, #6
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	061b      	lsls	r3, r3, #24
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	4926      	ldr	r1, [pc, #152]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	019a      	lsls	r2, r3, #6
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	071b      	lsls	r3, r3, #28
 8004a66:	491a      	ldr	r1, [pc, #104]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a17      	ldr	r2, [pc, #92]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a7a:	f7fc fbc5 	bl	8001208 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a82:	f7fc fbc1 	bl	8001208 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b64      	cmp	r3, #100	; 0x64
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e0d8      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 80ce 	bne.w	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab4:	f7fc fba8 	bl	8001208 <HAL_GetTick>
 8004ab8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004abc:	f7fc fba4 	bl	8001208 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d904      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0bb      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad4:	4b5e      	ldr	r3, [pc, #376]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae0:	d0ec      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d02e      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d12a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b0a:	4b51      	ldr	r3, [pc, #324]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b18:	4b4d      	ldr	r3, [pc, #308]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	0f1b      	lsrs	r3, r3, #28
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	019a      	lsls	r2, r3, #6
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	4944      	ldr	r1, [pc, #272]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b46:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	3b01      	subs	r3, #1
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	493d      	ldr	r1, [pc, #244]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d022      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b74:	d11d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b76:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b84:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	0f1b      	lsrs	r3, r3, #28
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	019a      	lsls	r2, r3, #6
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	4929      	ldr	r1, [pc, #164]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d028      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bcc:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	019a      	lsls	r2, r3, #6
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	431a      	orrs	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	4917      	ldr	r1, [pc, #92]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	4911      	ldr	r1, [pc, #68]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1c:	f7fc faf4 	bl	8001208 <HAL_GetTick>
 8004c20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c24:	f7fc faf0 	bl	8001208 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e007      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c42:	d1ef      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40023800 	.word	0x40023800

08004c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e040      	b.n	8004ce8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc f8e6 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2224      	movs	r2, #36	; 0x24
 8004c80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8c0 	bl	8004e18 <UART_SetConfig>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e022      	b.n	8004ce8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fb16 	bl	80052dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fb9d 	bl	8005420 <UART_CheckIdleState>
 8004ce6:	4603      	mov	r3, r0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	f040 8081 	bne.w	8004e0c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_UART_Transmit+0x26>
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e079      	b.n	8004e0e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Transmit+0x38>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e072      	b.n	8004e0e <HAL_UART_Transmit+0x11e>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2221      	movs	r2, #33	; 0x21
 8004d3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3e:	f7fc fa63 	bl	8001208 <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5c:	d108      	bne.n	8004d70 <HAL_UART_Transmit+0x80>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	e003      	b.n	8004d78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d80:	e02c      	b.n	8004ddc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fb90 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e038      	b.n	8004e0e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	3302      	adds	r3, #2
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	e007      	b.n	8004dca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1cc      	bne.n	8004d82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2200      	movs	r2, #0
 8004df0:	2140      	movs	r1, #64	; 0x40
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fb5d 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e005      	b.n	8004e0e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4ba7      	ldr	r3, [pc, #668]	; (80050e0 <UART_SetConfig+0x2c8>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a95      	ldr	r2, [pc, #596]	; (80050e4 <UART_SetConfig+0x2cc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d120      	bne.n	8004ed6 <UART_SetConfig+0xbe>
 8004e94:	4b94      	ldr	r3, [pc, #592]	; (80050e8 <UART_SetConfig+0x2d0>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d816      	bhi.n	8004ed0 <UART_SetConfig+0xb8>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <UART_SetConfig+0x90>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004ec5 	.word	0x08004ec5
 8004eb0:	08004ebf 	.word	0x08004ebf
 8004eb4:	08004ecb 	.word	0x08004ecb
 8004eb8:	2301      	movs	r3, #1
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e14f      	b.n	800515e <UART_SetConfig+0x346>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e14c      	b.n	800515e <UART_SetConfig+0x346>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e149      	b.n	800515e <UART_SetConfig+0x346>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e146      	b.n	800515e <UART_SetConfig+0x346>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e143      	b.n	800515e <UART_SetConfig+0x346>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a84      	ldr	r2, [pc, #528]	; (80050ec <UART_SetConfig+0x2d4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d132      	bne.n	8004f46 <UART_SetConfig+0x12e>
 8004ee0:	4b81      	ldr	r3, [pc, #516]	; (80050e8 <UART_SetConfig+0x2d0>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	d828      	bhi.n	8004f40 <UART_SetConfig+0x128>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0xdc>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f29 	.word	0x08004f29
 8004ef8:	08004f41 	.word	0x08004f41
 8004efc:	08004f41 	.word	0x08004f41
 8004f00:	08004f41 	.word	0x08004f41
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f41 	.word	0x08004f41
 8004f0c:	08004f41 	.word	0x08004f41
 8004f10:	08004f41 	.word	0x08004f41
 8004f14:	08004f2f 	.word	0x08004f2f
 8004f18:	08004f41 	.word	0x08004f41
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f41 	.word	0x08004f41
 8004f24:	08004f3b 	.word	0x08004f3b
 8004f28:	2300      	movs	r3, #0
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e117      	b.n	800515e <UART_SetConfig+0x346>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e114      	b.n	800515e <UART_SetConfig+0x346>
 8004f34:	2304      	movs	r3, #4
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e111      	b.n	800515e <UART_SetConfig+0x346>
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e10e      	b.n	800515e <UART_SetConfig+0x346>
 8004f40:	2310      	movs	r3, #16
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e10b      	b.n	800515e <UART_SetConfig+0x346>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a69      	ldr	r2, [pc, #420]	; (80050f0 <UART_SetConfig+0x2d8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d120      	bne.n	8004f92 <UART_SetConfig+0x17a>
 8004f50:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <UART_SetConfig+0x2d0>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f5a:	2b30      	cmp	r3, #48	; 0x30
 8004f5c:	d013      	beq.n	8004f86 <UART_SetConfig+0x16e>
 8004f5e:	2b30      	cmp	r3, #48	; 0x30
 8004f60:	d814      	bhi.n	8004f8c <UART_SetConfig+0x174>
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d009      	beq.n	8004f7a <UART_SetConfig+0x162>
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d810      	bhi.n	8004f8c <UART_SetConfig+0x174>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <UART_SetConfig+0x15c>
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d006      	beq.n	8004f80 <UART_SetConfig+0x168>
 8004f72:	e00b      	b.n	8004f8c <UART_SetConfig+0x174>
 8004f74:	2300      	movs	r3, #0
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e0f1      	b.n	800515e <UART_SetConfig+0x346>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e0ee      	b.n	800515e <UART_SetConfig+0x346>
 8004f80:	2304      	movs	r3, #4
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e0eb      	b.n	800515e <UART_SetConfig+0x346>
 8004f86:	2308      	movs	r3, #8
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e0e8      	b.n	800515e <UART_SetConfig+0x346>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e0e5      	b.n	800515e <UART_SetConfig+0x346>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a57      	ldr	r2, [pc, #348]	; (80050f4 <UART_SetConfig+0x2dc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d120      	bne.n	8004fde <UART_SetConfig+0x1c6>
 8004f9c:	4b52      	ldr	r3, [pc, #328]	; (80050e8 <UART_SetConfig+0x2d0>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fa8:	d013      	beq.n	8004fd2 <UART_SetConfig+0x1ba>
 8004faa:	2bc0      	cmp	r3, #192	; 0xc0
 8004fac:	d814      	bhi.n	8004fd8 <UART_SetConfig+0x1c0>
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d009      	beq.n	8004fc6 <UART_SetConfig+0x1ae>
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d810      	bhi.n	8004fd8 <UART_SetConfig+0x1c0>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <UART_SetConfig+0x1a8>
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d006      	beq.n	8004fcc <UART_SetConfig+0x1b4>
 8004fbe:	e00b      	b.n	8004fd8 <UART_SetConfig+0x1c0>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e0cb      	b.n	800515e <UART_SetConfig+0x346>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e0c8      	b.n	800515e <UART_SetConfig+0x346>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e0c5      	b.n	800515e <UART_SetConfig+0x346>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e0c2      	b.n	800515e <UART_SetConfig+0x346>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e0bf      	b.n	800515e <UART_SetConfig+0x346>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a45      	ldr	r2, [pc, #276]	; (80050f8 <UART_SetConfig+0x2e0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d125      	bne.n	8005034 <UART_SetConfig+0x21c>
 8004fe8:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <UART_SetConfig+0x2d0>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff6:	d017      	beq.n	8005028 <UART_SetConfig+0x210>
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffc:	d817      	bhi.n	800502e <UART_SetConfig+0x216>
 8004ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005002:	d00b      	beq.n	800501c <UART_SetConfig+0x204>
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d811      	bhi.n	800502e <UART_SetConfig+0x216>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <UART_SetConfig+0x1fe>
 800500e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005012:	d006      	beq.n	8005022 <UART_SetConfig+0x20a>
 8005014:	e00b      	b.n	800502e <UART_SetConfig+0x216>
 8005016:	2300      	movs	r3, #0
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e0a0      	b.n	800515e <UART_SetConfig+0x346>
 800501c:	2302      	movs	r3, #2
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e09d      	b.n	800515e <UART_SetConfig+0x346>
 8005022:	2304      	movs	r3, #4
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e09a      	b.n	800515e <UART_SetConfig+0x346>
 8005028:	2308      	movs	r3, #8
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e097      	b.n	800515e <UART_SetConfig+0x346>
 800502e:	2310      	movs	r3, #16
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e094      	b.n	800515e <UART_SetConfig+0x346>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a30      	ldr	r2, [pc, #192]	; (80050fc <UART_SetConfig+0x2e4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d125      	bne.n	800508a <UART_SetConfig+0x272>
 800503e:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <UART_SetConfig+0x2d0>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800504c:	d017      	beq.n	800507e <UART_SetConfig+0x266>
 800504e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005052:	d817      	bhi.n	8005084 <UART_SetConfig+0x26c>
 8005054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005058:	d00b      	beq.n	8005072 <UART_SetConfig+0x25a>
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505e:	d811      	bhi.n	8005084 <UART_SetConfig+0x26c>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <UART_SetConfig+0x254>
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005068:	d006      	beq.n	8005078 <UART_SetConfig+0x260>
 800506a:	e00b      	b.n	8005084 <UART_SetConfig+0x26c>
 800506c:	2301      	movs	r3, #1
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e075      	b.n	800515e <UART_SetConfig+0x346>
 8005072:	2302      	movs	r3, #2
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e072      	b.n	800515e <UART_SetConfig+0x346>
 8005078:	2304      	movs	r3, #4
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e06f      	b.n	800515e <UART_SetConfig+0x346>
 800507e:	2308      	movs	r3, #8
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e06c      	b.n	800515e <UART_SetConfig+0x346>
 8005084:	2310      	movs	r3, #16
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e069      	b.n	800515e <UART_SetConfig+0x346>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <UART_SetConfig+0x2e8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d137      	bne.n	8005104 <UART_SetConfig+0x2ec>
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <UART_SetConfig+0x2d0>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800509e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050a2:	d017      	beq.n	80050d4 <UART_SetConfig+0x2bc>
 80050a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050a8:	d817      	bhi.n	80050da <UART_SetConfig+0x2c2>
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ae:	d00b      	beq.n	80050c8 <UART_SetConfig+0x2b0>
 80050b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b4:	d811      	bhi.n	80050da <UART_SetConfig+0x2c2>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <UART_SetConfig+0x2aa>
 80050ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050be:	d006      	beq.n	80050ce <UART_SetConfig+0x2b6>
 80050c0:	e00b      	b.n	80050da <UART_SetConfig+0x2c2>
 80050c2:	2300      	movs	r3, #0
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e04a      	b.n	800515e <UART_SetConfig+0x346>
 80050c8:	2302      	movs	r3, #2
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e047      	b.n	800515e <UART_SetConfig+0x346>
 80050ce:	2304      	movs	r3, #4
 80050d0:	77fb      	strb	r3, [r7, #31]
 80050d2:	e044      	b.n	800515e <UART_SetConfig+0x346>
 80050d4:	2308      	movs	r3, #8
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e041      	b.n	800515e <UART_SetConfig+0x346>
 80050da:	2310      	movs	r3, #16
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e03e      	b.n	800515e <UART_SetConfig+0x346>
 80050e0:	efff69f3 	.word	0xefff69f3
 80050e4:	40011000 	.word	0x40011000
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40004400 	.word	0x40004400
 80050f0:	40004800 	.word	0x40004800
 80050f4:	40004c00 	.word	0x40004c00
 80050f8:	40005000 	.word	0x40005000
 80050fc:	40011400 	.word	0x40011400
 8005100:	40007800 	.word	0x40007800
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a71      	ldr	r2, [pc, #452]	; (80052d0 <UART_SetConfig+0x4b8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d125      	bne.n	800515a <UART_SetConfig+0x342>
 800510e:	4b71      	ldr	r3, [pc, #452]	; (80052d4 <UART_SetConfig+0x4bc>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005118:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800511c:	d017      	beq.n	800514e <UART_SetConfig+0x336>
 800511e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005122:	d817      	bhi.n	8005154 <UART_SetConfig+0x33c>
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	d00b      	beq.n	8005142 <UART_SetConfig+0x32a>
 800512a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800512e:	d811      	bhi.n	8005154 <UART_SetConfig+0x33c>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <UART_SetConfig+0x324>
 8005134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005138:	d006      	beq.n	8005148 <UART_SetConfig+0x330>
 800513a:	e00b      	b.n	8005154 <UART_SetConfig+0x33c>
 800513c:	2300      	movs	r3, #0
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e00d      	b.n	800515e <UART_SetConfig+0x346>
 8005142:	2302      	movs	r3, #2
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e00a      	b.n	800515e <UART_SetConfig+0x346>
 8005148:	2304      	movs	r3, #4
 800514a:	77fb      	strb	r3, [r7, #31]
 800514c:	e007      	b.n	800515e <UART_SetConfig+0x346>
 800514e:	2308      	movs	r3, #8
 8005150:	77fb      	strb	r3, [r7, #31]
 8005152:	e004      	b.n	800515e <UART_SetConfig+0x346>
 8005154:	2310      	movs	r3, #16
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e001      	b.n	800515e <UART_SetConfig+0x346>
 800515a:	2310      	movs	r3, #16
 800515c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005166:	d15a      	bne.n	800521e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005168:	7ffb      	ldrb	r3, [r7, #31]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d827      	bhi.n	80051be <UART_SetConfig+0x3a6>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0x35c>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005199 	.word	0x08005199
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	080051bf 	.word	0x080051bf
 8005184:	080051af 	.word	0x080051af
 8005188:	080051bf 	.word	0x080051bf
 800518c:	080051bf 	.word	0x080051bf
 8005190:	080051bf 	.word	0x080051bf
 8005194:	080051b7 	.word	0x080051b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005198:	f7ff f90c 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 800519c:	61b8      	str	r0, [r7, #24]
        break;
 800519e:	e013      	b.n	80051c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a0:	f7ff f91c 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 80051a4:	61b8      	str	r0, [r7, #24]
        break;
 80051a6:	e00f      	b.n	80051c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a8:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <UART_SetConfig+0x4c0>)
 80051aa:	61bb      	str	r3, [r7, #24]
        break;
 80051ac:	e00c      	b.n	80051c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ae:	f7ff f813 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 80051b2:	61b8      	str	r0, [r7, #24]
        break;
 80051b4:	e008      	b.n	80051c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ba:	61bb      	str	r3, [r7, #24]
        break;
 80051bc:	e004      	b.n	80051c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77bb      	strb	r3, [r7, #30]
        break;
 80051c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d074      	beq.n	80052b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	005a      	lsls	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	d916      	bls.n	8005218 <UART_SetConfig+0x400>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f0:	d212      	bcs.n	8005218 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f023 030f 	bic.w	r3, r3, #15
 80051fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	b29a      	uxth	r2, r3
 8005208:	89fb      	ldrh	r3, [r7, #14]
 800520a:	4313      	orrs	r3, r2
 800520c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	89fa      	ldrh	r2, [r7, #14]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	e04f      	b.n	80052b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	77bb      	strb	r3, [r7, #30]
 800521c:	e04c      	b.n	80052b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d828      	bhi.n	8005276 <UART_SetConfig+0x45e>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0x414>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	08005251 	.word	0x08005251
 8005230:	08005259 	.word	0x08005259
 8005234:	08005261 	.word	0x08005261
 8005238:	08005277 	.word	0x08005277
 800523c:	08005267 	.word	0x08005267
 8005240:	08005277 	.word	0x08005277
 8005244:	08005277 	.word	0x08005277
 8005248:	08005277 	.word	0x08005277
 800524c:	0800526f 	.word	0x0800526f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005250:	f7ff f8b0 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8005254:	61b8      	str	r0, [r7, #24]
        break;
 8005256:	e013      	b.n	8005280 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005258:	f7ff f8c0 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 800525c:	61b8      	str	r0, [r7, #24]
        break;
 800525e:	e00f      	b.n	8005280 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <UART_SetConfig+0x4c0>)
 8005262:	61bb      	str	r3, [r7, #24]
        break;
 8005264:	e00c      	b.n	8005280 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005266:	f7fe ffb7 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800526a:	61b8      	str	r0, [r7, #24]
        break;
 800526c:	e008      	b.n	8005280 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005272:	61bb      	str	r3, [r7, #24]
        break;
 8005274:	e004      	b.n	8005280 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	77bb      	strb	r3, [r7, #30]
        break;
 800527e:	bf00      	nop
    }

    if (pclk != 0U)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d018      	beq.n	80052b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	085a      	lsrs	r2, r3, #1
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	441a      	add	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b0f      	cmp	r3, #15
 800529e:	d909      	bls.n	80052b4 <UART_SetConfig+0x49c>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d205      	bcs.n	80052b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	e001      	b.n	80052b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40007c00 	.word	0x40007c00
 80052d4:	40023800 	.word	0x40023800
 80052d8:	00f42400 	.word	0x00f42400

080052dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053da:	d10a      	bne.n	80053f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005430:	f7fb feea 	bl	8001208 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d10e      	bne.n	8005462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f82d 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e023      	b.n	80054aa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b04      	cmp	r3, #4
 800546e:	d10e      	bne.n	800548e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f817 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e00d      	b.n	80054aa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b09c      	sub	sp, #112	; 0x70
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	e0a5      	b.n	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ca:	f000 80a1 	beq.w	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fb fe9b 	bl	8001208 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80054de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d13e      	bne.n	8005562 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054f8:	667b      	str	r3, [r7, #100]	; 0x64
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005504:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e6      	bne.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	663b      	str	r3, [r7, #96]	; 0x60
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005536:	64ba      	str	r2, [r7, #72]	; 0x48
 8005538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800553c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e5      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e067      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d04f      	beq.n	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557e:	d147      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005588:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800559e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
 80055aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e6      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	613b      	str	r3, [r7, #16]
   return(result);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055dc:	623a      	str	r2, [r7, #32]
 80055de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e010      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	429a      	cmp	r2, r3
 800562c:	f43f af4a 	beq.w	80054c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3770      	adds	r7, #112	; 0x70
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005642:	f001 fffd 	bl	8007640 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005646:	4b19      	ldr	r3, [pc, #100]	; (80056ac <MX_LWIP_Init+0x70>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800564c:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <MX_LWIP_Init+0x74>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <MX_LWIP_Init+0x78>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <MX_LWIP_Init+0x7c>)
 800565a:	9302      	str	r3, [sp, #8]
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <MX_LWIP_Init+0x80>)
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	2300      	movs	r3, #0
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <MX_LWIP_Init+0x78>)
 8005666:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <MX_LWIP_Init+0x74>)
 8005668:	4910      	ldr	r1, [pc, #64]	; (80056ac <MX_LWIP_Init+0x70>)
 800566a:	4815      	ldr	r0, [pc, #84]	; (80056c0 <MX_LWIP_Init+0x84>)
 800566c:	f002 fc8e 	bl	8007f8c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005670:	4813      	ldr	r0, [pc, #76]	; (80056c0 <MX_LWIP_Init+0x84>)
 8005672:	f002 fe45 	bl	8008300 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005676:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <MX_LWIP_Init+0x84>)
 8005678:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800567c:	089b      	lsrs	r3, r3, #2
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005688:	480d      	ldr	r0, [pc, #52]	; (80056c0 <MX_LWIP_Init+0x84>)
 800568a:	f002 fe49 	bl	8008320 <netif_set_up>
 800568e:	e002      	b.n	8005696 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005690:	480b      	ldr	r0, [pc, #44]	; (80056c0 <MX_LWIP_Init+0x84>)
 8005692:	f002 feb1 	bl	80083f8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005696:	490b      	ldr	r1, [pc, #44]	; (80056c4 <MX_LWIP_Init+0x88>)
 8005698:	4809      	ldr	r0, [pc, #36]	; (80056c0 <MX_LWIP_Init+0x84>)
 800569a:	f002 fedf 	bl	800845c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800569e:	4808      	ldr	r0, [pc, #32]	; (80056c0 <MX_LWIP_Init+0x84>)
 80056a0:	f00a fed4 	bl	801044c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	200007f8 	.word	0x200007f8
 80056b0:	200007fc 	.word	0x200007fc
 80056b4:	20000800 	.word	0x20000800
 80056b8:	08013f3d 	.word	0x08013f3d
 80056bc:	08005c91 	.word	0x08005c91
 80056c0:	200007c0 	.word	0x200007c0
 80056c4:	08005cfd 	.word	0x08005cfd

080056c8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80056cc:	4803      	ldr	r0, [pc, #12]	; (80056dc <MX_LWIP_Process+0x14>)
 80056ce:	f000 fabf 	bl	8005c50 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80056d2:	f009 fe3f 	bl	800f354 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200007c0 	.word	0x200007c0

080056e0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08e      	sub	sp, #56	; 0x38
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a4e      	ldr	r2, [pc, #312]	; (8005838 <HAL_ETH_MspInit+0x158>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f040 8096 	bne.w	8005830 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005704:	4b4d      	ldr	r3, [pc, #308]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	4a4c      	ldr	r2, [pc, #304]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800570a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800570e:	6313      	str	r3, [r2, #48]	; 0x30
 8005710:	4b4a      	ldr	r3, [pc, #296]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	4b47      	ldr	r3, [pc, #284]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	4a46      	ldr	r2, [pc, #280]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005726:	6313      	str	r3, [r2, #48]	; 0x30
 8005728:	4b44      	ldr	r3, [pc, #272]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4b41      	ldr	r3, [pc, #260]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	4a40      	ldr	r2, [pc, #256]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800573a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800573e:	6313      	str	r3, [r2, #48]	; 0x30
 8005740:	4b3e      	ldr	r3, [pc, #248]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800574c:	4b3b      	ldr	r3, [pc, #236]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	4a3a      	ldr	r2, [pc, #232]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005752:	f043 0304 	orr.w	r3, r3, #4
 8005756:	6313      	str	r3, [r2, #48]	; 0x30
 8005758:	4b38      	ldr	r3, [pc, #224]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005764:	4b35      	ldr	r3, [pc, #212]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	4a34      	ldr	r2, [pc, #208]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6313      	str	r3, [r2, #48]	; 0x30
 8005770:	4b32      	ldr	r3, [pc, #200]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800577c:	4b2f      	ldr	r3, [pc, #188]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	4a2e      	ldr	r2, [pc, #184]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005782:	f043 0302 	orr.w	r3, r3, #2
 8005786:	6313      	str	r3, [r2, #48]	; 0x30
 8005788:	4b2c      	ldr	r3, [pc, #176]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005794:	4b29      	ldr	r3, [pc, #164]	; (800583c <HAL_ETH_MspInit+0x15c>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	4a28      	ldr	r2, [pc, #160]	; (800583c <HAL_ETH_MspInit+0x15c>)
 800579a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800579e:	6313      	str	r3, [r2, #48]	; 0x30
 80057a0:	4b26      	ldr	r3, [pc, #152]	; (800583c <HAL_ETH_MspInit+0x15c>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80057ac:	2332      	movs	r3, #50	; 0x32
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b0:	2302      	movs	r3, #2
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b8:	2303      	movs	r3, #3
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057bc:	230b      	movs	r3, #11
 80057be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c4:	4619      	mov	r1, r3
 80057c6:	481e      	ldr	r0, [pc, #120]	; (8005840 <HAL_ETH_MspInit+0x160>)
 80057c8:	f7fd faa8 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80057cc:	2386      	movs	r3, #134	; 0x86
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d0:	2302      	movs	r3, #2
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d8:	2303      	movs	r3, #3
 80057da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057dc:	230b      	movs	r3, #11
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e4:	4619      	mov	r1, r3
 80057e6:	4817      	ldr	r0, [pc, #92]	; (8005844 <HAL_ETH_MspInit+0x164>)
 80057e8:	f7fd fa98 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80057ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f2:	2302      	movs	r3, #2
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057fa:	2303      	movs	r3, #3
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057fe:	230b      	movs	r3, #11
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005806:	4619      	mov	r1, r3
 8005808:	480f      	ldr	r0, [pc, #60]	; (8005848 <HAL_ETH_MspInit+0x168>)
 800580a:	f7fd fa87 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800580e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005814:	2302      	movs	r3, #2
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	2300      	movs	r3, #0
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800581c:	2303      	movs	r3, #3
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005820:	230b      	movs	r3, #11
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005828:	4619      	mov	r1, r3
 800582a:	4808      	ldr	r0, [pc, #32]	; (800584c <HAL_ETH_MspInit+0x16c>)
 800582c:	f7fd fa76 	bl	8002d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005830:	bf00      	nop
 8005832:	3738      	adds	r7, #56	; 0x38
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40028000 	.word	0x40028000
 800583c:	40023800 	.word	0x40023800
 8005840:	40020800 	.word	0x40020800
 8005844:	40020000 	.word	0x40020000
 8005848:	40020400 	.word	0x40020400
 800584c:	40021800 	.word	0x40021800

08005850 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800585c:	4b4d      	ldr	r3, [pc, #308]	; (8005994 <low_level_init+0x144>)
 800585e:	4a4e      	ldr	r2, [pc, #312]	; (8005998 <low_level_init+0x148>)
 8005860:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005862:	4b4c      	ldr	r3, [pc, #304]	; (8005994 <low_level_init+0x144>)
 8005864:	2201      	movs	r2, #1
 8005866:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005868:	4b4a      	ldr	r3, [pc, #296]	; (8005994 <low_level_init+0x144>)
 800586a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800586e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005870:	4b48      	ldr	r3, [pc, #288]	; (8005994 <low_level_init+0x144>)
 8005872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005876:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005878:	4b46      	ldr	r3, [pc, #280]	; (8005994 <low_level_init+0x144>)
 800587a:	2200      	movs	r2, #0
 800587c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800587e:	2300      	movs	r3, #0
 8005880:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005882:	2380      	movs	r3, #128	; 0x80
 8005884:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005886:	23e1      	movs	r3, #225	; 0xe1
 8005888:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800588a:	2300      	movs	r3, #0
 800588c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005892:	2300      	movs	r3, #0
 8005894:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005896:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <low_level_init+0x144>)
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800589e:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <low_level_init+0x144>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80058a4:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <low_level_init+0x144>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80058aa:	4b3a      	ldr	r3, [pc, #232]	; (8005994 <low_level_init+0x144>)
 80058ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80058b0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80058b2:	4838      	ldr	r0, [pc, #224]	; (8005994 <low_level_init+0x144>)
 80058b4:	f7fc f92e 	bl	8001b14 <HAL_ETH_Init>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d108      	bne.n	80058d4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80058d4:	2304      	movs	r3, #4
 80058d6:	4a31      	ldr	r2, [pc, #196]	; (800599c <low_level_init+0x14c>)
 80058d8:	4931      	ldr	r1, [pc, #196]	; (80059a0 <low_level_init+0x150>)
 80058da:	482e      	ldr	r0, [pc, #184]	; (8005994 <low_level_init+0x144>)
 80058dc:	f7fc fab4 	bl	8001e48 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80058e0:	2304      	movs	r3, #4
 80058e2:	4a30      	ldr	r2, [pc, #192]	; (80059a4 <low_level_init+0x154>)
 80058e4:	4930      	ldr	r1, [pc, #192]	; (80059a8 <low_level_init+0x158>)
 80058e6:	482b      	ldr	r0, [pc, #172]	; (8005994 <low_level_init+0x144>)
 80058e8:	f7fc fb17 	bl	8001f1a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2206      	movs	r2, #6
 80058f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <low_level_init+0x144>)
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	781a      	ldrb	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005900:	4b24      	ldr	r3, [pc, #144]	; (8005994 <low_level_init+0x144>)
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	785a      	ldrb	r2, [r3, #1]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800590c:	4b21      	ldr	r3, [pc, #132]	; (8005994 <low_level_init+0x144>)
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	789a      	ldrb	r2, [r3, #2]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <low_level_init+0x144>)
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	78da      	ldrb	r2, [r3, #3]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <low_level_init+0x144>)
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	791a      	ldrb	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005930:	4b18      	ldr	r3, [pc, #96]	; (8005994 <low_level_init+0x144>)
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	795a      	ldrb	r2, [r3, #5]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005942:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800594a:	f043 030a 	orr.w	r3, r3, #10
 800594e:	b2da      	uxtb	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005956:	480f      	ldr	r0, [pc, #60]	; (8005994 <low_level_init+0x144>)
 8005958:	f7fc fd88 	bl	800246c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800595c:	f107 0310 	add.w	r3, r7, #16
 8005960:	461a      	mov	r2, r3
 8005962:	211d      	movs	r1, #29
 8005964:	480b      	ldr	r0, [pc, #44]	; (8005994 <low_level_init+0x144>)
 8005966:	f7fc fcb3 	bl	80022d0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f043 030b 	orr.w	r3, r3, #11
 8005970:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	461a      	mov	r2, r3
 8005976:	211d      	movs	r1, #29
 8005978:	4806      	ldr	r0, [pc, #24]	; (8005994 <low_level_init+0x144>)
 800597a:	f7fc fd11 	bl	80023a0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800597e:	f107 0310 	add.w	r3, r7, #16
 8005982:	461a      	mov	r2, r3
 8005984:	211d      	movs	r1, #29
 8005986:	4803      	ldr	r0, [pc, #12]	; (8005994 <low_level_init+0x144>)
 8005988:	f7fc fca2 	bl	80022d0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800598c:	bf00      	nop
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	200020d4 	.word	0x200020d4
 8005998:	40028000 	.word	0x40028000
 800599c:	2000211c 	.word	0x2000211c
 80059a0:	20000804 	.word	0x20000804
 80059a4:	20000884 	.word	0x20000884
 80059a8:	20002054 	.word	0x20002054

080059ac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80059b6:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <low_level_output+0x138>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80059ce:	4b45      	ldr	r3, [pc, #276]	; (8005ae4 <low_level_output+0x138>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	623b      	str	r3, [r7, #32]
 80059dc:	e05a      	b.n	8005a94 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	da03      	bge.n	80059ee <low_level_output+0x42>
      {
        errval = ERR_USE;
 80059e6:	23f8      	movs	r3, #248	; 0xf8
 80059e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80059ec:	e05c      	b.n	8005aa8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	895b      	ldrh	r3, [r3, #10]
 80059f2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80059f8:	e02f      	b.n	8005a5a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	18d0      	adds	r0, r2, r3
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	18d1      	adds	r1, r2, r3
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	f00e fb9b 	bl	801414c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	da03      	bge.n	8005a2c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005a24:	23f8      	movs	r3, #248	; 0xf8
 8005a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005a2a:	e03d      	b.n	8005aa8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005a3c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005a48:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005a54:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d8c8      	bhi.n	80059fa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	18d0      	adds	r0, r2, r3
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4413      	add	r3, r2
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f00e fb67 	bl	801414c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1a1      	bne.n	80059de <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	4811      	ldr	r0, [pc, #68]	; (8005ae4 <low_level_output+0x138>)
 8005a9e:	f7fc faa9 	bl	8001ff4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005aa8:	4b0e      	ldr	r3, [pc, #56]	; (8005ae4 <low_level_output+0x138>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f241 0314 	movw	r3, #4116	; 0x1014
 8005ab0:	4413      	add	r3, r2
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00d      	beq.n	8005ad8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <low_level_output+0x138>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f241 0314 	movw	r3, #4116	; 0x1014
 8005ac4:	4413      	add	r3, r2
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <low_level_output+0x138>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f241 0304 	movw	r3, #4100	; 0x1004
 8005ad2:	4413      	add	r3, r2
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005ad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3728      	adds	r7, #40	; 0x28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200020d4 	.word	0x200020d4

08005ae8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08c      	sub	sp, #48	; 0x30
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005b0c:	484f      	ldr	r0, [pc, #316]	; (8005c4c <low_level_input+0x164>)
 8005b0e:	f7fc fb5b 	bl	80021c8 <HAL_ETH_GetReceivedFrame>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <low_level_input+0x34>

    return NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e092      	b.n	8005c42 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005b1c:	4b4b      	ldr	r3, [pc, #300]	; (8005c4c <low_level_input+0x164>)
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005b22:	4b4a      	ldr	r3, [pc, #296]	; (8005c4c <low_level_input+0x164>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005b2e:	89fb      	ldrh	r3, [r7, #14]
 8005b30:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005b34:	4619      	mov	r1, r3
 8005b36:	2000      	movs	r0, #0
 8005b38:	f002 fd2c 	bl	8008594 <pbuf_alloc>
 8005b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d04b      	beq.n	8005bdc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005b44:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <low_level_input+0x164>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b52:	e040      	b.n	8005bd6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	895b      	ldrh	r3, [r3, #10]
 8005b58:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005b5e:	e021      	b.n	8005ba4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	18d0      	adds	r0, r2, r3
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	18d1      	adds	r1, r2, r3
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	461a      	mov	r2, r3
 8005b78:	f00e fae8 	bl	801414c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005b92:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b9e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d8d6      	bhi.n	8005b60 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	18d0      	adds	r0, r2, r3
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f00e fac2 	bl	801414c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1bb      	bne.n	8005b54 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	; (8005c4c <low_level_input+0x164>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	e00b      	b.n	8005c00 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <low_level_input+0x164>)
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d3ee      	bcc.n	8005be8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <low_level_input+0x164>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005c10:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <low_level_input+0x164>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c18:	4413      	add	r3, r2
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <low_level_input+0x164>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c2c:	4413      	add	r3, r2
 8005c2e:	2280      	movs	r2, #128	; 0x80
 8005c30:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <low_level_input+0x164>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	f241 0308 	movw	r3, #4104	; 0x1008
 8005c3a:	4413      	add	r3, r2
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3730      	adds	r7, #48	; 0x30
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200020d4 	.word	0x200020d4

08005c50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ff45 	bl	8005ae8 <low_level_input>
 8005c5e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	4798      	blx	r3
 8005c70:	4603      	mov	r3, r0
 8005c72:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005c74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f002 ff6d 	bl	8008b5c <pbuf_free>
    p = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e000      	b.n	8005c8a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005c88:	bf00      	nop
  }
}
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <ethernetif_init+0x1c>
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <ethernetif_init+0x48>)
 8005ca0:	f240 2212 	movw	r2, #530	; 0x212
 8005ca4:	490d      	ldr	r1, [pc, #52]	; (8005cdc <ethernetif_init+0x4c>)
 8005ca6:	480e      	ldr	r0, [pc, #56]	; (8005ce0 <ethernetif_init+0x50>)
 8005ca8:	f00e fa80 	bl	80141ac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2273      	movs	r2, #115	; 0x73
 8005cb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2274      	movs	r2, #116	; 0x74
 8005cb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <ethernetif_init+0x54>)
 8005cc0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <ethernetif_init+0x58>)
 8005cc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff fdc1 	bl	8005850 <low_level_init>

  return ERR_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	08015730 	.word	0x08015730
 8005cdc:	0801574c 	.word	0x0801574c
 8005ce0:	0801575c 	.word	0x0801575c
 8005ce4:	080122a1 	.word	0x080122a1
 8005ce8:	080059ad 	.word	0x080059ad

08005cec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005cf0:	f7fb fa8a 	bl	8001208 <HAL_GetTick>
 8005cf4:	4603      	mov	r3, r0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d12:	089b      	lsrs	r3, r3, #2
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d05d      	beq.n	8005dda <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005d1e:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d03f      	beq.n	8005da6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	4830      	ldr	r0, [pc, #192]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d2e:	f7fc fb37 	bl	80023a0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005d32:	f7fb fa69 	bl	8001208 <HAL_GetTick>
 8005d36:	4603      	mov	r3, r0
 8005d38:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005d3a:	f107 0308 	add.w	r3, r7, #8
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2101      	movs	r1, #1
 8005d42:	482b      	ldr	r0, [pc, #172]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d44:	f7fc fac4 	bl	80022d0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005d48:	f7fb fa5e 	bl	8001208 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d56:	d828      	bhi.n	8005daa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0eb      	beq.n	8005d3a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	461a      	mov	r2, r3
 8005d68:	2110      	movs	r1, #16
 8005d6a:	4821      	ldr	r0, [pc, #132]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d6c:	f7fc fab0 	bl	80022d0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	e002      	b.n	8005d8a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005d94:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
 8005d9a:	e016      	b.n	8005dca <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005d9c:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	e011      	b.n	8005dca <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <ethernetif_update_config+0xb0>
          goto error;
 8005daa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	480a      	ldr	r0, [pc, #40]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005dc6:	f7fc faeb 	bl	80023a0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005dca:	2100      	movs	r1, #0
 8005dcc:	4808      	ldr	r0, [pc, #32]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005dce:	f7fc fbab 	bl	8002528 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005dd2:	4807      	ldr	r0, [pc, #28]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005dd4:	f7fc fb4a 	bl	800246c <HAL_ETH_Start>
 8005dd8:	e002      	b.n	8005de0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005dda:	4805      	ldr	r0, [pc, #20]	; (8005df0 <ethernetif_update_config+0xf4>)
 8005ddc:	f7fc fb75 	bl	80024ca <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fa fcf3 	bl	80007cc <ethernetif_notify_conn_changed>
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	200020d4 	.word	0x200020d4

08005df4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <fs_open+0x16>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <fs_open+0x1c>
    return ERR_ARG;
 8005e0a:	f06f 030f 	mvn.w	r3, #15
 8005e0e:	e028      	b.n	8005e62 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005e10:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <fs_open+0x78>)
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e020      	b.n	8005e58 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6838      	ldr	r0, [r7, #0]
 8005e1e:	f7fa fa0f 	bl	8000240 <strcmp>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d114      	bne.n	8005e52 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	7c1a      	ldrb	r2, [r3, #16]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e007      	b.n	8005e62 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1db      	bne.n	8005e16 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8005e5e:	f06f 0305 	mvn.w	r3, #5
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	08041924 	.word	0x08041924

08005e70 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	1ad3      	subs	r3, r2, r3
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8005ea8:	20e0      	movs	r0, #224	; 0xe0
 8005eaa:	f001 fe83 	bl	8007bb4 <mem_malloc>
 8005eae:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8005eb6:	22e0      	movs	r2, #224	; 0xe0
 8005eb8:	2100      	movs	r1, #0
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f00e f96e 	bl	801419c <memset>
  }
  return ret;
 8005ec0:	687b      	ldr	r3, [r7, #4]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 fd05 	bl	80078e8 <mem_free>
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8005eee:	22b0      	movs	r2, #176	; 0xb0
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f00e f952 	bl	801419c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005f06:	20b0      	movs	r0, #176	; 0xb0
 8005f08:	f001 fe54 	bl	8007bb4 <mem_malloc>
 8005f0c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <http_state_alloc+0x1a>
    http_state_init(ret);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff ffe6 	bl	8005ee6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005f1a:	687b      	ldr	r3, [r7, #4]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff99 	bl	8005e70 <fs_close>
    hs->handle = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ffba 	bl	8005eca <http_ssi_state_free>
    hs->ssi = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f002 fdf7 	bl	8008b5c <pbuf_free>
    hs->req = NULL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <http_state_free+0x1a>
    http_state_eof(hs);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ffca 	bl	8005f24 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 fca9 	bl	80078e8 <mem_free>
  }
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <http_write+0x22>
 8005fb4:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <http_write+0xc8>)
 8005fb6:	f240 2219 	movw	r2, #537	; 0x219
 8005fba:	492c      	ldr	r1, [pc, #176]	; (800606c <http_write+0xcc>)
 8005fbc:	482c      	ldr	r0, [pc, #176]	; (8006070 <http_write+0xd0>)
 8005fbe:	f00e f8f5 	bl	80141ac <iprintf>
  len = *length;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8005fc8:	8afb      	ldrh	r3, [r7, #22]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <http_write+0x32>
    return ERR_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e045      	b.n	800605e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005fd8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8005fda:	8aba      	ldrh	r2, [r7, #20]
 8005fdc:	8afb      	ldrh	r3, [r7, #22]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d201      	bcs.n	8005fe6 <http_write+0x46>
    len = max_len;
 8005fe2:	8abb      	ldrh	r3, [r7, #20]
 8005fe4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8005fee:	8afa      	ldrh	r2, [r7, #22]
 8005ff0:	8abb      	ldrh	r3, [r7, #20]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d901      	bls.n	8005ffa <http_write+0x5a>
    len = max_len;
 8005ff6:	8abb      	ldrh	r3, [r7, #20]
 8005ff8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	8afa      	ldrh	r2, [r7, #22]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f007 fb3f 	bl	800d684 <tcp_write>
 8006006:	4603      	mov	r3, r0
 8006008:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800600a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006012:	d10f      	bne.n	8006034 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8006024:	2b08      	cmp	r3, #8
 8006026:	d902      	bls.n	800602e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8006028:	2301      	movs	r3, #1
 800602a:	82fb      	strh	r3, [r7, #22]
 800602c:	e002      	b.n	8006034 <http_write+0x94>
      } else {
        len /= 2;
 800602e:	8afb      	ldrh	r3, [r7, #22]
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8006034:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800603c:	d102      	bne.n	8006044 <http_write+0xa4>
 800603e:	8afb      	ldrh	r3, [r7, #22]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d8da      	bhi.n	8005ffa <http_write+0x5a>

  if (err == ERR_OK) {
 8006044:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8afa      	ldrh	r2, [r7, #22]
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e002      	b.n	800605a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800605a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	08015800 	.word	0x08015800
 800606c:	08015838 	.word	0x08015838
 8006070:	08015848 	.word	0x08015848

08006074 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8006082:	2100      	movs	r1, #0
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f004 fbbf 	bl	800a808 <tcp_arg>
  altcp_recv(pcb, NULL);
 800608a:	2100      	movs	r1, #0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f004 fbcd 	bl	800a82c <tcp_recv>
  altcp_err(pcb, NULL);
 8006092:	2100      	movs	r1, #0
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f004 fc0d 	bl	800a8b4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800609a:	2200      	movs	r2, #0
 800609c:	2100      	movs	r1, #0
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f004 fc42 	bl	800a928 <tcp_poll>
  altcp_sent(pcb, NULL);
 80060a4:	2100      	movs	r1, #0
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f004 fbe2 	bl	800a870 <tcp_sent>
  if (hs != NULL) {
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80060b2:	68b8      	ldr	r0, [r7, #8]
 80060b4:	f7ff ff62 	bl	8005f7c <http_state_free>
  }

  if (abort_conn) {
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f003 fae4 	bl	800968c <tcp_abort>
    return ERR_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e00f      	b.n	80060e8 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f003 f9f5 	bl	80094b8 <tcp_close>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80060d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80060da:	2204      	movs	r2, #4
 80060dc:	4904      	ldr	r1, [pc, #16]	; (80060f0 <http_close_or_abort_conn+0x7c>)
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f004 fc22 	bl	800a928 <tcp_poll>
  }
  return err;
 80060e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	0800715f 	.word	0x0800715f

080060f4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80060fe:	2200      	movs	r2, #0
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff ffb6 	bl	8006074 <http_close_or_abort_conn>
 8006108:	4603      	mov	r3, r0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff ffe8 	bl	80060f4 <http_close_conn>
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <extract_uri_parameters+0x18>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <extract_uri_parameters+0x1c>
    return (0);
 8006144:	2300      	movs	r3, #0
 8006146:	e04b      	b.n	80061e0 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800614c:	2300      	movs	r3, #0
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	e03f      	b.n	80061d2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	320c      	adds	r2, #12
 8006158:	6979      	ldr	r1, [r7, #20]
 800615a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8006162:	2126      	movs	r1, #38	; 0x26
 8006164:	6978      	ldr	r0, [r7, #20]
 8006166:	f00e f90f 	bl	8014388 <strchr>
 800616a:	6178      	str	r0, [r7, #20]
    if (pair) {
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d006      	beq.n	8006180 <extract_uri_parameters+0x54>
      *pair = '\0';
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
      pair++;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	3301      	adds	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e00c      	b.n	800619a <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8006180:	2120      	movs	r1, #32
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f00e f900 	bl	8014388 <strchr>
 8006188:	6178      	str	r0, [r7, #20]
      if (pair) {
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800619a:	213d      	movs	r1, #61	; 0x3d
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f00e f8f3 	bl	8014388 <strchr>
 80061a2:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <extract_uri_parameters+0x94>
      *equals = '\0';
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	1c59      	adds	r1, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	321c      	adds	r2, #28
 80061ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061be:	e005      	b.n	80061cc <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	321c      	adds	r2, #28
 80061c6:	2100      	movs	r1, #0
 80061c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	3301      	adds	r3, #1
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b0f      	cmp	r3, #15
 80061d6:	dc02      	bgt.n	80061de <extract_uri_parameters+0xb2>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1b9      	bne.n	8006152 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80061de:	693b      	ldr	r3, [r7, #16]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <get_tag_insert+0x1c>
 80061f6:	4b51      	ldr	r3, [pc, #324]	; (800633c <get_tag_insert+0x154>)
 80061f8:	f44f 7241 	mov.w	r2, #772	; 0x304
 80061fc:	4950      	ldr	r1, [pc, #320]	; (8006340 <get_tag_insert+0x158>)
 80061fe:	4851      	ldr	r0, [pc, #324]	; (8006344 <get_tag_insert+0x15c>)
 8006200:	f00d ffd4 	bl	80141ac <iprintf>
  ssi = hs->ssi;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <get_tag_insert+0x36>
 8006210:	4b4a      	ldr	r3, [pc, #296]	; (800633c <get_tag_insert+0x154>)
 8006212:	f240 3206 	movw	r2, #774	; 0x306
 8006216:	494c      	ldr	r1, [pc, #304]	; (8006348 <get_tag_insert+0x160>)
 8006218:	484a      	ldr	r0, [pc, #296]	; (8006344 <get_tag_insert+0x15c>)
 800621a:	f00d ffc7 	bl	80141ac <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800621e:	4b4b      	ldr	r3, [pc, #300]	; (800634c <get_tag_insert+0x164>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d02e      	beq.n	8006284 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8006226:	4b4a      	ldr	r3, [pc, #296]	; (8006350 <get_tag_insert+0x168>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d02a      	beq.n	8006284 <get_tag_insert+0x9c>
 800622e:	4b49      	ldr	r3, [pc, #292]	; (8006354 <get_tag_insert+0x16c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d026      	beq.n	8006284 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e01e      	b.n	800627a <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f103 0012 	add.w	r0, r3, #18
 8006242:	4b43      	ldr	r3, [pc, #268]	; (8006350 <get_tag_insert+0x168>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4619      	mov	r1, r3
 8006250:	f7f9 fff6 	bl	8000240 <strcmp>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10c      	bne.n	8006274 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800625a:	4b3c      	ldr	r3, [pc, #240]	; (800634c <get_tag_insert+0x164>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	f102 011b 	add.w	r1, r2, #27
 8006264:	22c0      	movs	r2, #192	; 0xc0
 8006266:	6978      	ldr	r0, [r7, #20]
 8006268:	4798      	blx	r3
 800626a:	4603      	mov	r3, r0
 800626c:	461a      	mov	r2, r3
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8006272:	e060      	b.n	8006336 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3301      	adds	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	4b36      	ldr	r3, [pc, #216]	; (8006354 <get_tag_insert+0x16c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	429a      	cmp	r2, r3
 8006282:	dbdb      	blt.n	800623c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	3312      	adds	r3, #18
 8006288:	4618      	mov	r0, r3
 800628a:	f7f9 ffe3 	bl	8000254 <strlen>
 800628e:	4603      	mov	r3, r0
 8006290:	2ba6      	cmp	r3, #166	; 0xa6
 8006292:	d818      	bhi.n	80062c6 <get_tag_insert+0xde>
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3312      	adds	r3, #18
 8006298:	4618      	mov	r0, r3
 800629a:	f7f9 ffdb 	bl	8000254 <strlen>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b09      	cmp	r3, #9
 80062a2:	d810      	bhi.n	80062c6 <get_tag_insert+0xde>
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	3312      	adds	r3, #18
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7f9 ffd3 	bl	8000254 <strlen>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2ba6      	cmp	r3, #166	; 0xa6
 80062b2:	d806      	bhi.n	80062c2 <get_tag_insert+0xda>
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	3312      	adds	r3, #18
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7f9 ffcb 	bl	8000254 <strlen>
 80062be:	4603      	mov	r3, r0
 80062c0:	e002      	b.n	80062c8 <get_tag_insert+0xe0>
 80062c2:	23a7      	movs	r3, #167	; 0xa7
 80062c4:	e000      	b.n	80062c8 <get_tag_insert+0xe0>
 80062c6:	2309      	movs	r3, #9
 80062c8:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	331b      	adds	r3, #27
 80062ce:	2212      	movs	r2, #18
 80062d0:	4921      	ldr	r1, [pc, #132]	; (8006358 <get_tag_insert+0x170>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f00d ff3a 	bl	801414c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3312      	adds	r3, #18
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4619      	mov	r1, r3
 80062e6:	f00d ff31 	bl	801414c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3312      	adds	r3, #18
 80062ee:	3318      	adds	r3, #24
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	3303      	adds	r3, #3
 80062f6:	2207      	movs	r2, #7
 80062f8:	4918      	ldr	r1, [pc, #96]	; (800635c <get_tag_insert+0x174>)
 80062fa:	4618      	mov	r0, r3
 80062fc:	f00d ff26 	bl	801414c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3319      	adds	r3, #25
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	2200      	movs	r2, #0
 800630a:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	331b      	adds	r3, #27
 8006310:	4618      	mov	r0, r3
 8006312:	f7f9 ff9f 	bl	8000254 <strlen>
 8006316:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631e:	d306      	bcc.n	800632e <get_tag_insert+0x146>
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <get_tag_insert+0x154>)
 8006322:	f240 323f 	movw	r2, #831	; 0x33f
 8006326:	490e      	ldr	r1, [pc, #56]	; (8006360 <get_tag_insert+0x178>)
 8006328:	4806      	ldr	r0, [pc, #24]	; (8006344 <get_tag_insert+0x15c>)
 800632a:	f00d ff3f 	bl	80141ac <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	b29a      	uxth	r2, r3
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	81da      	strh	r2, [r3, #14]
}
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	08015800 	.word	0x08015800
 8006340:	08015870 	.word	0x08015870
 8006344:	08015848 	.word	0x08015848
 8006348:	0801587c 	.word	0x0801587c
 800634c:	200004e8 	.word	0x200004e8
 8006350:	200004f0 	.word	0x200004f0
 8006354:	200004ec 	.word	0x200004ec
 8006358:	08015888 	.word	0x08015888
 800635c:	0801589c 	.word	0x0801589c
 8006360:	080158a4 	.word	0x080158a4

08006364 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d105      	bne.n	8006382 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff feca 	bl	8006112 <http_eof>
    return 0;
 800637e:	2300      	movs	r3, #0
 8006380:	e016      	b.n	80063b0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fd7c 	bl	8005e84 <fs_bytes_left>
 800638c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	dc05      	bgt.n	80063a0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff febb 	bl	8006112 <http_eof>
    return 0;
 800639c:	2300      	movs	r3, #0
 800639e:	e007      	b.n	80063b0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <http_check_eof+0x54>)
 80063a2:	f240 429d 	movw	r2, #1181	; 0x49d
 80063a6:	4905      	ldr	r1, [pc, #20]	; (80063bc <http_check_eof+0x58>)
 80063a8:	4805      	ldr	r0, [pc, #20]	; (80063c0 <http_check_eof+0x5c>)
 80063aa:	f00d feff 	bl	80141ac <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80063ae:	2301      	movs	r3, #1
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	08015800 	.word	0x08015800
 80063bc:	080158b4 	.word	0x080158b4
 80063c0:	08015848 	.word	0x08015848

080063c4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063da:	4293      	cmp	r3, r2
 80063dc:	d803      	bhi.n	80063e6 <http_send_data_nonssi+0x22>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	e001      	b.n	80063ea <http_send_data_nonssi+0x26>
 80063e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063ea:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6999      	ldr	r1, [r3, #24]
 80063f0:	f107 020c 	add.w	r2, r7, #12
 80063f4:	2300      	movs	r3, #0
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fdd2 	bl	8005fa0 <http_write>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8006400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10d      	bne.n	8006424 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	89ba      	ldrh	r2, [r7, #12]
 8006412:	441a      	add	r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	89ba      	ldrh	r2, [r7, #12]
 800641e:	1a9a      	subs	r2, r3, r2
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <http_send_data_ssi+0x2c>
 800644e:	4b9d      	ldr	r3, [pc, #628]	; (80066c4 <http_send_data_ssi+0x294>)
 8006450:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006454:	499c      	ldr	r1, [pc, #624]	; (80066c8 <http_send_data_ssi+0x298>)
 8006456:	489d      	ldr	r0, [pc, #628]	; (80066cc <http_send_data_ssi+0x29c>)
 8006458:	f00d fea8 	bl	80141ac <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006462:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	f240 826a 	bls.w	8006946 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006480:	4293      	cmp	r3, r2
 8006482:	dc06      	bgt.n	8006492 <http_send_data_ssi+0x62>
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	b29b      	uxth	r3, r3
 8006490:	e001      	b.n	8006496 <http_send_data_ssi+0x66>
 8006492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006496:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6999      	ldr	r1, [r3, #24]
 800649c:	f107 020e 	add.w	r2, r7, #14
 80064a0:	2300      	movs	r3, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fd7c 	bl	8005fa0 <http_write>
 80064a8:	4603      	mov	r3, r0
 80064aa:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80064ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	89fa      	ldrh	r2, [r7, #14]
 80064be:	441a      	add	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	89fa      	ldrh	r2, [r7, #14]
 80064ca:	1a9a      	subs	r2, r3, r2
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f040 8235 	bne.w	8006946 <http_send_data_ssi+0x516>
      return data_to_send;
 80064dc:	7dbb      	ldrb	r3, [r7, #22]
 80064de:	e27b      	b.n	80069d8 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80064e0:	89fb      	ldrh	r3, [r7, #14]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <http_send_data_ssi+0xba>
      return data_to_send;
 80064e6:	7dbb      	ldrb	r3, [r7, #22]
 80064e8:	e276      	b.n	80069d8 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	f200 8227 	bhi.w	8006944 <http_send_data_ssi+0x514>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <http_send_data_ssi+0xcc>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006511 	.word	0x08006511
 8006500:	08006563 	.word	0x08006563
 8006504:	080065d5 	.word	0x080065d5
 8006508:	08006723 	.word	0x08006723
 800650c:	0800686b 	.word	0x0800686b
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8006510:	2300      	movs	r3, #0
 8006512:	757b      	strb	r3, [r7, #21]
 8006514:	e017      	b.n	8006546 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	781a      	ldrb	r2, [r3, #0]
 800651c:	7d7b      	ldrb	r3, [r7, #21]
 800651e:	496c      	ldr	r1, [pc, #432]	; (80066d0 <http_send_data_ssi+0x2a0>)
 8006520:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d10a      	bne.n	8006540 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	7d7a      	ldrb	r2, [r7, #21]
 800652e:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2201      	movs	r2, #1
 800653c:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800653e:	e005      	b.n	800654c <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8006540:	7d7b      	ldrb	r3, [r7, #21]
 8006542:	3301      	adds	r3, #1
 8006544:	757b      	strb	r3, [r7, #21]
 8006546:	7d7b      	ldrb	r3, [r7, #21]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d9e4      	bls.n	8006516 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	1e5a      	subs	r2, r3, #1
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	601a      	str	r2, [r3, #0]
        break;
 8006560:	e1f1      	b.n	8006946 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	7c1b      	ldrb	r3, [r3, #16]
 8006566:	461a      	mov	r2, r3
 8006568:	4b59      	ldr	r3, [pc, #356]	; (80066d0 <http_send_data_ssi+0x2a0>)
 800656a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	8992      	ldrh	r2, [r2, #12]
 8006572:	4413      	add	r3, r2
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d107      	bne.n	800658a <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2200      	movs	r2, #0
 800657e:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8006588:	e1dd      	b.n	8006946 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781a      	ldrb	r2, [r3, #0]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	4619      	mov	r1, r3
 8006596:	4b4e      	ldr	r3, [pc, #312]	; (80066d0 <http_send_data_ssi+0x2a0>)
 8006598:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800659c:	6939      	ldr	r1, [r7, #16]
 800659e:	8989      	ldrh	r1, [r1, #12]
 80065a0:	440b      	add	r3, r1
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d106      	bne.n	80065b6 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	899b      	ldrh	r3, [r3, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	819a      	strh	r2, [r3, #12]
 80065b4:	e003      	b.n	80065be <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	1e5a      	subs	r2, r3, #1
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	601a      	str	r2, [r3, #0]
        }
        break;
 80065d2:	e1b8      	b.n	8006946 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	899b      	ldrh	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d11e      	bne.n	800661a <http_send_data_ssi+0x1ea>
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d00e      	beq.n	8006604 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d009      	beq.n	8006604 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b0a      	cmp	r3, #10
 80065f8:	d004      	beq.n	8006604 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006600:	2b0d      	cmp	r3, #13
 8006602:	d10a      	bne.n	800661a <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	1e5a      	subs	r2, r3, #1
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	601a      	str	r2, [r3, #0]
          break;
 8006618:	e195      	b.n	8006946 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	7c1b      	ldrb	r3, [r3, #16]
 8006624:	492a      	ldr	r1, [pc, #168]	; (80066d0 <http_send_data_ssi+0x2a0>)
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	440b      	add	r3, r1
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d013      	beq.n	800665a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8006638:	2b20      	cmp	r3, #32
 800663a:	d00e      	beq.n	800665a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b09      	cmp	r3, #9
 8006644:	d009      	beq.n	800665a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800664c:	2b0a      	cmp	r3, #10
 800664e:	d004      	beq.n	800665a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b0d      	cmp	r3, #13
 8006658:	d142      	bne.n	80066e0 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	899b      	ldrh	r3, [r3, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800666a:	e04f      	b.n	800670c <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2203      	movs	r2, #3
 8006670:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	899b      	ldrh	r3, [r3, #12]
 8006678:	2bff      	cmp	r3, #255	; 0xff
 800667a:	d906      	bls.n	800668a <http_send_data_ssi+0x25a>
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <http_send_data_ssi+0x294>)
 800667e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006682:	4914      	ldr	r1, [pc, #80]	; (80066d4 <http_send_data_ssi+0x2a4>)
 8006684:	4811      	ldr	r0, [pc, #68]	; (80066cc <http_send_data_ssi+0x29c>)
 8006686:	f00d fd91 	bl	80141ac <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	899b      	ldrh	r3, [r3, #12]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	899b      	ldrh	r3, [r3, #12]
 8006698:	461a      	mov	r2, r3
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	4413      	add	r3, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	781a      	ldrb	r2, [r3, #0]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	7c1b      	ldrb	r3, [r3, #16]
 80066ac:	4908      	ldr	r1, [pc, #32]	; (80066d0 <http_send_data_ssi+0x2a0>)
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	440b      	add	r3, r1
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d10e      	bne.n	80066d8 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2201      	movs	r2, #1
 80066be:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80066c0:	e024      	b.n	800670c <http_send_data_ssi+0x2dc>
 80066c2:	bf00      	nop
 80066c4:	08015800 	.word	0x08015800
 80066c8:	0801587c 	.word	0x0801587c
 80066cc:	08015848 	.word	0x08015848
 80066d0:	08041974 	.word	0x08041974
 80066d4:	080158ec 	.word	0x080158ec
            } else {
              ssi->tag_index = 0;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2200      	movs	r2, #0
 80066dc:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80066de:	e015      	b.n	800670c <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	899b      	ldrh	r3, [r3, #12]
 80066e4:	2b07      	cmp	r3, #7
 80066e6:	d80d      	bhi.n	8006704 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	899b      	ldrh	r3, [r3, #12]
 80066f0:	1c59      	adds	r1, r3, #1
 80066f2:	b288      	uxth	r0, r1
 80066f4:	6939      	ldr	r1, [r7, #16]
 80066f6:	8188      	strh	r0, [r1, #12]
 80066f8:	4619      	mov	r1, r3
 80066fa:	7812      	ldrb	r2, [r2, #0]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	440b      	add	r3, r1
 8006700:	749a      	strb	r2, [r3, #18]
 8006702:	e003      	b.n	800670c <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	1e5a      	subs	r2, r3, #1
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	601a      	str	r2, [r3, #0]

        break;
 8006720:	e111      	b.n	8006946 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	899b      	ldrh	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d11e      	bne.n	8006768 <http_send_data_ssi+0x338>
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b20      	cmp	r3, #32
 8006732:	d00e      	beq.n	8006752 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800673a:	2b09      	cmp	r3, #9
 800673c:	d009      	beq.n	8006752 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b0a      	cmp	r3, #10
 8006746:	d004      	beq.n	8006752 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800674e:	2b0d      	cmp	r3, #13
 8006750:	d10a      	bne.n	8006768 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	1e5a      	subs	r2, r3, #1
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	601a      	str	r2, [r3, #0]
          break;
 8006766:	e0ee      	b.n	8006946 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	7c1b      	ldrb	r3, [r3, #16]
 8006772:	499b      	ldr	r1, [pc, #620]	; (80069e0 <http_send_data_ssi+0x5b0>)
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	440b      	add	r3, r1
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	6939      	ldr	r1, [r7, #16]
 800677c:	8989      	ldrh	r1, [r1, #12]
 800677e:	440b      	add	r3, r1
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d162      	bne.n	800684c <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	899b      	ldrh	r3, [r3, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	7c1b      	ldrb	r3, [r3, #16]
 80067aa:	4a8d      	ldr	r2, [pc, #564]	; (80069e0 <http_send_data_ssi+0x5b0>)
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	4413      	add	r3, r2
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	8992      	ldrh	r2, [r2, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 80c3 	bne.w	8006946 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80067c0:	6838      	ldr	r0, [r7, #0]
 80067c2:	f7ff fd11 	bl	80061e8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2200      	movs	r2, #0
 80067ca:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2204      	movs	r2, #4
 80067d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	f240 80ae 	bls.w	8006946 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80067f8:	4293      	cmp	r3, r2
 80067fa:	dc06      	bgt.n	800680a <http_send_data_ssi+0x3da>
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	e001      	b.n	800680e <http_send_data_ssi+0x3de>
 800680a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800680e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6999      	ldr	r1, [r3, #24]
 8006814:	f107 020e 	add.w	r2, r7, #14
 8006818:	2300      	movs	r3, #0
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fbc0 	bl	8005fa0 <http_write>
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8006824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 808c 	bne.w	8006946 <http_send_data_ssi+0x516>
                data_to_send = 1;
 800682e:	2301      	movs	r3, #1
 8006830:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	89fa      	ldrh	r2, [r7, #14]
 8006838:	441a      	add	r2, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	89fa      	ldrh	r2, [r7, #14]
 8006844:	1a9a      	subs	r2, r3, r2
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	625a      	str	r2, [r3, #36]	; 0x24
 800684a:	e07c      	b.n	8006946 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8006868:	e06d      	b.n	8006946 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	429a      	cmp	r2, r3
 8006874:	d935      	bls.n	80068e2 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006884:	4293      	cmp	r3, r2
 8006886:	dc06      	bgt.n	8006896 <http_send_data_ssi+0x466>
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	b29b      	uxth	r3, r3
 8006894:	e001      	b.n	800689a <http_send_data_ssi+0x46a>
 8006896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800689a:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800689c:	89fb      	ldrh	r3, [r7, #14]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6999      	ldr	r1, [r3, #24]
 80068a6:	f107 020e 	add.w	r2, r7, #14
 80068aa:	2300      	movs	r3, #0
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fb77 	bl	8005fa0 <http_write>
 80068b2:	4603      	mov	r3, r0
 80068b4:	75fb      	strb	r3, [r7, #23]
 80068b6:	e001      	b.n	80068bc <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80068bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d140      	bne.n	8006946 <http_send_data_ssi+0x516>
            data_to_send = 1;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	89fa      	ldrh	r2, [r7, #14]
 80068ce:	441a      	add	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	89fa      	ldrh	r2, [r7, #14]
 80068da:	1a9a      	subs	r2, r3, r2
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	625a      	str	r2, [r3, #36]	; 0x24
 80068e0:	e031      	b.n	8006946 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	899a      	ldrh	r2, [r3, #12]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	89db      	ldrh	r3, [r3, #14]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d222      	bcs.n	8006934 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	89da      	ldrh	r2, [r3, #14]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	899b      	ldrh	r3, [r3, #12]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	899b      	ldrh	r3, [r3, #12]
 8006900:	3318      	adds	r3, #24
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	1cd9      	adds	r1, r3, #3
 8006908:	f107 020e 	add.w	r2, r7, #14
 800690c:	2301      	movs	r3, #1
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fb46 	bl	8005fa0 <http_write>
 8006914:	4603      	mov	r3, r0
 8006916:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8006918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d112      	bne.n	8006946 <http_send_data_ssi+0x516>
              data_to_send = 1;
 8006920:	2301      	movs	r3, #1
 8006922:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	899a      	ldrh	r2, [r3, #12]
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	4413      	add	r3, r2
 800692c:	b29a      	uxth	r2, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	819a      	strh	r2, [r3, #12]
 8006932:	e008      	b.n	8006946 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2200      	movs	r2, #0
 8006938:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8006942:	e000      	b.n	8006946 <http_send_data_ssi+0x516>
        default:
          break;
 8006944:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800694c:	2b04      	cmp	r3, #4
 800694e:	d003      	beq.n	8006958 <http_send_data_ssi+0x528>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <http_send_data_ssi+0x532>
 8006958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f43f adbf 	beq.w	80064e0 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8006968:	2b04      	cmp	r3, #4
 800696a:	d034      	beq.n	80069d6 <http_send_data_ssi+0x5a6>
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	429a      	cmp	r2, r3
 8006976:	d92e      	bls.n	80069d6 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006986:	4293      	cmp	r3, r2
 8006988:	dc06      	bgt.n	8006998 <http_send_data_ssi+0x568>
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	e001      	b.n	800699c <http_send_data_ssi+0x56c>
 8006998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800699c:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6999      	ldr	r1, [r3, #24]
 80069a2:	f107 020e 	add.w	r2, r7, #14
 80069a6:	2300      	movs	r3, #0
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff faf9 	bl	8005fa0 <http_write>
 80069ae:	4603      	mov	r3, r0
 80069b0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80069b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10d      	bne.n	80069d6 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 80069ba:	2301      	movs	r3, #1
 80069bc:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	89fa      	ldrh	r2, [r7, #14]
 80069c4:	441a      	add	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	89fa      	ldrh	r2, [r7, #14]
 80069d0:	1a9a      	subs	r2, r3, r2
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80069d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	08041974 	.word	0x08041974

080069e4 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <http_send+0x18>
    return 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e030      	b.n	8006a5e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d108      	bne.n	8006a16 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fcac 	bl	8006364 <http_check_eof>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <http_send+0x32>
      return 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e023      	b.n	8006a5e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fd05 	bl	8006430 <http_send_data_ssi>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e005      	b.n	8006a38 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fcc8 	bl	80063c4 <http_send_data_nonssi>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10d      	bne.n	8006a5c <http_send+0x78>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff fa1d 	bl	8005e84 <fs_bytes_left>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dc05      	bgt.n	8006a5c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fb5d 	bl	8006112 <http_eof>
    return 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e000      	b.n	8006a5e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <http_get_404_file+0x80>)
 8006a76:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7ff f9b7 	bl	8005df4 <fs_open>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8006a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d024      	beq.n	8006adc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	4a15      	ldr	r2, [pc, #84]	; (8006aec <http_get_404_file+0x84>)
 8006a96:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f7ff f9a7 	bl	8005df4 <fs_open>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8006aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d014      	beq.n	8006adc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <http_get_404_file+0x88>)
 8006ab6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	f7ff f997 	bl	8005df4 <fs_open>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8006aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
        return NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8006adc:	687b      	ldr	r3, [r7, #4]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	08015904 	.word	0x08015904
 8006aec:	08015910 	.word	0x08015910
 8006af0:	0801591c 	.word	0x0801591c

08006af4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	; 0x38
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <http_parse_request+0x24>
 8006b0a:	4b65      	ldr	r3, [pc, #404]	; (8006ca0 <http_parse_request+0x1ac>)
 8006b0c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8006b10:	4964      	ldr	r1, [pc, #400]	; (8006ca4 <http_parse_request+0x1b0>)
 8006b12:	4865      	ldr	r0, [pc, #404]	; (8006ca8 <http_parse_request+0x1b4>)
 8006b14:	f00d fb4a 	bl	80141ac <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <http_parse_request+0x38>
 8006b1e:	4b60      	ldr	r3, [pc, #384]	; (8006ca0 <http_parse_request+0x1ac>)
 8006b20:	f240 72af 	movw	r2, #1967	; 0x7af
 8006b24:	4961      	ldr	r1, [pc, #388]	; (8006cac <http_parse_request+0x1b8>)
 8006b26:	4860      	ldr	r0, [pc, #384]	; (8006ca8 <http_parse_request+0x1b4>)
 8006b28:	f00d fb40 	bl	80141ac <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <http_parse_request+0x48>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006b3c:	f06f 0307 	mvn.w	r3, #7
 8006b40:	e0a9      	b.n	8006c96 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4e:	621a      	str	r2, [r3, #32]
 8006b50:	e005      	b.n	8006b5e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 f8c1 	bl	8008ce0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8006b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b60:	f002 f89c 	bl	8008c9c <pbuf_ref>

  if (hs->req->next != NULL) {
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d012      	beq.n	8006b94 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	891b      	ldrh	r3, [r3, #8]
 8006b74:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	bf28      	it	cs
 8006b7c:	4613      	movcs	r3, r2
 8006b7e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	6a18      	ldr	r0, [r3, #32]
 8006b84:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006b86:	2300      	movs	r3, #0
 8006b88:	4949      	ldr	r1, [pc, #292]	; (8006cb0 <http_parse_request+0x1bc>)
 8006b8a:	f002 f9e1 	bl	8008f50 <pbuf_copy_partial>
    data = httpd_req_buf;
 8006b8e:	4b48      	ldr	r3, [pc, #288]	; (8006cb0 <http_parse_request+0x1bc>)
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e005      	b.n	8006ba0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	895b      	ldrh	r3, [r3, #10]
 8006b9e:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8006ba0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ba2:	2b06      	cmp	r3, #6
 8006ba4:	d962      	bls.n	8006c6c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8006ba6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4942      	ldr	r1, [pc, #264]	; (8006cb4 <http_parse_request+0x1c0>)
 8006bac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006bae:	f000 fcdd 	bl	800756c <lwip_strnstr>
 8006bb2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d058      	beq.n	8006c6c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	493d      	ldr	r1, [pc, #244]	; (8006cb8 <http_parse_request+0x1c4>)
 8006bc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006bc4:	f00d fbed 	bl	80143a2 <strncmp>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d116      	bne.n	8006bfc <http_parse_request+0x108>
        sp1 = data + 3;
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	3303      	adds	r3, #3
 8006bd2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	3301      	adds	r3, #1
 8006be8:	8b7a      	ldrh	r2, [r7, #26]
 8006bea:	4934      	ldr	r1, [pc, #208]	; (8006cbc <http_parse_request+0x1c8>)
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fcbd 	bl	800756c <lwip_strnstr>
 8006bf2:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d111      	bne.n	8006c1e <http_parse_request+0x12a>
 8006bfa:	e006      	b.n	8006c0a <http_parse_request+0x116>
        data[4] = 0;
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfe:	3304      	adds	r3, #4
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8006c04:	f06f 030f 	mvn.w	r3, #15
 8006c08:	e045      	b.n	8006c96 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	8b7a      	ldrh	r2, [r7, #26]
 8006c10:	4928      	ldr	r1, [pc, #160]	; (8006cb4 <http_parse_request+0x1c0>)
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fcaa 	bl	800756c <lwip_strnstr>
 8006c18:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01e      	beq.n	8006c6c <http_parse_request+0x178>
 8006c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d91a      	bls.n	8006c6c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8006c36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4921      	ldr	r1, [pc, #132]	; (8006cc0 <http_parse_request+0x1cc>)
 8006c3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c3e:	f000 fc95 	bl	800756c <lwip_strnstr>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d011      	beq.n	8006c6c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006c54:	8b3b      	ldrh	r3, [r7, #24]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	68b8      	ldr	r0, [r7, #8]
 8006c64:	f000 f880 	bl	8006d68 <http_find_file>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	e014      	b.n	8006c96 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fffb 	bl	8008c6c <pbuf_clen>
 8006c76:	4603      	mov	r3, r0
 8006c78:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	891b      	ldrh	r3, [r3, #8]
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c84:	d205      	bcs.n	8006c92 <http_parse_request+0x19e>
 8006c86:	8a7b      	ldrh	r3, [r7, #18]
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	d802      	bhi.n	8006c92 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006c8c:	f06f 0304 	mvn.w	r3, #4
 8006c90:	e001      	b.n	8006c96 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006c92:	f06f 030f 	mvn.w	r3, #15
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3738      	adds	r7, #56	; 0x38
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08015800 	.word	0x08015800
 8006ca4:	08015928 	.word	0x08015928
 8006ca8:	08015848 	.word	0x08015848
 8006cac:	08015870 	.word	0x08015870
 8006cb0:	200000a8 	.word	0x200000a8
 8006cb4:	08015934 	.word	0x08015934
 8006cb8:	08015938 	.word	0x08015938
 8006cbc:	08015940 	.word	0x08015940
 8006cc0:	08015944 	.word	0x08015944

08006cc4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d040      	beq.n	8006d5a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8006cdc:	213f      	movs	r1, #63	; 0x3f
 8006cde:	6838      	ldr	r0, [r7, #0]
 8006ce0:	f00d fb52 	bl	8014388 <strchr>
 8006ce4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	613b      	str	r3, [r7, #16]
    ext = uri;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006cfa:	212e      	movs	r1, #46	; 0x2e
 8006cfc:	6938      	ldr	r0, [r7, #16]
 8006cfe:	f00d fb43 	bl	8014388 <strchr>
 8006d02:	6138      	str	r0, [r7, #16]
 8006d04:	e009      	b.n	8006d1a <http_uri_is_ssi+0x56>
      ext = sub;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	617b      	str	r3, [r7, #20]
      sub++;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006d10:	212e      	movs	r1, #46	; 0x2e
 8006d12:	6938      	ldr	r0, [r7, #16]
 8006d14:	f00d fb38 	bl	8014388 <strchr>
 8006d18:	6138      	str	r0, [r7, #16]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f2      	bne.n	8006d06 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e010      	b.n	8006d48 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8006d26:	4a0f      	ldr	r2, [pc, #60]	; (8006d64 <http_uri_is_ssi+0xa0>)
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6978      	ldr	r0, [r7, #20]
 8006d32:	f000 fc51 	bl	80075d8 <lwip_stricmp>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	76fb      	strb	r3, [r7, #27]
        break;
 8006d40:	e005      	b.n	8006d4e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3301      	adds	r3, #1
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d9eb      	bls.n	8006d26 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <http_uri_is_ssi+0x96>
      *param = '?';
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	223f      	movs	r2, #63	; 0x3f
 8006d58:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8006d5a:	7efb      	ldrb	r3, [r7, #27]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	08041938 	.word	0x08041938

08006d68 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	b093      	sub	sp, #76	; 0x4c
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7f9 fa65 	bl	8000254 <strlen>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d072      	beq.n	8006e78 <http_find_file+0x110>
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	3b01      	subs	r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b2f      	cmp	r3, #47	; 0x2f
 8006d9e:	d16b      	bne.n	8006e78 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006da0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006da2:	4a80      	ldr	r2, [pc, #512]	; (8006fa4 <http_find_file+0x23c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d102      	bne.n	8006dae <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d164      	bne.n	8006e78 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	3b01      	subs	r3, #1
 8006db2:	2b3f      	cmp	r3, #63	; 0x3f
 8006db4:	bf28      	it	cs
 8006db6:	233f      	movcs	r3, #63	; 0x3f
 8006db8:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6a3a      	ldr	r2, [r7, #32]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4877      	ldr	r0, [pc, #476]	; (8006fa4 <http_find_file+0x23c>)
 8006dc8:	f00d f9c0 	bl	801414c <memcpy>
      http_uri_buf[copy_len] = 0;
 8006dcc:	4a75      	ldr	r2, [pc, #468]	; (8006fa4 <http_find_file+0x23c>)
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dda:	e04a      	b.n	8006e72 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d028      	beq.n	8006e34 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8006de8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01e      	beq.n	8006e2e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006df0:	4a6d      	ldr	r2, [pc, #436]	; (8006fa8 <http_find_file+0x240>)
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7f9 fa2b 	bl	8000254 <strlen>
 8006dfe:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bf28      	it	cs
 8006e08:	4613      	movcs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	4a65      	ldr	r2, [pc, #404]	; (8006fa4 <http_find_file+0x23c>)
 8006e10:	1898      	adds	r0, r3, r2
 8006e12:	4a65      	ldr	r2, [pc, #404]	; (8006fa8 <http_find_file+0x240>)
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f00d f995 	bl	801414c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4413      	add	r3, r2
 8006e28:	4a5e      	ldr	r2, [pc, #376]	; (8006fa4 <http_find_file+0x23c>)
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8006e2e:	4b5d      	ldr	r3, [pc, #372]	; (8006fa4 <http_find_file+0x23c>)
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e32:	e004      	b.n	8006e3e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006e34:	4a5c      	ldr	r2, [pc, #368]	; (8006fa8 <http_find_file+0x240>)
 8006e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe ffd6 	bl	8005df4 <fs_open>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8006e4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10b      	bne.n	8006e6c <http_find_file+0x104>
        uri = file_name;
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8006e5c:	4a52      	ldr	r2, [pc, #328]	; (8006fa8 <http_find_file+0x240>)
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	4413      	add	r3, r2
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8006e6a:	e005      	b.n	8006e78 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6e:	3301      	adds	r3, #1
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d9b1      	bls.n	8006ddc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d176      	bne.n	8006f6c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	213f      	movs	r1, #63	; 0x3f
 8006e82:	4618      	mov	r0, r3
 8006e84:	f00d fa80 	bl	8014388 <strchr>
 8006e88:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	2200      	movs	r2, #0
 8006e94:	701a      	strb	r2, [r3, #0]
      params++;
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	3301      	adds	r3, #1
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8006e9c:	4b43      	ldr	r3, [pc, #268]	; (8006fac <http_find_file+0x244>)
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ea2:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8006ea4:	4b42      	ldr	r3, [pc, #264]	; (8006fb0 <http_find_file+0x248>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d034      	beq.n	8006f16 <http_find_file+0x1ae>
 8006eac:	4b41      	ldr	r3, [pc, #260]	; (8006fb4 <http_find_file+0x24c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d030      	beq.n	8006f16 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8006eb8:	e028      	b.n	8006f0c <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	4b3d      	ldr	r3, [pc, #244]	; (8006fb4 <http_find_file+0x24c>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f7f9 f9b9 	bl	8000240 <strcmp>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d118      	bne.n	8006f06 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8006ed4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff f928 	bl	800612c <extract_uri_parameters>
 8006edc:	4603      	mov	r3, r0
 8006ede:	4a33      	ldr	r2, [pc, #204]	; (8006fac <http_find_file+0x244>)
 8006ee0:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006ee2:	4b34      	ldr	r3, [pc, #208]	; (8006fb4 <http_find_file+0x24c>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	4413      	add	r3, r2
 8006eec:	685c      	ldr	r4, [r3, #4]
 8006eee:	4b2f      	ldr	r3, [pc, #188]	; (8006fac <http_find_file+0x244>)
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006efe:	47a0      	blx	r4
 8006f00:	4603      	mov	r3, r0
 8006f02:	60bb      	str	r3, [r7, #8]
          break;
 8006f04:	e007      	b.n	8006f16 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	3301      	adds	r3, #1
 8006f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f0c:	4b28      	ldr	r3, [pc, #160]	; (8006fb0 <http_find_file+0x248>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f12:	429a      	cmp	r2, r3
 8006f14:	dbd1      	blt.n	8006eba <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe ff69 	bl	8005df4 <fs_open>
 8006f22:	4603      	mov	r3, r0
 8006f24:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8006f26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f32:	e006      	b.n	8006f42 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8006f34:	f107 0308 	add.w	r3, r7, #8
 8006f38:	4619      	mov	r1, r3
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff fd94 	bl	8006a68 <http_get_404_file>
 8006f40:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d011      	beq.n	8006f6c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	7c1b      	ldrb	r3, [r3, #16]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <http_find_file+0x1f4>
        tag_check = 1;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f5a:	e007      	b.n	8006f6c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f62:	f7ff feaf 	bl	8006cc4 <http_uri_is_ssi>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8006f72:	f107 0308 	add.w	r3, r7, #8
 8006f76:	4619      	mov	r1, r3
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff fd75 	bl	8006a68 <http_get_404_file>
 8006f7e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f810 	bl	8006fb8 <http_init_file>
 8006f98:	4603      	mov	r3, r0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3744      	adds	r7, #68	; 0x44
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd90      	pop	{r4, r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200004a8 	.word	0x200004a8
 8006fa8:	0804194c 	.word	0x0804194c
 8006fac:	200004fc 	.word	0x200004fc
 8006fb0:	200004f8 	.word	0x200004f8
 8006fb4:	200004f4 	.word	0x200004f4

08006fb8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d07d      	beq.n	80070c8 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <http_init_file+0x2a>
 8006fd4:	4b45      	ldr	r3, [pc, #276]	; (80070ec <http_init_file+0x134>)
 8006fd6:	f640 120b 	movw	r2, #2315	; 0x90b
 8006fda:	4945      	ldr	r1, [pc, #276]	; (80070f0 <http_init_file+0x138>)
 8006fdc:	4845      	ldr	r0, [pc, #276]	; (80070f4 <http_init_file+0x13c>)
 8006fde:	f00d f8e5 	bl	80141ac <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8006fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d01c      	beq.n	8007024 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8006fea:	f7fe ff5a 	bl	8005ea2 <http_ssi_state_alloc>
 8006fee:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d016      	beq.n	8007024 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	461a      	mov	r2, r3
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	da06      	bge.n	8007048 <http_init_file+0x90>
 800703a:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <http_init_file+0x134>)
 800703c:	f640 1234 	movw	r2, #2356	; 0x934
 8007040:	492d      	ldr	r1, [pc, #180]	; (80070f8 <http_init_file+0x140>)
 8007042:	482c      	ldr	r0, [pc, #176]	; (80070f4 <http_init_file+0x13c>)
 8007044:	f00d f8b2 	bl	80141ac <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	461a      	mov	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	7c1b      	ldrb	r3, [r3, #16]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <http_init_file+0xbe>
 8007068:	4b20      	ldr	r3, [pc, #128]	; (80070ec <http_init_file+0x134>)
 800706a:	f640 1243 	movw	r2, #2371	; 0x943
 800706e:	4923      	ldr	r1, [pc, #140]	; (80070fc <http_init_file+0x144>)
 8007070:	4820      	ldr	r0, [pc, #128]	; (80070f4 <http_init_file+0x13c>)
 8007072:	f00d f89b 	bl	80141ac <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d032      	beq.n	80070e2 <http_init_file+0x12a>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	7c1b      	ldrb	r3, [r3, #16]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d02b      	beq.n	80070e2 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6998      	ldr	r0, [r3, #24]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	461a      	mov	r2, r3
 8007094:	491a      	ldr	r1, [pc, #104]	; (8007100 <http_init_file+0x148>)
 8007096:	f000 fa69 	bl	800756c <lwip_strnstr>
 800709a:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01f      	beq.n	80070e2 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	1d1a      	adds	r2, r3, #4
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	441a      	add	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	1ad2      	subs	r2, r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24
 80070c6:	e00c      	b.n	80070e2 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	08015800 	.word	0x08015800
 80070f0:	0801594c 	.word	0x0801594c
 80070f4:	08015848 	.word	0x08015848
 80070f8:	08015960 	.word	0x08015960
 80070fc:	08015980 	.word	0x08015980
 8007100:	08015944 	.word	0x08015944

08007104 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <http_err+0x1c>
    http_state_free(hs);
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7fe ff2e 	bl	8005f7c <http_state_free>
  }
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <http_sent+0x1c>
    return ERR_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e008      	b.n	8007156 <http_sent+0x2e>
  }

  hs->retries = 0;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	68b8      	ldr	r0, [r7, #8]
 8007150:	f7ff fc48 	bl	80069e4 <http_send>

  return ERR_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d107      	bne.n	8007182 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8007172:	2100      	movs	r1, #0
 8007174:	6838      	ldr	r0, [r7, #0]
 8007176:	f7fe ffbd 	bl	80060f4 <http_close_conn>
 800717a:	4603      	mov	r3, r0
 800717c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	e021      	b.n	80071c6 <http_poll+0x68>
  } else {
    hs->retries++;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007188:	3301      	adds	r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007198:	2b04      	cmp	r3, #4
 800719a:	d105      	bne.n	80071a8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800719c:	68f9      	ldr	r1, [r7, #12]
 800719e:	6838      	ldr	r0, [r7, #0]
 80071a0:	f7fe ffa8 	bl	80060f4 <http_close_conn>
      return ERR_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e00e      	b.n	80071c6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d009      	beq.n	80071c4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	6838      	ldr	r0, [r7, #0]
 80071b4:	f7ff fc16 	bl	80069e4 <http_send>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80071be:	6838      	ldr	r0, [r7, #0]
 80071c0:	f007 f84a 	bl	800e258 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80071e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d105      	bne.n	80071f6 <http_recv+0x26>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <http_recv+0x26>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d111      	bne.n	800721a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	891b      	ldrh	r3, [r3, #8]
 8007200:	4619      	mov	r1, r3
 8007202:	68b8      	ldr	r0, [r7, #8]
 8007204:	f002 fc1c 	bl	8009a40 <tcp_recved>
      pbuf_free(p);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fca7 	bl	8008b5c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800720e:	6979      	ldr	r1, [r7, #20]
 8007210:	68b8      	ldr	r0, [r7, #8]
 8007212:	f7fe ff6f 	bl	80060f4 <http_close_conn>
    return ERR_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e055      	b.n	80072c6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	891b      	ldrh	r3, [r3, #8]
 800721e:	4619      	mov	r1, r3
 8007220:	68b8      	ldr	r0, [r7, #8]
 8007222:	f002 fc0d 	bl	8009a40 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d147      	bne.n	80072be <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	6979      	ldr	r1, [r7, #20]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff fc5e 	bl	8006af4 <http_parse_request>
 8007238:	4603      	mov	r3, r0
 800723a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800723c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d015      	beq.n	8007270 <http_recv+0xa0>
 8007244:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007248:	f113 0f05 	cmn.w	r3, #5
 800724c:	d010      	beq.n	8007270 <http_recv+0xa0>
 800724e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007252:	f113 0f10 	cmn.w	r3, #16
 8007256:	d00b      	beq.n	8007270 <http_recv+0xa0>
 8007258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800725c:	f113 0f08 	cmn.w	r3, #8
 8007260:	d006      	beq.n	8007270 <http_recv+0xa0>
 8007262:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <http_recv+0x100>)
 8007264:	f640 2204 	movw	r2, #2564	; 0xa04
 8007268:	491a      	ldr	r1, [pc, #104]	; (80072d4 <http_recv+0x104>)
 800726a:	481b      	ldr	r0, [pc, #108]	; (80072d8 <http_recv+0x108>)
 800726c:	f00c ff9e 	bl	80141ac <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8007270:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007274:	f113 0f05 	cmn.w	r3, #5
 8007278:	d00b      	beq.n	8007292 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <http_recv+0xc2>
          pbuf_free(hs->req);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fc68 	bl	8008b5c <pbuf_free>
          hs->req = NULL;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2200      	movs	r2, #0
 8007290:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fc62 	bl	8008b5c <pbuf_free>
      if (parsed == ERR_OK) {
 8007298:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	68b8      	ldr	r0, [r7, #8]
 80072a4:	f7ff fb9e 	bl	80069e4 <http_send>
 80072a8:	e00c      	b.n	80072c4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80072aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80072ae:	f113 0f10 	cmn.w	r3, #16
 80072b2:	d107      	bne.n	80072c4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80072b4:	6979      	ldr	r1, [r7, #20]
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	f7fe ff1c 	bl	80060f4 <http_close_conn>
 80072bc:	e002      	b.n	80072c4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fc4c 	bl	8008b5c <pbuf_free>
    }
  }
  return ERR_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	08015800 	.word	0x08015800
 80072d4:	080159ac 	.word	0x080159ac
 80072d8:	08015848 	.word	0x08015848

080072dc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80072ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <http_accept+0x1c>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d102      	bne.n	80072fe <http_accept+0x22>
    return ERR_VAL;
 80072f8:	f06f 0305 	mvn.w	r3, #5
 80072fc:	e025      	b.n	800734a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80072fe:	2101      	movs	r1, #1
 8007300:	68b8      	ldr	r0, [r7, #8]
 8007302:	f003 f881 	bl	800a408 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8007306:	f7fe fdfb 	bl	8005f00 <http_state_alloc>
 800730a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007316:	e018      	b.n	800734a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800731e:	6979      	ldr	r1, [r7, #20]
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	f003 fa71 	bl	800a808 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8007326:	490b      	ldr	r1, [pc, #44]	; (8007354 <http_accept+0x78>)
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f003 fa7f 	bl	800a82c <tcp_recv>
  altcp_err(pcb, http_err);
 800732e:	490a      	ldr	r1, [pc, #40]	; (8007358 <http_accept+0x7c>)
 8007330:	68b8      	ldr	r0, [r7, #8]
 8007332:	f003 fabf 	bl	800a8b4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8007336:	2204      	movs	r2, #4
 8007338:	4908      	ldr	r1, [pc, #32]	; (800735c <http_accept+0x80>)
 800733a:	68b8      	ldr	r0, [r7, #8]
 800733c:	f003 faf4 	bl	800a928 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8007340:	4907      	ldr	r1, [pc, #28]	; (8007360 <http_accept+0x84>)
 8007342:	68b8      	ldr	r0, [r7, #8]
 8007344:	f003 fa94 	bl	800a870 <tcp_sent>

  return ERR_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	080071d1 	.word	0x080071d1
 8007358:	08007105 	.word	0x08007105
 800735c:	0800715f 	.word	0x0800715f
 8007360:	08007129 	.word	0x08007129

08007364 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d029      	beq.n	80073ca <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8007376:	2101      	movs	r1, #1
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f003 f845 	bl	800a408 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800737e:	887b      	ldrh	r3, [r7, #2]
 8007380:	461a      	mov	r2, r3
 8007382:	4914      	ldr	r1, [pc, #80]	; (80073d4 <httpd_init_pcb+0x70>)
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f002 f98d 	bl	80096a4 <tcp_bind>
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800738e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d006      	beq.n	80073a4 <httpd_init_pcb+0x40>
 8007396:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <httpd_init_pcb+0x74>)
 8007398:	f640 2257 	movw	r2, #2647	; 0xa57
 800739c:	490f      	ldr	r1, [pc, #60]	; (80073dc <httpd_init_pcb+0x78>)
 800739e:	4810      	ldr	r0, [pc, #64]	; (80073e0 <httpd_init_pcb+0x7c>)
 80073a0:	f00c ff04 	bl	80141ac <iprintf>
    pcb = altcp_listen(pcb);
 80073a4:	21ff      	movs	r1, #255	; 0xff
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f002 fa34 	bl	8009814 <tcp_listen_with_backlog>
 80073ac:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <httpd_init_pcb+0x5e>
 80073b4:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <httpd_init_pcb+0x74>)
 80073b6:	f640 2259 	movw	r2, #2649	; 0xa59
 80073ba:	490a      	ldr	r1, [pc, #40]	; (80073e4 <httpd_init_pcb+0x80>)
 80073bc:	4808      	ldr	r0, [pc, #32]	; (80073e0 <httpd_init_pcb+0x7c>)
 80073be:	f00c fef5 	bl	80141ac <iprintf>
    altcp_accept(pcb, http_accept);
 80073c2:	4909      	ldr	r1, [pc, #36]	; (80073e8 <httpd_init_pcb+0x84>)
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f003 fa97 	bl	800a8f8 <tcp_accept>
  }
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	08041a64 	.word	0x08041a64
 80073d8:	08015800 	.word	0x08015800
 80073dc:	080159d8 	.word	0x080159d8
 80073e0:	08015848 	.word	0x08015848
 80073e4:	080159f4 	.word	0x080159f4
 80073e8:	080072dd 	.word	0x080072dd

080073ec <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80073f2:	202e      	movs	r0, #46	; 0x2e
 80073f4:	f003 f9fa 	bl	800a7ec <tcp_new_ip_type>
 80073f8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <httpd_init+0x22>
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <httpd_init+0x34>)
 8007402:	f640 2272 	movw	r2, #2674	; 0xa72
 8007406:	4907      	ldr	r1, [pc, #28]	; (8007424 <httpd_init+0x38>)
 8007408:	4807      	ldr	r0, [pc, #28]	; (8007428 <httpd_init+0x3c>)
 800740a:	f00c fecf 	bl	80141ac <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800740e:	2150      	movs	r1, #80	; 0x50
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff ffa7 	bl	8007364 <httpd_init_pcb>
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	08015800 	.word	0x08015800
 8007424:	08015a14 	.word	0x08015a14
 8007428:	08015848 	.word	0x08015848

0800742c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <http_set_ssi_handler+0x20>
 800743e:	4b14      	ldr	r3, [pc, #80]	; (8007490 <http_set_ssi_handler+0x64>)
 8007440:	f640 2297 	movw	r2, #2711	; 0xa97
 8007444:	4913      	ldr	r1, [pc, #76]	; (8007494 <http_set_ssi_handler+0x68>)
 8007446:	4814      	ldr	r0, [pc, #80]	; (8007498 <http_set_ssi_handler+0x6c>)
 8007448:	f00c feb0 	bl	80141ac <iprintf>
  httpd_ssi_handler = ssi_handler;
 800744c:	4a13      	ldr	r2, [pc, #76]	; (800749c <http_set_ssi_handler+0x70>)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <http_set_ssi_handler+0x3a>
 8007458:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <http_set_ssi_handler+0x64>)
 800745a:	f640 229e 	movw	r2, #2718	; 0xa9e
 800745e:	4910      	ldr	r1, [pc, #64]	; (80074a0 <http_set_ssi_handler+0x74>)
 8007460:	480d      	ldr	r0, [pc, #52]	; (8007498 <http_set_ssi_handler+0x6c>)
 8007462:	f00c fea3 	bl	80141ac <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc06      	bgt.n	800747a <http_set_ssi_handler+0x4e>
 800746c:	4b08      	ldr	r3, [pc, #32]	; (8007490 <http_set_ssi_handler+0x64>)
 800746e:	f640 229f 	movw	r2, #2719	; 0xa9f
 8007472:	490c      	ldr	r1, [pc, #48]	; (80074a4 <http_set_ssi_handler+0x78>)
 8007474:	4808      	ldr	r0, [pc, #32]	; (8007498 <http_set_ssi_handler+0x6c>)
 8007476:	f00c fe99 	bl	80141ac <iprintf>

  httpd_tags = tags;
 800747a:	4a0b      	ldr	r2, [pc, #44]	; (80074a8 <http_set_ssi_handler+0x7c>)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8007480:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <http_set_ssi_handler+0x80>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	08015800 	.word	0x08015800
 8007494:	08015a30 	.word	0x08015a30
 8007498:	08015848 	.word	0x08015848
 800749c:	200004e8 	.word	0x200004e8
 80074a0:	08015a48 	.word	0x08015a48
 80074a4:	08015a58 	.word	0x08015a58
 80074a8:	200004f0 	.word	0x200004f0
 80074ac:	200004ec 	.word	0x200004ec

080074b0 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <http_set_cgi_handlers+0x1e>
 80074c0:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <http_set_cgi_handlers+0x48>)
 80074c2:	f640 22b2 	movw	r2, #2738	; 0xab2
 80074c6:	490d      	ldr	r1, [pc, #52]	; (80074fc <http_set_cgi_handlers+0x4c>)
 80074c8:	480d      	ldr	r0, [pc, #52]	; (8007500 <http_set_cgi_handlers+0x50>)
 80074ca:	f00c fe6f 	bl	80141ac <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc06      	bgt.n	80074e2 <http_set_cgi_handlers+0x32>
 80074d4:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <http_set_cgi_handlers+0x48>)
 80074d6:	f640 22b3 	movw	r2, #2739	; 0xab3
 80074da:	490a      	ldr	r1, [pc, #40]	; (8007504 <http_set_cgi_handlers+0x54>)
 80074dc:	4808      	ldr	r0, [pc, #32]	; (8007500 <http_set_cgi_handlers+0x50>)
 80074de:	f00c fe65 	bl	80141ac <iprintf>

  httpd_cgis = cgis;
 80074e2:	4a09      	ldr	r2, [pc, #36]	; (8007508 <http_set_cgi_handlers+0x58>)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <http_set_cgi_handlers+0x5c>)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6013      	str	r3, [r2, #0]
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	08015800 	.word	0x08015800
 80074fc:	08015a70 	.word	0x08015a70
 8007500:	08015848 	.word	0x08015848
 8007504:	08015a80 	.word	0x08015a80
 8007508:	200004f4 	.word	0x200004f4
 800750c:	200004f8 	.word	0x200004f8

08007510 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	b21a      	sxth	r2, r3
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	b29b      	uxth	r3, r3
 8007526:	b21b      	sxth	r3, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	b21b      	sxth	r3, r3
 800752c:	b29b      	uxth	r3, r3
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	061a      	lsls	r2, r3, #24
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	0e1b      	lsrs	r3, r3, #24
 800755e:	4313      	orrs	r3, r2
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8007578:	68b8      	ldr	r0, [r7, #8]
 800757a:	f7f8 fe6b 	bl	8000254 <strlen>
 800757e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	e022      	b.n	80075d0 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e012      	b.n	80075b6 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d109      	bne.n	80075b0 <lwip_strnstr+0x44>
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	6978      	ldr	r0, [r7, #20]
 80075a2:	f00c fefe 	bl	80143a2 <strncmp>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	e00f      	b.n	80075d0 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	3301      	adds	r3, #1
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <lwip_strnstr+0x62>
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	441a      	add	r2, r3
 80075c4:	68f9      	ldr	r1, [r7, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	440b      	add	r3, r1
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d9e0      	bls.n	8007590 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	603a      	str	r2, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80075f6:	7bfa      	ldrb	r2, [r7, #15]
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d016      	beq.n	800762c <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	f043 0320 	orr.w	r3, r3, #32
 8007604:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8007606:	7b7b      	ldrb	r3, [r7, #13]
 8007608:	2b60      	cmp	r3, #96	; 0x60
 800760a:	d90c      	bls.n	8007626 <lwip_stricmp+0x4e>
 800760c:	7b7b      	ldrb	r3, [r7, #13]
 800760e:	2b7a      	cmp	r3, #122	; 0x7a
 8007610:	d809      	bhi.n	8007626 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	f043 0320 	orr.w	r3, r3, #32
 8007618:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800761a:	7b7a      	ldrb	r2, [r7, #13]
 800761c:	7b3b      	ldrb	r3, [r7, #12]
 800761e:	429a      	cmp	r2, r3
 8007620:	d003      	beq.n	800762a <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8007622:	2301      	movs	r3, #1
 8007624:	e006      	b.n	8007634 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8007626:	2301      	movs	r3, #1
 8007628:	e004      	b.n	8007634 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800762a:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1d7      	bne.n	80075e2 <lwip_stricmp+0xa>
  return 0;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800764a:	f000 f8d5 	bl	80077f8 <mem_init>
  memp_init();
 800764e:	f000 fbdb 	bl	8007e08 <memp_init>
  pbuf_init();
  netif_init();
 8007652:	f000 fc93 	bl	8007f7c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007656:	f007 febf 	bl	800f3d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800765a:	f001 fd1d 	bl	8009098 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800765e:	f007 fe31 	bl	800f2c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007676:	4b05      	ldr	r3, [pc, #20]	; (800768c <ptr_to_mem+0x20>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	4413      	add	r3, r2
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20000500 	.word	0x20000500

08007690 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <mem_to_ptr+0x20>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	b29b      	uxth	r3, r3
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	20000500 	.word	0x20000500

080076b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80076b4:	b590      	push	{r4, r7, lr}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80076bc:	4b45      	ldr	r3, [pc, #276]	; (80077d4 <plug_holes+0x120>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d206      	bcs.n	80076d4 <plug_holes+0x20>
 80076c6:	4b44      	ldr	r3, [pc, #272]	; (80077d8 <plug_holes+0x124>)
 80076c8:	f240 12df 	movw	r2, #479	; 0x1df
 80076cc:	4943      	ldr	r1, [pc, #268]	; (80077dc <plug_holes+0x128>)
 80076ce:	4844      	ldr	r0, [pc, #272]	; (80077e0 <plug_holes+0x12c>)
 80076d0:	f00c fd6c 	bl	80141ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80076d4:	4b43      	ldr	r3, [pc, #268]	; (80077e4 <plug_holes+0x130>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d306      	bcc.n	80076ec <plug_holes+0x38>
 80076de:	4b3e      	ldr	r3, [pc, #248]	; (80077d8 <plug_holes+0x124>)
 80076e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80076e4:	4940      	ldr	r1, [pc, #256]	; (80077e8 <plug_holes+0x134>)
 80076e6:	483e      	ldr	r0, [pc, #248]	; (80077e0 <plug_holes+0x12c>)
 80076e8:	f00c fd60 	bl	80141ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	791b      	ldrb	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d006      	beq.n	8007702 <plug_holes+0x4e>
 80076f4:	4b38      	ldr	r3, [pc, #224]	; (80077d8 <plug_holes+0x124>)
 80076f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80076fa:	493c      	ldr	r1, [pc, #240]	; (80077ec <plug_holes+0x138>)
 80076fc:	4838      	ldr	r0, [pc, #224]	; (80077e0 <plug_holes+0x12c>)
 80076fe:	f00c fd55 	bl	80141ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800770a:	d906      	bls.n	800771a <plug_holes+0x66>
 800770c:	4b32      	ldr	r3, [pc, #200]	; (80077d8 <plug_holes+0x124>)
 800770e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007712:	4937      	ldr	r1, [pc, #220]	; (80077f0 <plug_holes+0x13c>)
 8007714:	4832      	ldr	r0, [pc, #200]	; (80077e0 <plug_holes+0x12c>)
 8007716:	f00c fd49 	bl	80141ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff ffa4 	bl	800766c <ptr_to_mem>
 8007724:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	429a      	cmp	r2, r3
 800772c:	d024      	beq.n	8007778 <plug_holes+0xc4>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	791b      	ldrb	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d120      	bne.n	8007778 <plug_holes+0xc4>
 8007736:	4b2b      	ldr	r3, [pc, #172]	; (80077e4 <plug_holes+0x130>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	429a      	cmp	r2, r3
 800773e:	d01b      	beq.n	8007778 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007740:	4b2c      	ldr	r3, [pc, #176]	; (80077f4 <plug_holes+0x140>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	429a      	cmp	r2, r3
 8007748:	d102      	bne.n	8007750 <plug_holes+0x9c>
      lfree = mem;
 800774a:	4a2a      	ldr	r2, [pc, #168]	; (80077f4 <plug_holes+0x140>)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	881a      	ldrh	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007760:	d00a      	beq.n	8007778 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff ff80 	bl	800766c <ptr_to_mem>
 800776c:	4604      	mov	r4, r0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ff8e 	bl	8007690 <mem_to_ptr>
 8007774:	4603      	mov	r3, r0
 8007776:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff ff75 	bl	800766c <ptr_to_mem>
 8007782:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d01f      	beq.n	80077cc <plug_holes+0x118>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	791b      	ldrb	r3, [r3, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11b      	bne.n	80077cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007794:	4b17      	ldr	r3, [pc, #92]	; (80077f4 <plug_holes+0x140>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	429a      	cmp	r2, r3
 800779c:	d102      	bne.n	80077a4 <plug_holes+0xf0>
      lfree = pmem;
 800779e:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <plug_holes+0x140>)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	881a      	ldrh	r2, [r3, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80077b4:	d00a      	beq.n	80077cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff ff56 	bl	800766c <ptr_to_mem>
 80077c0:	4604      	mov	r4, r0
 80077c2:	68b8      	ldr	r0, [r7, #8]
 80077c4:	f7ff ff64 	bl	8007690 <mem_to_ptr>
 80077c8:	4603      	mov	r3, r0
 80077ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd90      	pop	{r4, r7, pc}
 80077d4:	20000500 	.word	0x20000500
 80077d8:	08015a9c 	.word	0x08015a9c
 80077dc:	08015acc 	.word	0x08015acc
 80077e0:	08015ae4 	.word	0x08015ae4
 80077e4:	20000504 	.word	0x20000504
 80077e8:	08015b0c 	.word	0x08015b0c
 80077ec:	08015b28 	.word	0x08015b28
 80077f0:	08015b44 	.word	0x08015b44
 80077f4:	20000508 	.word	0x20000508

080077f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80077fe:	4b18      	ldr	r3, [pc, #96]	; (8007860 <mem_init+0x68>)
 8007800:	3303      	adds	r3, #3
 8007802:	f023 0303 	bic.w	r3, r3, #3
 8007806:	461a      	mov	r2, r3
 8007808:	4b16      	ldr	r3, [pc, #88]	; (8007864 <mem_init+0x6c>)
 800780a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800780c:	4b15      	ldr	r3, [pc, #84]	; (8007864 <mem_init+0x6c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007818:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007826:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800782a:	f7ff ff1f 	bl	800766c <ptr_to_mem>
 800782e:	4603      	mov	r3, r0
 8007830:	4a0d      	ldr	r2, [pc, #52]	; (8007868 <mem_init+0x70>)
 8007832:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007834:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <mem_init+0x70>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2201      	movs	r2, #1
 800783a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800783c:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <mem_init+0x70>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007844:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007846:	4b08      	ldr	r3, [pc, #32]	; (8007868 <mem_init+0x70>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800784e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <mem_init+0x6c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a05      	ldr	r2, [pc, #20]	; (800786c <mem_init+0x74>)
 8007856:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20003904 	.word	0x20003904
 8007864:	20000500 	.word	0x20000500
 8007868:	20000504 	.word	0x20000504
 800786c:	20000508 	.word	0x20000508

08007870 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ff09 	bl	8007690 <mem_to_ptr>
 800787e:	4603      	mov	r3, r0
 8007880:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff fef0 	bl	800766c <ptr_to_mem>
 800788c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	885b      	ldrh	r3, [r3, #2]
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff feea 	bl	800766c <ptr_to_mem>
 8007898:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078a2:	d818      	bhi.n	80078d6 <mem_link_valid+0x66>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	885b      	ldrh	r3, [r3, #2]
 80078a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078ac:	d813      	bhi.n	80078d6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80078b2:	8afa      	ldrh	r2, [r7, #22]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d004      	beq.n	80078c2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	8afa      	ldrh	r2, [r7, #22]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d109      	bne.n	80078d6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <mem_link_valid+0x74>)
 80078c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d006      	beq.n	80078da <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	885b      	ldrh	r3, [r3, #2]
 80078d0:	8afa      	ldrh	r2, [r7, #22]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d001      	beq.n	80078da <mem_link_valid+0x6a>
    return 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <mem_link_valid+0x6c>
  }
  return 1;
 80078da:	2301      	movs	r3, #1
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000504 	.word	0x20000504

080078e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d04c      	beq.n	8007990 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f003 0303 	and.w	r3, r3, #3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007900:	4b25      	ldr	r3, [pc, #148]	; (8007998 <mem_free+0xb0>)
 8007902:	f240 2273 	movw	r2, #627	; 0x273
 8007906:	4925      	ldr	r1, [pc, #148]	; (800799c <mem_free+0xb4>)
 8007908:	4825      	ldr	r0, [pc, #148]	; (80079a0 <mem_free+0xb8>)
 800790a:	f00c fc4f 	bl	80141ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800790e:	e040      	b.n	8007992 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3b08      	subs	r3, #8
 8007914:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007916:	4b23      	ldr	r3, [pc, #140]	; (80079a4 <mem_free+0xbc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	429a      	cmp	r2, r3
 800791e:	d306      	bcc.n	800792e <mem_free+0x46>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f103 020c 	add.w	r2, r3, #12
 8007926:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <mem_free+0xc0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d907      	bls.n	800793e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800792e:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <mem_free+0xb0>)
 8007930:	f240 227f 	movw	r2, #639	; 0x27f
 8007934:	491d      	ldr	r1, [pc, #116]	; (80079ac <mem_free+0xc4>)
 8007936:	481a      	ldr	r0, [pc, #104]	; (80079a0 <mem_free+0xb8>)
 8007938:	f00c fc38 	bl	80141ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800793c:	e029      	b.n	8007992 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	791b      	ldrb	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d107      	bne.n	8007956 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <mem_free+0xb0>)
 8007948:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800794c:	4918      	ldr	r1, [pc, #96]	; (80079b0 <mem_free+0xc8>)
 800794e:	4814      	ldr	r0, [pc, #80]	; (80079a0 <mem_free+0xb8>)
 8007950:	f00c fc2c 	bl	80141ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007954:	e01d      	b.n	8007992 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ff8a 	bl	8007870 <mem_link_valid>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d107      	bne.n	8007972 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007962:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <mem_free+0xb0>)
 8007964:	f240 2295 	movw	r2, #661	; 0x295
 8007968:	4912      	ldr	r1, [pc, #72]	; (80079b4 <mem_free+0xcc>)
 800796a:	480d      	ldr	r0, [pc, #52]	; (80079a0 <mem_free+0xb8>)
 800796c:	f00c fc1e 	bl	80141ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007970:	e00f      	b.n	8007992 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <mem_free+0xd0>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	429a      	cmp	r2, r3
 8007980:	d202      	bcs.n	8007988 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007982:	4a0d      	ldr	r2, [pc, #52]	; (80079b8 <mem_free+0xd0>)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff fe93 	bl	80076b4 <plug_holes>
 800798e:	e000      	b.n	8007992 <mem_free+0xaa>
    return;
 8007990:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	08015a9c 	.word	0x08015a9c
 800799c:	08015b70 	.word	0x08015b70
 80079a0:	08015ae4 	.word	0x08015ae4
 80079a4:	20000500 	.word	0x20000500
 80079a8:	20000504 	.word	0x20000504
 80079ac:	08015b94 	.word	0x08015b94
 80079b0:	08015bb0 	.word	0x08015bb0
 80079b4:	08015bd8 	.word	0x08015bd8
 80079b8:	20000508 	.word	0x20000508

080079bc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80079c8:	887b      	ldrh	r3, [r7, #2]
 80079ca:	3303      	adds	r3, #3
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f023 0303 	bic.w	r3, r3, #3
 80079d2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80079d4:	8bfb      	ldrh	r3, [r7, #30]
 80079d6:	2b0b      	cmp	r3, #11
 80079d8:	d801      	bhi.n	80079de <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80079da:	230c      	movs	r3, #12
 80079dc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80079de:	8bfb      	ldrh	r3, [r7, #30]
 80079e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079e4:	d803      	bhi.n	80079ee <mem_trim+0x32>
 80079e6:	8bfa      	ldrh	r2, [r7, #30]
 80079e8:	887b      	ldrh	r3, [r7, #2]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d201      	bcs.n	80079f2 <mem_trim+0x36>
    return NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e0cc      	b.n	8007b8c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80079f2:	4b68      	ldr	r3, [pc, #416]	; (8007b94 <mem_trim+0x1d8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d304      	bcc.n	8007a06 <mem_trim+0x4a>
 80079fc:	4b66      	ldr	r3, [pc, #408]	; (8007b98 <mem_trim+0x1dc>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d306      	bcc.n	8007a14 <mem_trim+0x58>
 8007a06:	4b65      	ldr	r3, [pc, #404]	; (8007b9c <mem_trim+0x1e0>)
 8007a08:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007a0c:	4964      	ldr	r1, [pc, #400]	; (8007ba0 <mem_trim+0x1e4>)
 8007a0e:	4865      	ldr	r0, [pc, #404]	; (8007ba4 <mem_trim+0x1e8>)
 8007a10:	f00c fbcc 	bl	80141ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007a14:	4b5f      	ldr	r3, [pc, #380]	; (8007b94 <mem_trim+0x1d8>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d304      	bcc.n	8007a28 <mem_trim+0x6c>
 8007a1e:	4b5e      	ldr	r3, [pc, #376]	; (8007b98 <mem_trim+0x1dc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d301      	bcc.n	8007a2c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	e0af      	b.n	8007b8c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3b08      	subs	r3, #8
 8007a30:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007a32:	69b8      	ldr	r0, [r7, #24]
 8007a34:	f7ff fe2c 	bl	8007690 <mem_to_ptr>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	881a      	ldrh	r2, [r3, #0]
 8007a40:	8afb      	ldrh	r3, [r7, #22]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b08      	subs	r3, #8
 8007a48:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007a4a:	8bfa      	ldrh	r2, [r7, #30]
 8007a4c:	8abb      	ldrh	r3, [r7, #20]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d906      	bls.n	8007a60 <mem_trim+0xa4>
 8007a52:	4b52      	ldr	r3, [pc, #328]	; (8007b9c <mem_trim+0x1e0>)
 8007a54:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007a58:	4953      	ldr	r1, [pc, #332]	; (8007ba8 <mem_trim+0x1ec>)
 8007a5a:	4852      	ldr	r0, [pc, #328]	; (8007ba4 <mem_trim+0x1e8>)
 8007a5c:	f00c fba6 	bl	80141ac <iprintf>
  if (newsize > size) {
 8007a60:	8bfa      	ldrh	r2, [r7, #30]
 8007a62:	8abb      	ldrh	r3, [r7, #20]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d901      	bls.n	8007a6c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e08f      	b.n	8007b8c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007a6c:	8bfa      	ldrh	r2, [r7, #30]
 8007a6e:	8abb      	ldrh	r3, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d101      	bne.n	8007a78 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	e089      	b.n	8007b8c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff fdf5 	bl	800766c <ptr_to_mem>
 8007a82:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	791b      	ldrb	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d13f      	bne.n	8007b0c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007a94:	d106      	bne.n	8007aa4 <mem_trim+0xe8>
 8007a96:	4b41      	ldr	r3, [pc, #260]	; (8007b9c <mem_trim+0x1e0>)
 8007a98:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007a9c:	4943      	ldr	r1, [pc, #268]	; (8007bac <mem_trim+0x1f0>)
 8007a9e:	4841      	ldr	r0, [pc, #260]	; (8007ba4 <mem_trim+0x1e8>)
 8007aa0:	f00c fb84 	bl	80141ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007aaa:	8afa      	ldrh	r2, [r7, #22]
 8007aac:	8bfb      	ldrh	r3, [r7, #30]
 8007aae:	4413      	add	r3, r2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007ab6:	4b3e      	ldr	r3, [pc, #248]	; (8007bb0 <mem_trim+0x1f4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d106      	bne.n	8007ace <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007ac0:	89fb      	ldrh	r3, [r7, #14]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fdd2 	bl	800766c <ptr_to_mem>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	4a39      	ldr	r2, [pc, #228]	; (8007bb0 <mem_trim+0x1f4>)
 8007acc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007ace:	89fb      	ldrh	r3, [r7, #14]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fdcb 	bl	800766c <ptr_to_mem>
 8007ad6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2200      	movs	r2, #0
 8007adc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	89ba      	ldrh	r2, [r7, #12]
 8007ae2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	8afa      	ldrh	r2, [r7, #22]
 8007ae8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	89fa      	ldrh	r2, [r7, #14]
 8007aee:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007af8:	d047      	beq.n	8007b8a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fdb4 	bl	800766c <ptr_to_mem>
 8007b04:	4602      	mov	r2, r0
 8007b06:	89fb      	ldrh	r3, [r7, #14]
 8007b08:	8053      	strh	r3, [r2, #2]
 8007b0a:	e03e      	b.n	8007b8a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007b0c:	8bfb      	ldrh	r3, [r7, #30]
 8007b0e:	f103 0214 	add.w	r2, r3, #20
 8007b12:	8abb      	ldrh	r3, [r7, #20]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d838      	bhi.n	8007b8a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007b18:	8afa      	ldrh	r2, [r7, #22]
 8007b1a:	8bfb      	ldrh	r3, [r7, #30]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3308      	adds	r3, #8
 8007b22:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b2c:	d106      	bne.n	8007b3c <mem_trim+0x180>
 8007b2e:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <mem_trim+0x1e0>)
 8007b30:	f240 3216 	movw	r2, #790	; 0x316
 8007b34:	491d      	ldr	r1, [pc, #116]	; (8007bac <mem_trim+0x1f0>)
 8007b36:	481b      	ldr	r0, [pc, #108]	; (8007ba4 <mem_trim+0x1e8>)
 8007b38:	f00c fb38 	bl	80141ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007b3c:	89fb      	ldrh	r3, [r7, #14]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fd94 	bl	800766c <ptr_to_mem>
 8007b44:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007b46:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <mem_trim+0x1f4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d202      	bcs.n	8007b56 <mem_trim+0x19a>
      lfree = mem2;
 8007b50:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <mem_trim+0x1f4>)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	881a      	ldrh	r2, [r3, #0]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	8afa      	ldrh	r2, [r7, #22]
 8007b68:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	89fa      	ldrh	r2, [r7, #14]
 8007b6e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b78:	d007      	beq.n	8007b8a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff fd74 	bl	800766c <ptr_to_mem>
 8007b84:	4602      	mov	r2, r0
 8007b86:	89fb      	ldrh	r3, [r7, #14]
 8007b88:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007b8a:	687b      	ldr	r3, [r7, #4]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3720      	adds	r7, #32
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000500 	.word	0x20000500
 8007b98:	20000504 	.word	0x20000504
 8007b9c:	08015a9c 	.word	0x08015a9c
 8007ba0:	08015c0c 	.word	0x08015c0c
 8007ba4:	08015ae4 	.word	0x08015ae4
 8007ba8:	08015c24 	.word	0x08015c24
 8007bac:	08015c44 	.word	0x08015c44
 8007bb0:	20000508 	.word	0x20000508

08007bb4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <mem_malloc+0x14>
    return NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e0d9      	b.n	8007d7c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	3303      	adds	r3, #3
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007bd4:	8bbb      	ldrh	r3, [r7, #28]
 8007bd6:	2b0b      	cmp	r3, #11
 8007bd8:	d801      	bhi.n	8007bde <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007bda:	230c      	movs	r3, #12
 8007bdc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007bde:	8bbb      	ldrh	r3, [r7, #28]
 8007be0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007be4:	d803      	bhi.n	8007bee <mem_malloc+0x3a>
 8007be6:	8bba      	ldrh	r2, [r7, #28]
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d201      	bcs.n	8007bf2 <mem_malloc+0x3e>
    return NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e0c4      	b.n	8007d7c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007bf2:	4b64      	ldr	r3, [pc, #400]	; (8007d84 <mem_malloc+0x1d0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff fd4a 	bl	8007690 <mem_to_ptr>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	83fb      	strh	r3, [r7, #30]
 8007c00:	e0b4      	b.n	8007d6c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007c02:	8bfb      	ldrh	r3, [r7, #30]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff fd31 	bl	800766c <ptr_to_mem>
 8007c0a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	791b      	ldrb	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 80a4 	bne.w	8007d5e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	8bfb      	ldrh	r3, [r7, #30]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	f1a3 0208 	sub.w	r2, r3, #8
 8007c24:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007c26:	429a      	cmp	r2, r3
 8007c28:	f0c0 8099 	bcc.w	8007d5e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	8bfb      	ldrh	r3, [r7, #30]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f1a3 0208 	sub.w	r2, r3, #8
 8007c3a:	8bbb      	ldrh	r3, [r7, #28]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d333      	bcc.n	8007caa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007c42:	8bfa      	ldrh	r2, [r7, #30]
 8007c44:	8bbb      	ldrh	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007c4e:	8a7b      	ldrh	r3, [r7, #18]
 8007c50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c54:	d106      	bne.n	8007c64 <mem_malloc+0xb0>
 8007c56:	4b4c      	ldr	r3, [pc, #304]	; (8007d88 <mem_malloc+0x1d4>)
 8007c58:	f240 3287 	movw	r2, #903	; 0x387
 8007c5c:	494b      	ldr	r1, [pc, #300]	; (8007d8c <mem_malloc+0x1d8>)
 8007c5e:	484c      	ldr	r0, [pc, #304]	; (8007d90 <mem_malloc+0x1dc>)
 8007c60:	f00c faa4 	bl	80141ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007c64:	8a7b      	ldrh	r3, [r7, #18]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fd00 	bl	800766c <ptr_to_mem>
 8007c6c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	881a      	ldrh	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8bfa      	ldrh	r2, [r7, #30]
 8007c80:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	8a7a      	ldrh	r2, [r7, #18]
 8007c86:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c96:	d00b      	beq.n	8007cb0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fce5 	bl	800766c <ptr_to_mem>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	8a7b      	ldrh	r3, [r7, #18]
 8007ca6:	8053      	strh	r3, [r2, #2]
 8007ca8:	e002      	b.n	8007cb0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2201      	movs	r2, #1
 8007cae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007cb0:	4b34      	ldr	r3, [pc, #208]	; (8007d84 <mem_malloc+0x1d0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d127      	bne.n	8007d0a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007cba:	4b32      	ldr	r3, [pc, #200]	; (8007d84 <mem_malloc+0x1d0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007cc0:	e005      	b.n	8007cce <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fcd0 	bl	800766c <ptr_to_mem>
 8007ccc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	791b      	ldrb	r3, [r3, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <mem_malloc+0x12c>
 8007cd6:	4b2f      	ldr	r3, [pc, #188]	; (8007d94 <mem_malloc+0x1e0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d1f0      	bne.n	8007cc2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007ce0:	4a28      	ldr	r2, [pc, #160]	; (8007d84 <mem_malloc+0x1d0>)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007ce6:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <mem_malloc+0x1d0>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b2a      	ldr	r3, [pc, #168]	; (8007d94 <mem_malloc+0x1e0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d00b      	beq.n	8007d0a <mem_malloc+0x156>
 8007cf2:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <mem_malloc+0x1d0>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	791b      	ldrb	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <mem_malloc+0x156>
 8007cfc:	4b22      	ldr	r3, [pc, #136]	; (8007d88 <mem_malloc+0x1d4>)
 8007cfe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007d02:	4925      	ldr	r1, [pc, #148]	; (8007d98 <mem_malloc+0x1e4>)
 8007d04:	4822      	ldr	r0, [pc, #136]	; (8007d90 <mem_malloc+0x1dc>)
 8007d06:	f00c fa51 	bl	80141ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007d0a:	8bba      	ldrh	r2, [r7, #28]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	4413      	add	r3, r2
 8007d10:	3308      	adds	r3, #8
 8007d12:	4a20      	ldr	r2, [pc, #128]	; (8007d94 <mem_malloc+0x1e0>)
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d906      	bls.n	8007d28 <mem_malloc+0x174>
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <mem_malloc+0x1d4>)
 8007d1c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007d20:	491e      	ldr	r1, [pc, #120]	; (8007d9c <mem_malloc+0x1e8>)
 8007d22:	481b      	ldr	r0, [pc, #108]	; (8007d90 <mem_malloc+0x1dc>)
 8007d24:	f00c fa42 	bl	80141ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d006      	beq.n	8007d40 <mem_malloc+0x18c>
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <mem_malloc+0x1d4>)
 8007d34:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007d38:	4919      	ldr	r1, [pc, #100]	; (8007da0 <mem_malloc+0x1ec>)
 8007d3a:	4815      	ldr	r0, [pc, #84]	; (8007d90 <mem_malloc+0x1dc>)
 8007d3c:	f00c fa36 	bl	80141ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d006      	beq.n	8007d58 <mem_malloc+0x1a4>
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <mem_malloc+0x1d4>)
 8007d4c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007d50:	4914      	ldr	r1, [pc, #80]	; (8007da4 <mem_malloc+0x1f0>)
 8007d52:	480f      	ldr	r0, [pc, #60]	; (8007d90 <mem_malloc+0x1dc>)
 8007d54:	f00c fa2a 	bl	80141ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	e00e      	b.n	8007d7c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007d5e:	8bfb      	ldrh	r3, [r7, #30]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fc83 	bl	800766c <ptr_to_mem>
 8007d66:	4603      	mov	r3, r0
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d6c:	8bfa      	ldrh	r2, [r7, #30]
 8007d6e:	8bbb      	ldrh	r3, [r7, #28]
 8007d70:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007d74:	429a      	cmp	r2, r3
 8007d76:	f4ff af44 	bcc.w	8007c02 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20000508 	.word	0x20000508
 8007d88:	08015a9c 	.word	0x08015a9c
 8007d8c:	08015c44 	.word	0x08015c44
 8007d90:	08015ae4 	.word	0x08015ae4
 8007d94:	20000504 	.word	0x20000504
 8007d98:	08015c58 	.word	0x08015c58
 8007d9c:	08015c74 	.word	0x08015c74
 8007da0:	08015ca4 	.word	0x08015ca4
 8007da4:	08015cd4 	.word	0x08015cd4

08007da8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	3303      	adds	r3, #3
 8007dbe:	f023 0303 	bic.w	r3, r3, #3
 8007dc2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e011      	b.n	8007dee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4413      	add	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	885b      	ldrh	r3, [r3, #2]
 8007df2:	461a      	mov	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4293      	cmp	r3, r2
 8007df8:	dbe7      	blt.n	8007dca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007dfa:	bf00      	nop
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e0e:	2300      	movs	r3, #0
 8007e10:	80fb      	strh	r3, [r7, #6]
 8007e12:	e009      	b.n	8007e28 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <memp_init+0x30>)
 8007e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff ffc3 	bl	8007da8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	3301      	adds	r3, #1
 8007e26:	80fb      	strh	r3, [r7, #6]
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	d9f2      	bls.n	8007e14 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	080419f0 	.word	0x080419f0

08007e3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d012      	beq.n	8007e78 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d006      	beq.n	8007e74 <do_memp_malloc_pool+0x38>
 8007e66:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <do_memp_malloc_pool+0x48>)
 8007e68:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007e6c:	4906      	ldr	r1, [pc, #24]	; (8007e88 <do_memp_malloc_pool+0x4c>)
 8007e6e:	4807      	ldr	r0, [pc, #28]	; (8007e8c <do_memp_malloc_pool+0x50>)
 8007e70:	f00c f99c 	bl	80141ac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	e000      	b.n	8007e7a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	08015cf8 	.word	0x08015cf8
 8007e88:	08015d28 	.word	0x08015d28
 8007e8c:	08015d4c 	.word	0x08015d4c

08007e90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d908      	bls.n	8007eb2 <memp_malloc+0x22>
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <memp_malloc+0x3c>)
 8007ea2:	f240 1257 	movw	r2, #343	; 0x157
 8007ea6:	490a      	ldr	r1, [pc, #40]	; (8007ed0 <memp_malloc+0x40>)
 8007ea8:	480a      	ldr	r0, [pc, #40]	; (8007ed4 <memp_malloc+0x44>)
 8007eaa:	f00c f97f 	bl	80141ac <iprintf>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e008      	b.n	8007ec4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	4a08      	ldr	r2, [pc, #32]	; (8007ed8 <memp_malloc+0x48>)
 8007eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff ffbe 	bl	8007e3c <do_memp_malloc_pool>
 8007ec0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	08015cf8 	.word	0x08015cf8
 8007ed0:	08015d88 	.word	0x08015d88
 8007ed4:	08015d4c 	.word	0x08015d4c
 8007ed8:	080419f0 	.word	0x080419f0

08007edc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <do_memp_free_pool+0x22>
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <do_memp_free_pool+0x40>)
 8007ef2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007ef6:	490a      	ldr	r1, [pc, #40]	; (8007f20 <do_memp_free_pool+0x44>)
 8007ef8:	480a      	ldr	r0, [pc, #40]	; (8007f24 <do_memp_free_pool+0x48>)
 8007efa:	f00c f957 	bl	80141ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	08015cf8 	.word	0x08015cf8
 8007f20:	08015da8 	.word	0x08015da8
 8007f24:	08015d4c 	.word	0x08015d4c

08007f28 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	6039      	str	r1, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d907      	bls.n	8007f4a <memp_free+0x22>
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <memp_free+0x44>)
 8007f3c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007f40:	490b      	ldr	r1, [pc, #44]	; (8007f70 <memp_free+0x48>)
 8007f42:	480c      	ldr	r0, [pc, #48]	; (8007f74 <memp_free+0x4c>)
 8007f44:	f00c f932 	bl	80141ac <iprintf>
 8007f48:	e00c      	b.n	8007f64 <memp_free+0x3c>

  if (mem == NULL) {
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d008      	beq.n	8007f62 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <memp_free+0x50>)
 8007f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff ffbe 	bl	8007edc <do_memp_free_pool>
 8007f60:	e000      	b.n	8007f64 <memp_free+0x3c>
    return;
 8007f62:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08015cf8 	.word	0x08015cf8
 8007f70:	08015dc8 	.word	0x08015dc8
 8007f74:	08015d4c 	.word	0x08015d4c
 8007f78:	080419f0 	.word	0x080419f0

08007f7c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007f80:	bf00      	nop
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
	...

08007f8c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d108      	bne.n	8007fb2 <netif_add+0x26>
 8007fa0:	4b5b      	ldr	r3, [pc, #364]	; (8008110 <netif_add+0x184>)
 8007fa2:	f240 1227 	movw	r2, #295	; 0x127
 8007fa6:	495b      	ldr	r1, [pc, #364]	; (8008114 <netif_add+0x188>)
 8007fa8:	485b      	ldr	r0, [pc, #364]	; (8008118 <netif_add+0x18c>)
 8007faa:	f00c f8ff 	bl	80141ac <iprintf>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e0a9      	b.n	8008106 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d108      	bne.n	8007fca <netif_add+0x3e>
 8007fb8:	4b55      	ldr	r3, [pc, #340]	; (8008110 <netif_add+0x184>)
 8007fba:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007fbe:	4957      	ldr	r1, [pc, #348]	; (800811c <netif_add+0x190>)
 8007fc0:	4855      	ldr	r0, [pc, #340]	; (8008118 <netif_add+0x18c>)
 8007fc2:	f00c f8f3 	bl	80141ac <iprintf>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e09d      	b.n	8008106 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007fd0:	4b53      	ldr	r3, [pc, #332]	; (8008120 <netif_add+0x194>)
 8007fd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007fda:	4b51      	ldr	r3, [pc, #324]	; (8008120 <netif_add+0x194>)
 8007fdc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007fe4:	4b4e      	ldr	r3, [pc, #312]	; (8008120 <netif_add+0x194>)
 8007fe6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4a49      	ldr	r2, [pc, #292]	; (8008124 <netif_add+0x198>)
 8007ffe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3324      	adds	r3, #36	; 0x24
 8008012:	2204      	movs	r2, #4
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f00c f8c0 	bl	801419c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a3a      	ldr	r2, [r7, #32]
 8008026:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008028:	4b3f      	ldr	r3, [pc, #252]	; (8008128 <netif_add+0x19c>)
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008036:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f914 	bl	800826c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <netif_add+0xc8>
    return NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	e058      	b.n	8008106 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800805a:	2bff      	cmp	r3, #255	; 0xff
 800805c:	d103      	bne.n	8008066 <netif_add+0xda>
        netif->num = 0;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800806a:	4b30      	ldr	r3, [pc, #192]	; (800812c <netif_add+0x1a0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	e02b      	b.n	80080ca <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	429a      	cmp	r2, r3
 8008078:	d106      	bne.n	8008088 <netif_add+0xfc>
 800807a:	4b25      	ldr	r3, [pc, #148]	; (8008110 <netif_add+0x184>)
 800807c:	f240 128b 	movw	r2, #395	; 0x18b
 8008080:	492b      	ldr	r1, [pc, #172]	; (8008130 <netif_add+0x1a4>)
 8008082:	4825      	ldr	r0, [pc, #148]	; (8008118 <netif_add+0x18c>)
 8008084:	f00c f892 	bl	80141ac <iprintf>
        num_netifs++;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	3301      	adds	r3, #1
 800808c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2bff      	cmp	r3, #255	; 0xff
 8008092:	dd06      	ble.n	80080a2 <netif_add+0x116>
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <netif_add+0x184>)
 8008096:	f240 128d 	movw	r2, #397	; 0x18d
 800809a:	4926      	ldr	r1, [pc, #152]	; (8008134 <netif_add+0x1a8>)
 800809c:	481e      	ldr	r0, [pc, #120]	; (8008118 <netif_add+0x18c>)
 800809e:	f00c f885 	bl	80141ac <iprintf>
        if (netif2->num == netif->num) {
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d108      	bne.n	80080c4 <netif_add+0x138>
          netif->num++;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080b8:	3301      	adds	r3, #1
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80080c2:	e005      	b.n	80080d0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1d0      	bne.n	8008072 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1be      	bne.n	8008054 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080dc:	2bfe      	cmp	r3, #254	; 0xfe
 80080de:	d103      	bne.n	80080e8 <netif_add+0x15c>
    netif_num = 0;
 80080e0:	4b11      	ldr	r3, [pc, #68]	; (8008128 <netif_add+0x19c>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e006      	b.n	80080f6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080ee:	3301      	adds	r3, #1
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <netif_add+0x19c>)
 80080f4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <netif_add+0x1a0>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80080fe:	4a0b      	ldr	r2, [pc, #44]	; (800812c <netif_add+0x1a0>)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008104:	68fb      	ldr	r3, [r7, #12]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	08015de4 	.word	0x08015de4
 8008114:	08015e78 	.word	0x08015e78
 8008118:	08015e34 	.word	0x08015e34
 800811c:	08015e94 	.word	0x08015e94
 8008120:	08041a64 	.word	0x08041a64
 8008124:	0800847f 	.word	0x0800847f
 8008128:	20000530 	.word	0x20000530
 800812c:	20006e40 	.word	0x20006e40
 8008130:	08015eb8 	.word	0x08015eb8
 8008134:	08015ecc 	.word	0x08015ecc

08008138 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f002 fd95 	bl	800ac74 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f007 fdcf 	bl	800fcf0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <netif_do_set_ipaddr+0x20>
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <netif_do_set_ipaddr+0x88>)
 8008170:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008174:	491c      	ldr	r1, [pc, #112]	; (80081e8 <netif_do_set_ipaddr+0x8c>)
 8008176:	481d      	ldr	r0, [pc, #116]	; (80081ec <netif_do_set_ipaddr+0x90>)
 8008178:	f00c f818 	bl	80141ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <netif_do_set_ipaddr+0x34>
 8008182:	4b18      	ldr	r3, [pc, #96]	; (80081e4 <netif_do_set_ipaddr+0x88>)
 8008184:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008188:	4917      	ldr	r1, [pc, #92]	; (80081e8 <netif_do_set_ipaddr+0x8c>)
 800818a:	4818      	ldr	r0, [pc, #96]	; (80081ec <netif_do_set_ipaddr+0x90>)
 800818c:	f00c f80e 	bl	80141ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3304      	adds	r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d01c      	beq.n	80081d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3304      	adds	r3, #4
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80081ae:	f107 0314 	add.w	r3, r7, #20
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff ffbf 	bl	8008138 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <netif_do_set_ipaddr+0x6a>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	e000      	b.n	80081c8 <netif_do_set_ipaddr+0x6c>
 80081c6:	2300      	movs	r3, #0
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80081cc:	2101      	movs	r1, #1
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f8d2 	bl	8008378 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	08015de4 	.word	0x08015de4
 80081e8:	08015efc 	.word	0x08015efc
 80081ec:	08015e34 	.word	0x08015e34

080081f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3308      	adds	r3, #8
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d00a      	beq.n	8008220 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <netif_do_set_netmask+0x26>
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	e000      	b.n	8008218 <netif_do_set_netmask+0x28>
 8008216:	2300      	movs	r3, #0
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	330c      	adds	r3, #12
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d00a      	beq.n	800825e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <netif_do_set_gw+0x26>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	e000      	b.n	8008256 <netif_do_set_gw+0x28>
 8008254:	2300      	movs	r3, #0
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d101      	bne.n	800828c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008288:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <netif_set_addr+0x90>)
 800828a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008292:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <netif_set_addr+0x90>)
 8008294:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800829c:	4b17      	ldr	r3, [pc, #92]	; (80082fc <netif_set_addr+0x90>)
 800829e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <netif_set_addr+0x42>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <netif_set_addr+0x46>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <netif_set_addr+0x48>
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d006      	beq.n	80082ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80082bc:	f107 0310 	add.w	r3, r7, #16
 80082c0:	461a      	mov	r2, r3
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff ff49 	bl	800815c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7ff ff8e 	bl	80081f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ffa8 	bl	800822e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80082e4:	f107 0310 	add.w	r3, r7, #16
 80082e8:	461a      	mov	r2, r3
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff ff35 	bl	800815c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80082f2:	bf00      	nop
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	08041a64 	.word	0x08041a64

08008300 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008308:	4a04      	ldr	r2, [pc, #16]	; (800831c <netif_set_default+0x1c>)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20006e44 	.word	0x20006e44

08008320 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d107      	bne.n	800833e <netif_set_up+0x1e>
 800832e:	4b0f      	ldr	r3, [pc, #60]	; (800836c <netif_set_up+0x4c>)
 8008330:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008334:	490e      	ldr	r1, [pc, #56]	; (8008370 <netif_set_up+0x50>)
 8008336:	480f      	ldr	r0, [pc, #60]	; (8008374 <netif_set_up+0x54>)
 8008338:	f00b ff38 	bl	80141ac <iprintf>
 800833c:	e013      	b.n	8008366 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10c      	bne.n	8008366 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800835e:	2103      	movs	r1, #3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f809 	bl	8008378 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	08015de4 	.word	0x08015de4
 8008370:	08015f6c 	.word	0x08015f6c
 8008374:	08015e34 	.word	0x08015e34

08008378 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <netif_issue_reports+0x20>
 800838a:	4b18      	ldr	r3, [pc, #96]	; (80083ec <netif_issue_reports+0x74>)
 800838c:	f240 326d 	movw	r2, #877	; 0x36d
 8008390:	4917      	ldr	r1, [pc, #92]	; (80083f0 <netif_issue_reports+0x78>)
 8008392:	4818      	ldr	r0, [pc, #96]	; (80083f4 <netif_issue_reports+0x7c>)
 8008394:	f00b ff0a 	bl	80141ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01e      	beq.n	80083e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d017      	beq.n	80083e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d013      	beq.n	80083e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3304      	adds	r3, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00e      	beq.n	80083e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083ce:	f003 0308 	and.w	r3, r3, #8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3304      	adds	r3, #4
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f00a fa4d 	bl	801287c <etharp_request>
 80083e2:	e000      	b.n	80083e6 <netif_issue_reports+0x6e>
    return;
 80083e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	08015de4 	.word	0x08015de4
 80083f0:	08015f88 	.word	0x08015f88
 80083f4:	08015e34 	.word	0x08015e34

080083f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d107      	bne.n	8008416 <netif_set_down+0x1e>
 8008406:	4b12      	ldr	r3, [pc, #72]	; (8008450 <netif_set_down+0x58>)
 8008408:	f240 329b 	movw	r2, #923	; 0x39b
 800840c:	4911      	ldr	r1, [pc, #68]	; (8008454 <netif_set_down+0x5c>)
 800840e:	4812      	ldr	r0, [pc, #72]	; (8008458 <netif_set_down+0x60>)
 8008410:	f00b fecc 	bl	80141ac <iprintf>
 8008414:	e019      	b.n	800844a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d012      	beq.n	800844a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800842a:	f023 0301 	bic.w	r3, r3, #1
 800842e:	b2da      	uxtb	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f009 fdd3 	bl	8011ff0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	08015de4 	.word	0x08015de4
 8008454:	08015fac 	.word	0x08015fac
 8008458:	08015e34 	.word	0x08015e34

0800845c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	61da      	str	r2, [r3, #28]
  }
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800848a:	f06f 030b 	mvn.w	r3, #11
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d013      	beq.n	80084d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80084ac:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <netif_get_by_index+0x48>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e00c      	b.n	80084ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084ba:	3301      	adds	r3, #1
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	79fa      	ldrb	r2, [r7, #7]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d101      	bne.n	80084c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	e006      	b.n	80084d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1ef      	bne.n	80084b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20006e40 	.word	0x20006e40

080084e8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <pbuf_free_ooseq+0x38>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80084f4:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <pbuf_free_ooseq+0x3c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	607b      	str	r3, [r7, #4]
 80084fa:	e00a      	b.n	8008512 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f002 fbf3 	bl	800acf0 <tcp_free_ooseq>
      return;
 800850a:	e005      	b.n	8008518 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1f1      	bne.n	80084fc <pbuf_free_ooseq+0x14>
    }
  }
}
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20006e48 	.word	0x20006e48
 8008524:	20006e50 	.word	0x20006e50

08008528 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800852c:	4b03      	ldr	r3, [pc, #12]	; (800853c <pbuf_pool_is_empty+0x14>)
 800852e:	2201      	movs	r2, #1
 8008530:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008532:	bf00      	nop
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20006e48 	.word	0x20006e48

08008540 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4611      	mov	r1, r2
 800854c:	461a      	mov	r2, r3
 800854e:	460b      	mov	r3, r1
 8008550:	80fb      	strh	r3, [r7, #6]
 8008552:	4613      	mov	r3, r2
 8008554:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	88fa      	ldrh	r2, [r7, #6]
 8008566:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	88ba      	ldrh	r2, [r7, #4]
 800856c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800856e:	8b3b      	ldrh	r3, [r7, #24]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	7f3a      	ldrb	r2, [r7, #28]
 800857a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	73da      	strb	r2, [r3, #15]
}
 8008588:	bf00      	nop
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08c      	sub	sp, #48	; 0x30
 8008598:	af02      	add	r7, sp, #8
 800859a:	4603      	mov	r3, r0
 800859c:	71fb      	strb	r3, [r7, #7]
 800859e:	460b      	mov	r3, r1
 80085a0:	80bb      	strh	r3, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80085aa:	887b      	ldrh	r3, [r7, #2]
 80085ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80085b0:	d07f      	beq.n	80086b2 <pbuf_alloc+0x11e>
 80085b2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80085b6:	f300 80c8 	bgt.w	800874a <pbuf_alloc+0x1b6>
 80085ba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80085be:	d010      	beq.n	80085e2 <pbuf_alloc+0x4e>
 80085c0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80085c4:	f300 80c1 	bgt.w	800874a <pbuf_alloc+0x1b6>
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d002      	beq.n	80085d2 <pbuf_alloc+0x3e>
 80085cc:	2b41      	cmp	r3, #65	; 0x41
 80085ce:	f040 80bc 	bne.w	800874a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80085d2:	887a      	ldrh	r2, [r7, #2]
 80085d4:	88bb      	ldrh	r3, [r7, #4]
 80085d6:	4619      	mov	r1, r3
 80085d8:	2000      	movs	r0, #0
 80085da:	f000 f8d1 	bl	8008780 <pbuf_alloc_reference>
 80085de:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80085e0:	e0bd      	b.n	800875e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80085ea:	88bb      	ldrh	r3, [r7, #4]
 80085ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80085ee:	2008      	movs	r0, #8
 80085f0:	f7ff fc4e 	bl	8007e90 <memp_malloc>
 80085f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d109      	bne.n	8008610 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80085fc:	f7ff ff94 	bl	8008528 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008608:	f000 faa8 	bl	8008b5c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	e0a7      	b.n	8008760 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008612:	3303      	adds	r3, #3
 8008614:	b29b      	uxth	r3, r3
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	b29b      	uxth	r3, r3
 800861c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008620:	b29b      	uxth	r3, r3
 8008622:	8b7a      	ldrh	r2, [r7, #26]
 8008624:	4293      	cmp	r3, r2
 8008626:	bf28      	it	cs
 8008628:	4613      	movcs	r3, r2
 800862a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800862c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800862e:	3310      	adds	r3, #16
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4413      	add	r3, r2
 8008634:	3303      	adds	r3, #3
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	4618      	mov	r0, r3
 800863c:	89f9      	ldrh	r1, [r7, #14]
 800863e:	8b7a      	ldrh	r2, [r7, #26]
 8008640:	2300      	movs	r3, #0
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	887b      	ldrh	r3, [r7, #2]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	460b      	mov	r3, r1
 800864a:	4601      	mov	r1, r0
 800864c:	6938      	ldr	r0, [r7, #16]
 800864e:	f7ff ff77 	bl	8008540 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d006      	beq.n	800866c <pbuf_alloc+0xd8>
 800865e:	4b42      	ldr	r3, [pc, #264]	; (8008768 <pbuf_alloc+0x1d4>)
 8008660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008664:	4941      	ldr	r1, [pc, #260]	; (800876c <pbuf_alloc+0x1d8>)
 8008666:	4842      	ldr	r0, [pc, #264]	; (8008770 <pbuf_alloc+0x1dc>)
 8008668:	f00b fda0 	bl	80141ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800866c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800866e:	3303      	adds	r3, #3
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008678:	d106      	bne.n	8008688 <pbuf_alloc+0xf4>
 800867a:	4b3b      	ldr	r3, [pc, #236]	; (8008768 <pbuf_alloc+0x1d4>)
 800867c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008680:	493c      	ldr	r1, [pc, #240]	; (8008774 <pbuf_alloc+0x1e0>)
 8008682:	483b      	ldr	r0, [pc, #236]	; (8008770 <pbuf_alloc+0x1dc>)
 8008684:	f00b fd92 	bl	80141ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
 8008692:	e002      	b.n	800869a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800869e:	8b7a      	ldrh	r2, [r7, #26]
 80086a0:	89fb      	ldrh	r3, [r7, #14]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80086aa:	8b7b      	ldrh	r3, [r7, #26]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d19e      	bne.n	80085ee <pbuf_alloc+0x5a>
      break;
 80086b0:	e055      	b.n	800875e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80086b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086b4:	3303      	adds	r3, #3
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	f023 0303 	bic.w	r3, r3, #3
 80086bc:	b29a      	uxth	r2, r3
 80086be:	88bb      	ldrh	r3, [r7, #4]
 80086c0:	3303      	adds	r3, #3
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4413      	add	r3, r2
 80086cc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80086ce:	8b3b      	ldrh	r3, [r7, #24]
 80086d0:	3310      	adds	r3, #16
 80086d2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80086d4:	8b3a      	ldrh	r2, [r7, #24]
 80086d6:	88bb      	ldrh	r3, [r7, #4]
 80086d8:	3303      	adds	r3, #3
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	429a      	cmp	r2, r3
 80086e0:	d306      	bcc.n	80086f0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80086e2:	8afa      	ldrh	r2, [r7, #22]
 80086e4:	88bb      	ldrh	r3, [r7, #4]
 80086e6:	3303      	adds	r3, #3
 80086e8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d201      	bcs.n	80086f4 <pbuf_alloc+0x160>
        return NULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	e035      	b.n	8008760 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80086f4:	8afb      	ldrh	r3, [r7, #22]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fa5c 	bl	8007bb4 <mem_malloc>
 80086fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <pbuf_alloc+0x174>
        return NULL;
 8008704:	2300      	movs	r3, #0
 8008706:	e02b      	b.n	8008760 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800870a:	3310      	adds	r3, #16
 800870c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870e:	4413      	add	r3, r2
 8008710:	3303      	adds	r3, #3
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	4618      	mov	r0, r3
 8008718:	88b9      	ldrh	r1, [r7, #4]
 800871a:	88ba      	ldrh	r2, [r7, #4]
 800871c:	2300      	movs	r3, #0
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	887b      	ldrh	r3, [r7, #2]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	460b      	mov	r3, r1
 8008726:	4601      	mov	r1, r0
 8008728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800872a:	f7ff ff09 	bl	8008540 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d010      	beq.n	800875c <pbuf_alloc+0x1c8>
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <pbuf_alloc+0x1d4>)
 800873c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008740:	490d      	ldr	r1, [pc, #52]	; (8008778 <pbuf_alloc+0x1e4>)
 8008742:	480b      	ldr	r0, [pc, #44]	; (8008770 <pbuf_alloc+0x1dc>)
 8008744:	f00b fd32 	bl	80141ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008748:	e008      	b.n	800875c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <pbuf_alloc+0x1d4>)
 800874c:	f240 1227 	movw	r2, #295	; 0x127
 8008750:	490a      	ldr	r1, [pc, #40]	; (800877c <pbuf_alloc+0x1e8>)
 8008752:	4807      	ldr	r0, [pc, #28]	; (8008770 <pbuf_alloc+0x1dc>)
 8008754:	f00b fd2a 	bl	80141ac <iprintf>
      return NULL;
 8008758:	2300      	movs	r3, #0
 800875a:	e001      	b.n	8008760 <pbuf_alloc+0x1cc>
      break;
 800875c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008760:	4618      	mov	r0, r3
 8008762:	3728      	adds	r7, #40	; 0x28
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	08016014 	.word	0x08016014
 800876c:	08016044 	.word	0x08016044
 8008770:	08016074 	.word	0x08016074
 8008774:	0801609c 	.word	0x0801609c
 8008778:	080160d0 	.word	0x080160d0
 800877c:	080160fc 	.word	0x080160fc

08008780 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
 800878c:	4613      	mov	r3, r2
 800878e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008790:	883b      	ldrh	r3, [r7, #0]
 8008792:	2b41      	cmp	r3, #65	; 0x41
 8008794:	d009      	beq.n	80087aa <pbuf_alloc_reference+0x2a>
 8008796:	883b      	ldrh	r3, [r7, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d006      	beq.n	80087aa <pbuf_alloc_reference+0x2a>
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <pbuf_alloc_reference+0x5c>)
 800879e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80087a2:	490f      	ldr	r1, [pc, #60]	; (80087e0 <pbuf_alloc_reference+0x60>)
 80087a4:	480f      	ldr	r0, [pc, #60]	; (80087e4 <pbuf_alloc_reference+0x64>)
 80087a6:	f00b fd01 	bl	80141ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80087aa:	2007      	movs	r0, #7
 80087ac:	f7ff fb70 	bl	8007e90 <memp_malloc>
 80087b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	e00b      	b.n	80087d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80087bc:	8879      	ldrh	r1, [r7, #2]
 80087be:	887a      	ldrh	r2, [r7, #2]
 80087c0:	2300      	movs	r3, #0
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	883b      	ldrh	r3, [r7, #0]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	460b      	mov	r3, r1
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f7ff feb7 	bl	8008540 <pbuf_init_alloced_pbuf>
  return p;
 80087d2:	68fb      	ldr	r3, [r7, #12]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	08016014 	.word	0x08016014
 80087e0:	08016118 	.word	0x08016118
 80087e4:	08016074 	.word	0x08016074

080087e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]
 80087f4:	460b      	mov	r3, r1
 80087f6:	81bb      	strh	r3, [r7, #12]
 80087f8:	4613      	mov	r3, r2
 80087fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008800:	8a7b      	ldrh	r3, [r7, #18]
 8008802:	3303      	adds	r3, #3
 8008804:	f023 0203 	bic.w	r2, r3, #3
 8008808:	89bb      	ldrh	r3, [r7, #12]
 800880a:	441a      	add	r2, r3
 800880c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800880e:	429a      	cmp	r2, r3
 8008810:	d901      	bls.n	8008816 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	e018      	b.n	8008848 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800881c:	8a7b      	ldrh	r3, [r7, #18]
 800881e:	3303      	adds	r3, #3
 8008820:	f023 0303 	bic.w	r3, r3, #3
 8008824:	6a3a      	ldr	r2, [r7, #32]
 8008826:	4413      	add	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	e001      	b.n	8008830 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	89b9      	ldrh	r1, [r7, #12]
 8008834:	89ba      	ldrh	r2, [r7, #12]
 8008836:	2302      	movs	r3, #2
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	897b      	ldrh	r3, [r7, #10]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	460b      	mov	r3, r1
 8008840:	6979      	ldr	r1, [r7, #20]
 8008842:	f7ff fe7d 	bl	8008540 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008846:	687b      	ldr	r3, [r7, #4]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <pbuf_realloc+0x20>
 8008862:	4b3a      	ldr	r3, [pc, #232]	; (800894c <pbuf_realloc+0xfc>)
 8008864:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008868:	4939      	ldr	r1, [pc, #228]	; (8008950 <pbuf_realloc+0x100>)
 800886a:	483a      	ldr	r0, [pc, #232]	; (8008954 <pbuf_realloc+0x104>)
 800886c:	f00b fc9e 	bl	80141ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	891b      	ldrh	r3, [r3, #8]
 8008874:	887a      	ldrh	r2, [r7, #2]
 8008876:	429a      	cmp	r2, r3
 8008878:	d263      	bcs.n	8008942 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	891a      	ldrh	r2, [r3, #8]
 800887e:	887b      	ldrh	r3, [r7, #2]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008884:	887b      	ldrh	r3, [r7, #2]
 8008886:	817b      	strh	r3, [r7, #10]
  q = p;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800888c:	e018      	b.n	80088c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	895b      	ldrh	r3, [r3, #10]
 8008892:	897a      	ldrh	r2, [r7, #10]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	891a      	ldrh	r2, [r3, #8]
 800889c:	893b      	ldrh	r3, [r7, #8]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <pbuf_realloc+0x70>
 80088b2:	4b26      	ldr	r3, [pc, #152]	; (800894c <pbuf_realloc+0xfc>)
 80088b4:	f240 12af 	movw	r2, #431	; 0x1af
 80088b8:	4927      	ldr	r1, [pc, #156]	; (8008958 <pbuf_realloc+0x108>)
 80088ba:	4826      	ldr	r0, [pc, #152]	; (8008954 <pbuf_realloc+0x104>)
 80088bc:	f00b fc76 	bl	80141ac <iprintf>
  while (rem_len > q->len) {
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	895b      	ldrh	r3, [r3, #10]
 80088c4:	897a      	ldrh	r2, [r7, #10]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d8e1      	bhi.n	800888e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	7b1b      	ldrb	r3, [r3, #12]
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d121      	bne.n	800891a <pbuf_realloc+0xca>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	895b      	ldrh	r3, [r3, #10]
 80088da:	897a      	ldrh	r2, [r7, #10]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d01c      	beq.n	800891a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	7b5b      	ldrb	r3, [r3, #13]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d116      	bne.n	800891a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	897b      	ldrh	r3, [r7, #10]
 80088f8:	4413      	add	r3, r2
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff f85c 	bl	80079bc <mem_trim>
 8008904:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d106      	bne.n	800891a <pbuf_realloc+0xca>
 800890c:	4b0f      	ldr	r3, [pc, #60]	; (800894c <pbuf_realloc+0xfc>)
 800890e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008912:	4912      	ldr	r1, [pc, #72]	; (800895c <pbuf_realloc+0x10c>)
 8008914:	480f      	ldr	r0, [pc, #60]	; (8008954 <pbuf_realloc+0x104>)
 8008916:	f00b fc49 	bl	80141ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	897a      	ldrh	r2, [r7, #10]
 800891e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	895a      	ldrh	r2, [r3, #10]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f911 	bl	8008b5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	e000      	b.n	8008944 <pbuf_realloc+0xf4>
    return;
 8008942:	bf00      	nop

}
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	08016014 	.word	0x08016014
 8008950:	0801612c 	.word	0x0801612c
 8008954:	08016074 	.word	0x08016074
 8008958:	08016144 	.word	0x08016144
 800895c:	0801615c 	.word	0x0801615c

08008960 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d106      	bne.n	8008982 <pbuf_add_header_impl+0x22>
 8008974:	4b2b      	ldr	r3, [pc, #172]	; (8008a24 <pbuf_add_header_impl+0xc4>)
 8008976:	f240 12df 	movw	r2, #479	; 0x1df
 800897a:	492b      	ldr	r1, [pc, #172]	; (8008a28 <pbuf_add_header_impl+0xc8>)
 800897c:	482b      	ldr	r0, [pc, #172]	; (8008a2c <pbuf_add_header_impl+0xcc>)
 800897e:	f00b fc15 	bl	80141ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <pbuf_add_header_impl+0x30>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898e:	d301      	bcc.n	8008994 <pbuf_add_header_impl+0x34>
    return 1;
 8008990:	2301      	movs	r3, #1
 8008992:	e043      	b.n	8008a1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <pbuf_add_header_impl+0x3e>
    return 0;
 800899a:	2300      	movs	r3, #0
 800899c:	e03e      	b.n	8008a1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	891a      	ldrh	r2, [r3, #8]
 80089a6:	8a7b      	ldrh	r3, [r7, #18]
 80089a8:	4413      	add	r3, r2
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8a7a      	ldrh	r2, [r7, #18]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d901      	bls.n	80089b6 <pbuf_add_header_impl+0x56>
    return 1;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e032      	b.n	8008a1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	7b1b      	ldrb	r3, [r3, #12]
 80089ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80089bc:	8a3b      	ldrh	r3, [r7, #16]
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00c      	beq.n	80089e0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	425b      	negs	r3, r3
 80089ce:	4413      	add	r3, r2
 80089d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3310      	adds	r3, #16
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d20d      	bcs.n	80089f8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80089dc:	2301      	movs	r3, #1
 80089de:	e01d      	b.n	8008a1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d006      	beq.n	80089f4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	425b      	negs	r3, r3
 80089ee:	4413      	add	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	e001      	b.n	80089f8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e011      	b.n	8008a1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	895a      	ldrh	r2, [r3, #10]
 8008a02:	8a7b      	ldrh	r3, [r7, #18]
 8008a04:	4413      	add	r3, r2
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	891a      	ldrh	r2, [r3, #8]
 8008a10:	8a7b      	ldrh	r3, [r7, #18]
 8008a12:	4413      	add	r3, r2
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	811a      	strh	r2, [r3, #8]


  return 0;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	08016014 	.word	0x08016014
 8008a28:	08016178 	.word	0x08016178
 8008a2c:	08016074 	.word	0x08016074

08008a30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff ff8e 	bl	8008960 <pbuf_add_header_impl>
 8008a44:	4603      	mov	r3, r0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <pbuf_remove_header+0x1e>
 8008a60:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <pbuf_remove_header+0x94>)
 8008a62:	f240 224b 	movw	r2, #587	; 0x24b
 8008a66:	4920      	ldr	r1, [pc, #128]	; (8008ae8 <pbuf_remove_header+0x98>)
 8008a68:	4820      	ldr	r0, [pc, #128]	; (8008aec <pbuf_remove_header+0x9c>)
 8008a6a:	f00b fb9f 	bl	80141ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <pbuf_remove_header+0x2c>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a7a:	d301      	bcc.n	8008a80 <pbuf_remove_header+0x30>
    return 1;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e02c      	b.n	8008ada <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <pbuf_remove_header+0x3a>
    return 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e027      	b.n	8008ada <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	895b      	ldrh	r3, [r3, #10]
 8008a92:	89fa      	ldrh	r2, [r7, #14]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d908      	bls.n	8008aaa <pbuf_remove_header+0x5a>
 8008a98:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <pbuf_remove_header+0x94>)
 8008a9a:	f240 2255 	movw	r2, #597	; 0x255
 8008a9e:	4914      	ldr	r1, [pc, #80]	; (8008af0 <pbuf_remove_header+0xa0>)
 8008aa0:	4812      	ldr	r0, [pc, #72]	; (8008aec <pbuf_remove_header+0x9c>)
 8008aa2:	f00b fb83 	bl	80141ac <iprintf>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e017      	b.n	8008ada <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	441a      	add	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	895a      	ldrh	r2, [r3, #10]
 8008ac0:	89fb      	ldrh	r3, [r7, #14]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	891a      	ldrh	r2, [r3, #8]
 8008ace:	89fb      	ldrh	r3, [r7, #14]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	08016014 	.word	0x08016014
 8008ae8:	08016178 	.word	0x08016178
 8008aec:	08016074 	.word	0x08016074
 8008af0:	08016184 	.word	0x08016184

08008af4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	807b      	strh	r3, [r7, #2]
 8008b00:	4613      	mov	r3, r2
 8008b02:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da08      	bge.n	8008b1e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008b0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b10:	425b      	negs	r3, r3
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff ff9b 	bl	8008a50 <pbuf_remove_header>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	e007      	b.n	8008b2e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008b1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b22:	787a      	ldrb	r2, [r7, #1]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ff1a 	bl	8008960 <pbuf_add_header_impl>
 8008b2c:	4603      	mov	r3, r0
  }
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008b42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b46:	2201      	movs	r2, #1
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff ffd2 	bl	8008af4 <pbuf_header_impl>
 8008b50:	4603      	mov	r3, r0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <pbuf_free+0x22>
 8008b70:	4b38      	ldr	r3, [pc, #224]	; (8008c54 <pbuf_free+0xf8>)
 8008b72:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008b76:	4938      	ldr	r1, [pc, #224]	; (8008c58 <pbuf_free+0xfc>)
 8008b78:	4838      	ldr	r0, [pc, #224]	; (8008c5c <pbuf_free+0x100>)
 8008b7a:	f00b fb17 	bl	80141ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e063      	b.n	8008c4a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008b86:	e05c      	b.n	8008c42 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7b9b      	ldrb	r3, [r3, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <pbuf_free+0x42>
 8008b90:	4b30      	ldr	r3, [pc, #192]	; (8008c54 <pbuf_free+0xf8>)
 8008b92:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008b96:	4932      	ldr	r1, [pc, #200]	; (8008c60 <pbuf_free+0x104>)
 8008b98:	4830      	ldr	r0, [pc, #192]	; (8008c5c <pbuf_free+0x100>)
 8008b9a:	f00b fb07 	bl	80141ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7b9b      	ldrb	r3, [r3, #14]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	739a      	strb	r2, [r3, #14]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7b9b      	ldrb	r3, [r3, #14]
 8008bae:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008bb0:	7dbb      	ldrb	r3, [r7, #22]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d143      	bne.n	8008c3e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	7b1b      	ldrb	r3, [r3, #12]
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	7b5b      	ldrb	r3, [r3, #13]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d011      	beq.n	8008bf6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <pbuf_free+0x90>
 8008bde:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <pbuf_free+0xf8>)
 8008be0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008be4:	491f      	ldr	r1, [pc, #124]	; (8008c64 <pbuf_free+0x108>)
 8008be6:	481d      	ldr	r0, [pc, #116]	; (8008c5c <pbuf_free+0x100>)
 8008be8:	f00b fae0 	bl	80141ac <iprintf>
        pc->custom_free_function(p);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
 8008bf4:	e01d      	b.n	8008c32 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d104      	bne.n	8008c06 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	2008      	movs	r0, #8
 8008c00:	f7ff f992 	bl	8007f28 <memp_free>
 8008c04:	e015      	b.n	8008c32 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d104      	bne.n	8008c16 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	2007      	movs	r0, #7
 8008c10:	f7ff f98a 	bl	8007f28 <memp_free>
 8008c14:	e00d      	b.n	8008c32 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d103      	bne.n	8008c24 <pbuf_free+0xc8>
          mem_free(p);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fe fe63 	bl	80078e8 <mem_free>
 8008c22:	e006      	b.n	8008c32 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008c24:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <pbuf_free+0xf8>)
 8008c26:	f240 320f 	movw	r2, #783	; 0x30f
 8008c2a:	490f      	ldr	r1, [pc, #60]	; (8008c68 <pbuf_free+0x10c>)
 8008c2c:	480b      	ldr	r0, [pc, #44]	; (8008c5c <pbuf_free+0x100>)
 8008c2e:	f00b fabd 	bl	80141ac <iprintf>
        }
      }
      count++;
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	3301      	adds	r3, #1
 8008c36:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	e001      	b.n	8008c42 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d19f      	bne.n	8008b88 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	08016014 	.word	0x08016014
 8008c58:	08016178 	.word	0x08016178
 8008c5c:	08016074 	.word	0x08016074
 8008c60:	080161a4 	.word	0x080161a4
 8008c64:	080161bc 	.word	0x080161bc
 8008c68:	080161e0 	.word	0x080161e0

08008c6c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008c78:	e005      	b.n	8008c86 <pbuf_clen+0x1a>
    ++len;
 8008c7a:	89fb      	ldrh	r3, [r7, #14]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1f6      	bne.n	8008c7a <pbuf_clen+0xe>
  }
  return len;
 8008c8c:	89fb      	ldrh	r3, [r7, #14]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d010      	beq.n	8008ccc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	7b9b      	ldrb	r3, [r3, #14]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7b9b      	ldrb	r3, [r3, #14]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <pbuf_ref+0x30>
 8008cbe:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <pbuf_ref+0x38>)
 8008cc0:	f240 3242 	movw	r2, #834	; 0x342
 8008cc4:	4904      	ldr	r1, [pc, #16]	; (8008cd8 <pbuf_ref+0x3c>)
 8008cc6:	4805      	ldr	r0, [pc, #20]	; (8008cdc <pbuf_ref+0x40>)
 8008cc8:	f00b fa70 	bl	80141ac <iprintf>
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	08016014 	.word	0x08016014
 8008cd8:	080161f4 	.word	0x080161f4
 8008cdc:	08016074 	.word	0x08016074

08008ce0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <pbuf_cat+0x16>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d107      	bne.n	8008d06 <pbuf_cat+0x26>
 8008cf6:	4b20      	ldr	r3, [pc, #128]	; (8008d78 <pbuf_cat+0x98>)
 8008cf8:	f240 3259 	movw	r2, #857	; 0x359
 8008cfc:	491f      	ldr	r1, [pc, #124]	; (8008d7c <pbuf_cat+0x9c>)
 8008cfe:	4820      	ldr	r0, [pc, #128]	; (8008d80 <pbuf_cat+0xa0>)
 8008d00:	f00b fa54 	bl	80141ac <iprintf>
 8008d04:	e034      	b.n	8008d70 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	e00a      	b.n	8008d22 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	891a      	ldrh	r2, [r3, #8]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	891b      	ldrh	r3, [r3, #8]
 8008d14:	4413      	add	r3, r2
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1f0      	bne.n	8008d0c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	891a      	ldrh	r2, [r3, #8]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	895b      	ldrh	r3, [r3, #10]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d006      	beq.n	8008d44 <pbuf_cat+0x64>
 8008d36:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <pbuf_cat+0x98>)
 8008d38:	f240 3262 	movw	r2, #866	; 0x362
 8008d3c:	4911      	ldr	r1, [pc, #68]	; (8008d84 <pbuf_cat+0xa4>)
 8008d3e:	4810      	ldr	r0, [pc, #64]	; (8008d80 <pbuf_cat+0xa0>)
 8008d40:	f00b fa34 	bl	80141ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <pbuf_cat+0x7a>
 8008d4c:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <pbuf_cat+0x98>)
 8008d4e:	f240 3263 	movw	r2, #867	; 0x363
 8008d52:	490d      	ldr	r1, [pc, #52]	; (8008d88 <pbuf_cat+0xa8>)
 8008d54:	480a      	ldr	r0, [pc, #40]	; (8008d80 <pbuf_cat+0xa0>)
 8008d56:	f00b fa29 	bl	80141ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	891a      	ldrh	r2, [r3, #8]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	891b      	ldrh	r3, [r3, #8]
 8008d62:	4413      	add	r3, r2
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	08016014 	.word	0x08016014
 8008d7c:	08016208 	.word	0x08016208
 8008d80:	08016074 	.word	0x08016074
 8008d84:	08016240 	.word	0x08016240
 8008d88:	08016270 	.word	0x08016270

08008d8c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff ffa1 	bl	8008ce0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008d9e:	6838      	ldr	r0, [r7, #0]
 8008da0:	f7ff ff7c 	bl	8008c9c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d008      	beq.n	8008dd6 <pbuf_copy+0x2a>
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <pbuf_copy+0x2a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	891a      	ldrh	r2, [r3, #8]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	891b      	ldrh	r3, [r3, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d209      	bcs.n	8008dea <pbuf_copy+0x3e>
 8008dd6:	4b57      	ldr	r3, [pc, #348]	; (8008f34 <pbuf_copy+0x188>)
 8008dd8:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008ddc:	4956      	ldr	r1, [pc, #344]	; (8008f38 <pbuf_copy+0x18c>)
 8008dde:	4857      	ldr	r0, [pc, #348]	; (8008f3c <pbuf_copy+0x190>)
 8008de0:	f00b f9e4 	bl	80141ac <iprintf>
 8008de4:	f06f 030f 	mvn.w	r3, #15
 8008de8:	e09f      	b.n	8008f2a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	895b      	ldrh	r3, [r3, #10]
 8008dee:	461a      	mov	r2, r3
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	1ad2      	subs	r2, r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	895b      	ldrh	r3, [r3, #10]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1acb      	subs	r3, r1, r3
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d306      	bcc.n	8008e10 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	895b      	ldrh	r3, [r3, #10]
 8008e06:	461a      	mov	r2, r3
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	e005      	b.n	8008e1c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	895b      	ldrh	r3, [r3, #10]
 8008e14:	461a      	mov	r2, r3
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	18d0      	adds	r0, r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	f00b f98c 	bl	801414c <memcpy>
    offset_to += len;
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	895b      	ldrh	r3, [r3, #10]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d906      	bls.n	8008e5e <pbuf_copy+0xb2>
 8008e50:	4b38      	ldr	r3, [pc, #224]	; (8008f34 <pbuf_copy+0x188>)
 8008e52:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008e56:	493a      	ldr	r1, [pc, #232]	; (8008f40 <pbuf_copy+0x194>)
 8008e58:	4838      	ldr	r0, [pc, #224]	; (8008f3c <pbuf_copy+0x190>)
 8008e5a:	f00b f9a7 	bl	80141ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	895b      	ldrh	r3, [r3, #10]
 8008e62:	461a      	mov	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d906      	bls.n	8008e78 <pbuf_copy+0xcc>
 8008e6a:	4b32      	ldr	r3, [pc, #200]	; (8008f34 <pbuf_copy+0x188>)
 8008e6c:	f240 32da 	movw	r2, #986	; 0x3da
 8008e70:	4934      	ldr	r1, [pc, #208]	; (8008f44 <pbuf_copy+0x198>)
 8008e72:	4832      	ldr	r0, [pc, #200]	; (8008f3c <pbuf_copy+0x190>)
 8008e74:	f00b f99a 	bl	80141ac <iprintf>
    if (offset_from >= p_from->len) {
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	895b      	ldrh	r3, [r3, #10]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d304      	bcc.n	8008e8e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	895b      	ldrh	r3, [r3, #10]
 8008e92:	461a      	mov	r2, r3
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d114      	bne.n	8008ec4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10c      	bne.n	8008ec4 <pbuf_copy+0x118>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d009      	beq.n	8008ec4 <pbuf_copy+0x118>
 8008eb0:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <pbuf_copy+0x188>)
 8008eb2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008eb6:	4924      	ldr	r1, [pc, #144]	; (8008f48 <pbuf_copy+0x19c>)
 8008eb8:	4820      	ldr	r0, [pc, #128]	; (8008f3c <pbuf_copy+0x190>)
 8008eba:	f00b f977 	bl	80141ac <iprintf>
 8008ebe:	f06f 030f 	mvn.w	r3, #15
 8008ec2:	e032      	b.n	8008f2a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d013      	beq.n	8008ef2 <pbuf_copy+0x146>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	895a      	ldrh	r2, [r3, #10]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	891b      	ldrh	r3, [r3, #8]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d10d      	bne.n	8008ef2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <pbuf_copy+0x146>
 8008ede:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <pbuf_copy+0x188>)
 8008ee0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008ee4:	4919      	ldr	r1, [pc, #100]	; (8008f4c <pbuf_copy+0x1a0>)
 8008ee6:	4815      	ldr	r0, [pc, #84]	; (8008f3c <pbuf_copy+0x190>)
 8008ee8:	f00b f960 	bl	80141ac <iprintf>
 8008eec:	f06f 0305 	mvn.w	r3, #5
 8008ef0:	e01b      	b.n	8008f2a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d013      	beq.n	8008f20 <pbuf_copy+0x174>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	895a      	ldrh	r2, [r3, #10]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	891b      	ldrh	r3, [r3, #8]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d10d      	bne.n	8008f20 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d009      	beq.n	8008f20 <pbuf_copy+0x174>
 8008f0c:	4b09      	ldr	r3, [pc, #36]	; (8008f34 <pbuf_copy+0x188>)
 8008f0e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008f12:	490e      	ldr	r1, [pc, #56]	; (8008f4c <pbuf_copy+0x1a0>)
 8008f14:	4809      	ldr	r0, [pc, #36]	; (8008f3c <pbuf_copy+0x190>)
 8008f16:	f00b f949 	bl	80141ac <iprintf>
 8008f1a:	f06f 0305 	mvn.w	r3, #5
 8008f1e:	e004      	b.n	8008f2a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f47f af61 	bne.w	8008dea <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08016014 	.word	0x08016014
 8008f38:	080162bc 	.word	0x080162bc
 8008f3c:	08016074 	.word	0x08016074
 8008f40:	080162ec 	.word	0x080162ec
 8008f44:	08016304 	.word	0x08016304
 8008f48:	08016320 	.word	0x08016320
 8008f4c:	08016330 	.word	0x08016330

08008f50 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	460b      	mov	r3, r1
 8008f60:	80fb      	strh	r3, [r7, #6]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d108      	bne.n	8008f86 <pbuf_copy_partial+0x36>
 8008f74:	4b2b      	ldr	r3, [pc, #172]	; (8009024 <pbuf_copy_partial+0xd4>)
 8008f76:	f240 420a 	movw	r2, #1034	; 0x40a
 8008f7a:	492b      	ldr	r1, [pc, #172]	; (8009028 <pbuf_copy_partial+0xd8>)
 8008f7c:	482b      	ldr	r0, [pc, #172]	; (800902c <pbuf_copy_partial+0xdc>)
 8008f7e:	f00b f915 	bl	80141ac <iprintf>
 8008f82:	2300      	movs	r3, #0
 8008f84:	e04a      	b.n	800901c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d108      	bne.n	8008f9e <pbuf_copy_partial+0x4e>
 8008f8c:	4b25      	ldr	r3, [pc, #148]	; (8009024 <pbuf_copy_partial+0xd4>)
 8008f8e:	f240 420b 	movw	r2, #1035	; 0x40b
 8008f92:	4927      	ldr	r1, [pc, #156]	; (8009030 <pbuf_copy_partial+0xe0>)
 8008f94:	4825      	ldr	r0, [pc, #148]	; (800902c <pbuf_copy_partial+0xdc>)
 8008f96:	f00b f909 	bl	80141ac <iprintf>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e03e      	b.n	800901c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	61fb      	str	r3, [r7, #28]
 8008fa2:	e034      	b.n	800900e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008fa4:	88bb      	ldrh	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <pbuf_copy_partial+0x70>
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	895b      	ldrh	r3, [r3, #10]
 8008fae:	88ba      	ldrh	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d305      	bcc.n	8008fc0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	895b      	ldrh	r3, [r3, #10]
 8008fb8:	88ba      	ldrh	r2, [r7, #4]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	80bb      	strh	r3, [r7, #4]
 8008fbe:	e023      	b.n	8009008 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	895a      	ldrh	r2, [r3, #10]
 8008fc4:	88bb      	ldrh	r3, [r7, #4]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008fca:	8b3a      	ldrh	r2, [r7, #24]
 8008fcc:	88fb      	ldrh	r3, [r7, #6]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d901      	bls.n	8008fd6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008fd6:	8b7b      	ldrh	r3, [r7, #26]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	18d0      	adds	r0, r2, r3
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	88bb      	ldrh	r3, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	8b3a      	ldrh	r2, [r7, #24]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	f00b f8b0 	bl	801414c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008fec:	8afa      	ldrh	r2, [r7, #22]
 8008fee:	8b3b      	ldrh	r3, [r7, #24]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008ff4:	8b7a      	ldrh	r2, [r7, #26]
 8008ff6:	8b3b      	ldrh	r3, [r7, #24]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008ffc:	88fa      	ldrh	r2, [r7, #6]
 8008ffe:	8b3b      	ldrh	r3, [r7, #24]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	61fb      	str	r3, [r7, #28]
 800900e:	88fb      	ldrh	r3, [r7, #6]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <pbuf_copy_partial+0xca>
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1c4      	bne.n	8008fa4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800901a:	8afb      	ldrh	r3, [r7, #22]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3720      	adds	r7, #32
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	08016014 	.word	0x08016014
 8009028:	0801635c 	.word	0x0801635c
 800902c:	08016074 	.word	0x08016074
 8009030:	0801637c 	.word	0x0801637c

08009034 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	603a      	str	r2, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
 8009040:	460b      	mov	r3, r1
 8009042:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	8919      	ldrh	r1, [r3, #8]
 8009048:	88ba      	ldrh	r2, [r7, #4]
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff faa1 	bl	8008594 <pbuf_alloc>
 8009052:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <pbuf_clone+0x2a>
    return NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	e011      	b.n	8009082 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff fea3 	bl	8008dac <pbuf_copy>
 8009066:	4603      	mov	r3, r0
 8009068:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800906a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d006      	beq.n	8009080 <pbuf_clone+0x4c>
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <pbuf_clone+0x58>)
 8009074:	f240 5224 	movw	r2, #1316	; 0x524
 8009078:	4905      	ldr	r1, [pc, #20]	; (8009090 <pbuf_clone+0x5c>)
 800907a:	4806      	ldr	r0, [pc, #24]	; (8009094 <pbuf_clone+0x60>)
 800907c:	f00b f896 	bl	80141ac <iprintf>
  return q;
 8009080:	68fb      	ldr	r3, [r7, #12]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	08016014 	.word	0x08016014
 8009090:	08016488 	.word	0x08016488
 8009094:	08016074 	.word	0x08016074

08009098 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800909c:	f00b f914 	bl	80142c8 <rand>
 80090a0:	4603      	mov	r3, r0
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	4b01      	ldr	r3, [pc, #4]	; (80090b8 <tcp_init+0x20>)
 80090b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80090b4:	bf00      	nop
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20000016 	.word	0x20000016

080090bc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	7d1b      	ldrb	r3, [r3, #20]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d105      	bne.n	80090d8 <tcp_free+0x1c>
 80090cc:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <tcp_free+0x2c>)
 80090ce:	22d4      	movs	r2, #212	; 0xd4
 80090d0:	4906      	ldr	r1, [pc, #24]	; (80090ec <tcp_free+0x30>)
 80090d2:	4807      	ldr	r0, [pc, #28]	; (80090f0 <tcp_free+0x34>)
 80090d4:	f00b f86a 	bl	80141ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80090d8:	6879      	ldr	r1, [r7, #4]
 80090da:	2001      	movs	r0, #1
 80090dc:	f7fe ff24 	bl	8007f28 <memp_free>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	08016514 	.word	0x08016514
 80090ec:	08016544 	.word	0x08016544
 80090f0:	08016558 	.word	0x08016558

080090f4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7d1b      	ldrb	r3, [r3, #20]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d105      	bne.n	8009110 <tcp_free_listen+0x1c>
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <tcp_free_listen+0x2c>)
 8009106:	22df      	movs	r2, #223	; 0xdf
 8009108:	4906      	ldr	r1, [pc, #24]	; (8009124 <tcp_free_listen+0x30>)
 800910a:	4807      	ldr	r0, [pc, #28]	; (8009128 <tcp_free_listen+0x34>)
 800910c:	f00b f84e 	bl	80141ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	2002      	movs	r0, #2
 8009114:	f7fe ff08 	bl	8007f28 <memp_free>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	08016514 	.word	0x08016514
 8009124:	08016580 	.word	0x08016580
 8009128:	08016558 	.word	0x08016558

0800912c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009130:	f001 f85c 	bl	800a1ec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009134:	4b07      	ldr	r3, [pc, #28]	; (8009154 <tcp_tmr+0x28>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <tcp_tmr+0x28>)
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	4b04      	ldr	r3, [pc, #16]	; (8009154 <tcp_tmr+0x28>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800914c:	f000 fd0e 	bl	8009b6c <tcp_slowtmr>
  }
}
 8009150:	bf00      	nop
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20000531 	.word	0x20000531

08009158 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d105      	bne.n	8009174 <tcp_remove_listener+0x1c>
 8009168:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <tcp_remove_listener+0x48>)
 800916a:	22ff      	movs	r2, #255	; 0xff
 800916c:	490d      	ldr	r1, [pc, #52]	; (80091a4 <tcp_remove_listener+0x4c>)
 800916e:	480e      	ldr	r0, [pc, #56]	; (80091a8 <tcp_remove_listener+0x50>)
 8009170:	f00b f81c 	bl	80141ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e00a      	b.n	8009190 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d102      	bne.n	800918a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1f1      	bne.n	800917a <tcp_remove_listener+0x22>
    }
  }
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	08016514 	.word	0x08016514
 80091a4:	0801659c 	.word	0x0801659c
 80091a8:	08016558 	.word	0x08016558

080091ac <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <tcp_listen_closed+0x1c>
 80091ba:	4b14      	ldr	r3, [pc, #80]	; (800920c <tcp_listen_closed+0x60>)
 80091bc:	f240 1211 	movw	r2, #273	; 0x111
 80091c0:	4913      	ldr	r1, [pc, #76]	; (8009210 <tcp_listen_closed+0x64>)
 80091c2:	4814      	ldr	r0, [pc, #80]	; (8009214 <tcp_listen_closed+0x68>)
 80091c4:	f00a fff2 	bl	80141ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	7d1b      	ldrb	r3, [r3, #20]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d006      	beq.n	80091de <tcp_listen_closed+0x32>
 80091d0:	4b0e      	ldr	r3, [pc, #56]	; (800920c <tcp_listen_closed+0x60>)
 80091d2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80091d6:	4910      	ldr	r1, [pc, #64]	; (8009218 <tcp_listen_closed+0x6c>)
 80091d8:	480e      	ldr	r0, [pc, #56]	; (8009214 <tcp_listen_closed+0x68>)
 80091da:	f00a ffe7 	bl	80141ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80091de:	2301      	movs	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	e00b      	b.n	80091fc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80091e4:	4a0d      	ldr	r2, [pc, #52]	; (800921c <tcp_listen_closed+0x70>)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff ffb1 	bl	8009158 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3301      	adds	r3, #1
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d9f0      	bls.n	80091e4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009202:	bf00      	nop
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	08016514 	.word	0x08016514
 8009210:	080165c4 	.word	0x080165c4
 8009214:	08016558 	.word	0x08016558
 8009218:	080165d0 	.word	0x080165d0
 800921c:	08041a2c 	.word	0x08041a2c

08009220 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009220:	b5b0      	push	{r4, r5, r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af04      	add	r7, sp, #16
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <tcp_close_shutdown+0x20>
 8009232:	4b63      	ldr	r3, [pc, #396]	; (80093c0 <tcp_close_shutdown+0x1a0>)
 8009234:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009238:	4962      	ldr	r1, [pc, #392]	; (80093c4 <tcp_close_shutdown+0x1a4>)
 800923a:	4863      	ldr	r0, [pc, #396]	; (80093c8 <tcp_close_shutdown+0x1a8>)
 800923c:	f00a ffb6 	bl	80141ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d066      	beq.n	8009314 <tcp_close_shutdown+0xf4>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	7d1b      	ldrb	r3, [r3, #20]
 800924a:	2b04      	cmp	r3, #4
 800924c:	d003      	beq.n	8009256 <tcp_close_shutdown+0x36>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	7d1b      	ldrb	r3, [r3, #20]
 8009252:	2b07      	cmp	r3, #7
 8009254:	d15e      	bne.n	8009314 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925a:	2b00      	cmp	r3, #0
 800925c:	d104      	bne.n	8009268 <tcp_close_shutdown+0x48>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009262:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009266:	d055      	beq.n	8009314 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	8b5b      	ldrh	r3, [r3, #26]
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d106      	bne.n	8009282 <tcp_close_shutdown+0x62>
 8009274:	4b52      	ldr	r3, [pc, #328]	; (80093c0 <tcp_close_shutdown+0x1a0>)
 8009276:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800927a:	4954      	ldr	r1, [pc, #336]	; (80093cc <tcp_close_shutdown+0x1ac>)
 800927c:	4852      	ldr	r0, [pc, #328]	; (80093c8 <tcp_close_shutdown+0x1a8>)
 800927e:	f00a ff95 	bl	80141ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800928a:	687d      	ldr	r5, [r7, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3304      	adds	r3, #4
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	8ad2      	ldrh	r2, [r2, #22]
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	8b09      	ldrh	r1, [r1, #24]
 8009298:	9102      	str	r1, [sp, #8]
 800929a:	9201      	str	r2, [sp, #4]
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	462b      	mov	r3, r5
 80092a0:	4622      	mov	r2, r4
 80092a2:	4601      	mov	r1, r0
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f005 fd8b 	bl	800edc0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fb6c 	bl	800a988 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80092b0:	4b47      	ldr	r3, [pc, #284]	; (80093d0 <tcp_close_shutdown+0x1b0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d105      	bne.n	80092c6 <tcp_close_shutdown+0xa6>
 80092ba:	4b45      	ldr	r3, [pc, #276]	; (80093d0 <tcp_close_shutdown+0x1b0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	4a43      	ldr	r2, [pc, #268]	; (80093d0 <tcp_close_shutdown+0x1b0>)
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	e013      	b.n	80092ee <tcp_close_shutdown+0xce>
 80092c6:	4b42      	ldr	r3, [pc, #264]	; (80093d0 <tcp_close_shutdown+0x1b0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	e00c      	b.n	80092e8 <tcp_close_shutdown+0xc8>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d104      	bne.n	80092e2 <tcp_close_shutdown+0xc2>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	60da      	str	r2, [r3, #12]
 80092e0:	e005      	b.n	80092ee <tcp_close_shutdown+0xce>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1ef      	bne.n	80092ce <tcp_close_shutdown+0xae>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	60da      	str	r2, [r3, #12]
 80092f4:	4b37      	ldr	r3, [pc, #220]	; (80093d4 <tcp_close_shutdown+0x1b4>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80092fa:	4b37      	ldr	r3, [pc, #220]	; (80093d8 <tcp_close_shutdown+0x1b8>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d102      	bne.n	800930a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009304:	f004 f800 	bl	800d308 <tcp_trigger_input_pcb_close>
 8009308:	e002      	b.n	8009310 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff fed6 	bl	80090bc <tcp_free>
      }
      return ERR_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	e050      	b.n	80093b6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7d1b      	ldrb	r3, [r3, #20]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d03b      	beq.n	8009394 <tcp_close_shutdown+0x174>
 800931c:	2b02      	cmp	r3, #2
 800931e:	dc44      	bgt.n	80093aa <tcp_close_shutdown+0x18a>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <tcp_close_shutdown+0x10a>
 8009324:	2b01      	cmp	r3, #1
 8009326:	d02a      	beq.n	800937e <tcp_close_shutdown+0x15e>
 8009328:	e03f      	b.n	80093aa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	8adb      	ldrh	r3, [r3, #22]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d021      	beq.n	8009376 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009332:	4b2a      	ldr	r3, [pc, #168]	; (80093dc <tcp_close_shutdown+0x1bc>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d105      	bne.n	8009348 <tcp_close_shutdown+0x128>
 800933c:	4b27      	ldr	r3, [pc, #156]	; (80093dc <tcp_close_shutdown+0x1bc>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	4a26      	ldr	r2, [pc, #152]	; (80093dc <tcp_close_shutdown+0x1bc>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	e013      	b.n	8009370 <tcp_close_shutdown+0x150>
 8009348:	4b24      	ldr	r3, [pc, #144]	; (80093dc <tcp_close_shutdown+0x1bc>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60bb      	str	r3, [r7, #8]
 800934e:	e00c      	b.n	800936a <tcp_close_shutdown+0x14a>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	429a      	cmp	r2, r3
 8009358:	d104      	bne.n	8009364 <tcp_close_shutdown+0x144>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	e005      	b.n	8009370 <tcp_close_shutdown+0x150>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	60bb      	str	r3, [r7, #8]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1ef      	bne.n	8009350 <tcp_close_shutdown+0x130>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff fea0 	bl	80090bc <tcp_free>
      break;
 800937c:	e01a      	b.n	80093b4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff ff14 	bl	80091ac <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	4816      	ldr	r0, [pc, #88]	; (80093e0 <tcp_close_shutdown+0x1c0>)
 8009388:	f001 fb4e 	bl	800aa28 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff feb1 	bl	80090f4 <tcp_free_listen>
      break;
 8009392:	e00f      	b.n	80093b4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	480e      	ldr	r0, [pc, #56]	; (80093d0 <tcp_close_shutdown+0x1b0>)
 8009398:	f001 fb46 	bl	800aa28 <tcp_pcb_remove>
 800939c:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <tcp_close_shutdown+0x1b4>)
 800939e:	2201      	movs	r2, #1
 80093a0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff fe8a 	bl	80090bc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80093a8:	e004      	b.n	80093b4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f81a 	bl	80093e4 <tcp_close_shutdown_fin>
 80093b0:	4603      	mov	r3, r0
 80093b2:	e000      	b.n	80093b6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bdb0      	pop	{r4, r5, r7, pc}
 80093be:	bf00      	nop
 80093c0:	08016514 	.word	0x08016514
 80093c4:	080165e8 	.word	0x080165e8
 80093c8:	08016558 	.word	0x08016558
 80093cc:	08016608 	.word	0x08016608
 80093d0:	20006e50 	.word	0x20006e50
 80093d4:	20006e4c 	.word	0x20006e4c
 80093d8:	20006e64 	.word	0x20006e64
 80093dc:	20006e5c 	.word	0x20006e5c
 80093e0:	20006e58 	.word	0x20006e58

080093e4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <tcp_close_shutdown_fin+0x1c>
 80093f2:	4b2e      	ldr	r3, [pc, #184]	; (80094ac <tcp_close_shutdown_fin+0xc8>)
 80093f4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80093f8:	492d      	ldr	r1, [pc, #180]	; (80094b0 <tcp_close_shutdown_fin+0xcc>)
 80093fa:	482e      	ldr	r0, [pc, #184]	; (80094b4 <tcp_close_shutdown_fin+0xd0>)
 80093fc:	f00a fed6 	bl	80141ac <iprintf>

  switch (pcb->state) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	7d1b      	ldrb	r3, [r3, #20]
 8009404:	2b07      	cmp	r3, #7
 8009406:	d020      	beq.n	800944a <tcp_close_shutdown_fin+0x66>
 8009408:	2b07      	cmp	r3, #7
 800940a:	dc2b      	bgt.n	8009464 <tcp_close_shutdown_fin+0x80>
 800940c:	2b03      	cmp	r3, #3
 800940e:	d002      	beq.n	8009416 <tcp_close_shutdown_fin+0x32>
 8009410:	2b04      	cmp	r3, #4
 8009412:	d00d      	beq.n	8009430 <tcp_close_shutdown_fin+0x4c>
 8009414:	e026      	b.n	8009464 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f004 fde0 	bl	800dfdc <tcp_send_fin>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d11f      	bne.n	8009468 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2205      	movs	r2, #5
 800942c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800942e:	e01b      	b.n	8009468 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f004 fdd3 	bl	800dfdc <tcp_send_fin>
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800943a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d114      	bne.n	800946c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2205      	movs	r2, #5
 8009446:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009448:	e010      	b.n	800946c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f004 fdc6 	bl	800dfdc <tcp_send_fin>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d109      	bne.n	8009470 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2209      	movs	r2, #9
 8009460:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009462:	e005      	b.n	8009470 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	e01c      	b.n	80094a2 <tcp_close_shutdown_fin+0xbe>
      break;
 8009468:	bf00      	nop
 800946a:	e002      	b.n	8009472 <tcp_close_shutdown_fin+0x8e>
      break;
 800946c:	bf00      	nop
 800946e:	e000      	b.n	8009472 <tcp_close_shutdown_fin+0x8e>
      break;
 8009470:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f004 feec 	bl	800e258 <tcp_output>
 8009480:	e00d      	b.n	800949e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800948a:	d108      	bne.n	800949e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	8b5b      	ldrh	r3, [r3, #26]
 8009490:	f043 0308 	orr.w	r3, r3, #8
 8009494:	b29a      	uxth	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	e001      	b.n	80094a2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800949e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	08016514 	.word	0x08016514
 80094b0:	080165c4 	.word	0x080165c4
 80094b4:	08016558 	.word	0x08016558

080094b8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d109      	bne.n	80094da <tcp_close+0x22>
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <tcp_close+0x4c>)
 80094c8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80094cc:	490e      	ldr	r1, [pc, #56]	; (8009508 <tcp_close+0x50>)
 80094ce:	480f      	ldr	r0, [pc, #60]	; (800950c <tcp_close+0x54>)
 80094d0:	f00a fe6c 	bl	80141ac <iprintf>
 80094d4:	f06f 030f 	mvn.w	r3, #15
 80094d8:	e00f      	b.n	80094fa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7d1b      	ldrb	r3, [r3, #20]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d006      	beq.n	80094f0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8b5b      	ldrh	r3, [r3, #26]
 80094e6:	f043 0310 	orr.w	r3, r3, #16
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80094f0:	2101      	movs	r1, #1
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff fe94 	bl	8009220 <tcp_close_shutdown>
 80094f8:	4603      	mov	r3, r0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	08016514 	.word	0x08016514
 8009508:	08016624 	.word	0x08016624
 800950c:	08016558 	.word	0x08016558

08009510 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08e      	sub	sp, #56	; 0x38
 8009514:	af04      	add	r7, sp, #16
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d107      	bne.n	8009530 <tcp_abandon+0x20>
 8009520:	4b52      	ldr	r3, [pc, #328]	; (800966c <tcp_abandon+0x15c>)
 8009522:	f240 223d 	movw	r2, #573	; 0x23d
 8009526:	4952      	ldr	r1, [pc, #328]	; (8009670 <tcp_abandon+0x160>)
 8009528:	4852      	ldr	r0, [pc, #328]	; (8009674 <tcp_abandon+0x164>)
 800952a:	f00a fe3f 	bl	80141ac <iprintf>
 800952e:	e099      	b.n	8009664 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7d1b      	ldrb	r3, [r3, #20]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d106      	bne.n	8009546 <tcp_abandon+0x36>
 8009538:	4b4c      	ldr	r3, [pc, #304]	; (800966c <tcp_abandon+0x15c>)
 800953a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800953e:	494e      	ldr	r1, [pc, #312]	; (8009678 <tcp_abandon+0x168>)
 8009540:	484c      	ldr	r0, [pc, #304]	; (8009674 <tcp_abandon+0x164>)
 8009542:	f00a fe33 	bl	80141ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7d1b      	ldrb	r3, [r3, #20]
 800954a:	2b0a      	cmp	r3, #10
 800954c:	d107      	bne.n	800955e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	484a      	ldr	r0, [pc, #296]	; (800967c <tcp_abandon+0x16c>)
 8009552:	f001 fa69 	bl	800aa28 <tcp_pcb_remove>
    tcp_free(pcb);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7ff fdb0 	bl	80090bc <tcp_free>
 800955c:	e082      	b.n	8009664 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009578:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7d1b      	ldrb	r3, [r3, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d126      	bne.n	80095d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	8adb      	ldrh	r3, [r3, #22]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d02e      	beq.n	80095ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009590:	4b3b      	ldr	r3, [pc, #236]	; (8009680 <tcp_abandon+0x170>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	429a      	cmp	r2, r3
 8009598:	d105      	bne.n	80095a6 <tcp_abandon+0x96>
 800959a:	4b39      	ldr	r3, [pc, #228]	; (8009680 <tcp_abandon+0x170>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4a37      	ldr	r2, [pc, #220]	; (8009680 <tcp_abandon+0x170>)
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	e013      	b.n	80095ce <tcp_abandon+0xbe>
 80095a6:	4b36      	ldr	r3, [pc, #216]	; (8009680 <tcp_abandon+0x170>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	61fb      	str	r3, [r7, #28]
 80095ac:	e00c      	b.n	80095c8 <tcp_abandon+0xb8>
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d104      	bne.n	80095c2 <tcp_abandon+0xb2>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	60da      	str	r2, [r3, #12]
 80095c0:	e005      	b.n	80095ce <tcp_abandon+0xbe>
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1ef      	bne.n	80095ae <tcp_abandon+0x9e>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	60da      	str	r2, [r3, #12]
 80095d4:	e00b      	b.n	80095ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8adb      	ldrh	r3, [r3, #22]
 80095de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4828      	ldr	r0, [pc, #160]	; (8009684 <tcp_abandon+0x174>)
 80095e4:	f001 fa20 	bl	800aa28 <tcp_pcb_remove>
 80095e8:	4b27      	ldr	r3, [pc, #156]	; (8009688 <tcp_abandon+0x178>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d004      	beq.n	8009600 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fed6 	bl	800a3ac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fecd 	bl	800a3ac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fec4 	bl	800a3ac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00e      	beq.n	8009648 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	8b12      	ldrh	r2, [r2, #24]
 8009634:	9202      	str	r2, [sp, #8]
 8009636:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009638:	9201      	str	r2, [sp, #4]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	460b      	mov	r3, r1
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	69b9      	ldr	r1, [r7, #24]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f005 fbbc 	bl	800edc0 <tcp_rst>
    }
    last_state = pcb->state;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7d1b      	ldrb	r3, [r3, #20]
 800964c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff fd34 	bl	80090bc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d004      	beq.n	8009664 <tcp_abandon+0x154>
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f06f 010c 	mvn.w	r1, #12
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	4798      	blx	r3
  }
}
 8009664:	3728      	adds	r7, #40	; 0x28
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	08016514 	.word	0x08016514
 8009670:	08016658 	.word	0x08016658
 8009674:	08016558 	.word	0x08016558
 8009678:	08016674 	.word	0x08016674
 800967c:	20006e60 	.word	0x20006e60
 8009680:	20006e5c 	.word	0x20006e5c
 8009684:	20006e50 	.word	0x20006e50
 8009688:	20006e4c 	.word	0x20006e4c

0800968c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009694:	2101      	movs	r1, #1
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ff3a 	bl	8009510 <tcp_abandon>
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	4613      	mov	r3, r2
 80096b0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80096b2:	2304      	movs	r3, #4
 80096b4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80096bc:	4b3e      	ldr	r3, [pc, #248]	; (80097b8 <tcp_bind+0x114>)
 80096be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d109      	bne.n	80096da <tcp_bind+0x36>
 80096c6:	4b3d      	ldr	r3, [pc, #244]	; (80097bc <tcp_bind+0x118>)
 80096c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80096cc:	493c      	ldr	r1, [pc, #240]	; (80097c0 <tcp_bind+0x11c>)
 80096ce:	483d      	ldr	r0, [pc, #244]	; (80097c4 <tcp_bind+0x120>)
 80096d0:	f00a fd6c 	bl	80141ac <iprintf>
 80096d4:	f06f 030f 	mvn.w	r3, #15
 80096d8:	e06a      	b.n	80097b0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	7d1b      	ldrb	r3, [r3, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <tcp_bind+0x52>
 80096e2:	4b36      	ldr	r3, [pc, #216]	; (80097bc <tcp_bind+0x118>)
 80096e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80096e8:	4937      	ldr	r1, [pc, #220]	; (80097c8 <tcp_bind+0x124>)
 80096ea:	4836      	ldr	r0, [pc, #216]	; (80097c4 <tcp_bind+0x120>)
 80096ec:	f00a fd5e 	bl	80141ac <iprintf>
 80096f0:	f06f 0305 	mvn.w	r3, #5
 80096f4:	e05c      	b.n	80097b0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80096f6:	88fb      	ldrh	r3, [r7, #6]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d109      	bne.n	8009710 <tcp_bind+0x6c>
    port = tcp_new_port();
 80096fc:	f000 f9f0 	bl	8009ae0 <tcp_new_port>
 8009700:	4603      	mov	r3, r0
 8009702:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009704:	88fb      	ldrh	r3, [r7, #6]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d135      	bne.n	8009776 <tcp_bind+0xd2>
      return ERR_BUF;
 800970a:	f06f 0301 	mvn.w	r3, #1
 800970e:	e04f      	b.n	80097b0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009710:	2300      	movs	r3, #0
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	e02b      	b.n	800976e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009716:	4a2d      	ldr	r2, [pc, #180]	; (80097cc <tcp_bind+0x128>)
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	e01e      	b.n	8009762 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	8adb      	ldrh	r3, [r3, #22]
 8009728:	88fa      	ldrh	r2, [r7, #6]
 800972a:	429a      	cmp	r2, r3
 800972c:	d116      	bne.n	800975c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800972e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009730:	2b00      	cmp	r3, #0
 8009732:	d010      	beq.n	8009756 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00c      	beq.n	8009756 <tcp_bind+0xb2>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d009      	beq.n	8009756 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009752:	429a      	cmp	r2, r3
 8009754:	d102      	bne.n	800975c <tcp_bind+0xb8>
              return ERR_USE;
 8009756:	f06f 0307 	mvn.w	r3, #7
 800975a:	e029      	b.n	80097b0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	61bb      	str	r3, [r7, #24]
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1dd      	bne.n	8009724 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	3301      	adds	r3, #1
 800976c:	61fb      	str	r3, [r7, #28]
 800976e:	69fa      	ldr	r2, [r7, #28]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	429a      	cmp	r2, r3
 8009774:	dbcf      	blt.n	8009716 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00c      	beq.n	8009796 <tcp_bind+0xf2>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <tcp_bind+0xec>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	e000      	b.n	8009792 <tcp_bind+0xee>
 8009790:	2300      	movs	r3, #0
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	88fa      	ldrh	r2, [r7, #6]
 800979a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800979c:	4b0c      	ldr	r3, [pc, #48]	; (80097d0 <tcp_bind+0x12c>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	60da      	str	r2, [r3, #12]
 80097a4:	4a0a      	ldr	r2, [pc, #40]	; (80097d0 <tcp_bind+0x12c>)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	f005 fccb 	bl	800f144 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3720      	adds	r7, #32
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	08041a64 	.word	0x08041a64
 80097bc:	08016514 	.word	0x08016514
 80097c0:	080166a8 	.word	0x080166a8
 80097c4:	08016558 	.word	0x08016558
 80097c8:	080166c0 	.word	0x080166c0
 80097cc:	08041a2c 	.word	0x08041a2c
 80097d0:	20006e5c 	.word	0x20006e5c

080097d4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	4613      	mov	r3, r2
 80097e0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d106      	bne.n	80097f6 <tcp_accept_null+0x22>
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <tcp_accept_null+0x34>)
 80097ea:	f240 320f 	movw	r2, #783	; 0x30f
 80097ee:	4907      	ldr	r1, [pc, #28]	; (800980c <tcp_accept_null+0x38>)
 80097f0:	4807      	ldr	r0, [pc, #28]	; (8009810 <tcp_accept_null+0x3c>)
 80097f2:	f00a fcdb 	bl	80141ac <iprintf>

  tcp_abort(pcb);
 80097f6:	68b8      	ldr	r0, [r7, #8]
 80097f8:	f7ff ff48 	bl	800968c <tcp_abort>

  return ERR_ABRT;
 80097fc:	f06f 030c 	mvn.w	r3, #12
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	08016514 	.word	0x08016514
 800980c:	080166e8 	.word	0x080166e8
 8009810:	08016558 	.word	0x08016558

08009814 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	2200      	movs	r2, #0
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f806 	bl	8009838 <tcp_listen_with_backlog_and_err>
 800982c:	4603      	mov	r3, r0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	460b      	mov	r3, r1
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <tcp_listen_with_backlog_and_err+0x2c>
 8009850:	4b47      	ldr	r3, [pc, #284]	; (8009970 <tcp_listen_with_backlog_and_err+0x138>)
 8009852:	f240 3259 	movw	r2, #857	; 0x359
 8009856:	4947      	ldr	r1, [pc, #284]	; (8009974 <tcp_listen_with_backlog_and_err+0x13c>)
 8009858:	4847      	ldr	r0, [pc, #284]	; (8009978 <tcp_listen_with_backlog_and_err+0x140>)
 800985a:	f00a fca7 	bl	80141ac <iprintf>
 800985e:	23f0      	movs	r3, #240	; 0xf0
 8009860:	76fb      	strb	r3, [r7, #27]
 8009862:	e079      	b.n	8009958 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	7d1b      	ldrb	r3, [r3, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d009      	beq.n	8009880 <tcp_listen_with_backlog_and_err+0x48>
 800986c:	4b40      	ldr	r3, [pc, #256]	; (8009970 <tcp_listen_with_backlog_and_err+0x138>)
 800986e:	f240 325a 	movw	r2, #858	; 0x35a
 8009872:	4942      	ldr	r1, [pc, #264]	; (800997c <tcp_listen_with_backlog_and_err+0x144>)
 8009874:	4840      	ldr	r0, [pc, #256]	; (8009978 <tcp_listen_with_backlog_and_err+0x140>)
 8009876:	f00a fc99 	bl	80141ac <iprintf>
 800987a:	23f1      	movs	r3, #241	; 0xf1
 800987c:	76fb      	strb	r3, [r7, #27]
 800987e:	e06b      	b.n	8009958 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	7d1b      	ldrb	r3, [r3, #20]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d104      	bne.n	8009892 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800988c:	23f7      	movs	r3, #247	; 0xf7
 800988e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009890:	e062      	b.n	8009958 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009892:	2002      	movs	r0, #2
 8009894:	f7fe fafc 	bl	8007e90 <memp_malloc>
 8009898:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80098a0:	23ff      	movs	r3, #255	; 0xff
 80098a2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80098a4:	e058      	b.n	8009958 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	691a      	ldr	r2, [r3, #16]
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8ada      	ldrh	r2, [r3, #22]
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	2201      	movs	r2, #1
 80098ba:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	7d5a      	ldrb	r2, [r3, #21]
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	7a5a      	ldrb	r2, [r3, #9]
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	2200      	movs	r2, #0
 80098d0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	7ada      	ldrb	r2, [r3, #11]
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	7a9a      	ldrb	r2, [r3, #10]
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8adb      	ldrh	r3, [r3, #22]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d021      	beq.n	8009936 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80098f2:	4b23      	ldr	r3, [pc, #140]	; (8009980 <tcp_listen_with_backlog_and_err+0x148>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d105      	bne.n	8009908 <tcp_listen_with_backlog_and_err+0xd0>
 80098fc:	4b20      	ldr	r3, [pc, #128]	; (8009980 <tcp_listen_with_backlog_and_err+0x148>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	4a1f      	ldr	r2, [pc, #124]	; (8009980 <tcp_listen_with_backlog_and_err+0x148>)
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	e013      	b.n	8009930 <tcp_listen_with_backlog_and_err+0xf8>
 8009908:	4b1d      	ldr	r3, [pc, #116]	; (8009980 <tcp_listen_with_backlog_and_err+0x148>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e00c      	b.n	800992a <tcp_listen_with_backlog_and_err+0xf2>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d104      	bne.n	8009924 <tcp_listen_with_backlog_and_err+0xec>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	60da      	str	r2, [r3, #12]
 8009922:	e005      	b.n	8009930 <tcp_listen_with_backlog_and_err+0xf8>
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	617b      	str	r3, [r7, #20]
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1ef      	bne.n	8009910 <tcp_listen_with_backlog_and_err+0xd8>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff fbc0 	bl	80090bc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4a11      	ldr	r2, [pc, #68]	; (8009984 <tcp_listen_with_backlog_and_err+0x14c>)
 8009940:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009942:	4b11      	ldr	r3, [pc, #68]	; (8009988 <tcp_listen_with_backlog_and_err+0x150>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	60da      	str	r2, [r3, #12]
 800994a:	4a0f      	ldr	r2, [pc, #60]	; (8009988 <tcp_listen_with_backlog_and_err+0x150>)
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	f005 fbf8 	bl	800f144 <tcp_timer_needed>
  res = ERR_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	7efa      	ldrb	r2, [r7, #27]
 8009962:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009964:	69fb      	ldr	r3, [r7, #28]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	08016514 	.word	0x08016514
 8009974:	08016708 	.word	0x08016708
 8009978:	08016558 	.word	0x08016558
 800997c:	08016738 	.word	0x08016738
 8009980:	20006e5c 	.word	0x20006e5c
 8009984:	080097d5 	.word	0x080097d5
 8009988:	20006e58 	.word	0x20006e58

0800998c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d106      	bne.n	80099a8 <tcp_update_rcv_ann_wnd+0x1c>
 800999a:	4b25      	ldr	r3, [pc, #148]	; (8009a30 <tcp_update_rcv_ann_wnd+0xa4>)
 800999c:	f240 32a6 	movw	r2, #934	; 0x3a6
 80099a0:	4924      	ldr	r1, [pc, #144]	; (8009a34 <tcp_update_rcv_ann_wnd+0xa8>)
 80099a2:	4825      	ldr	r0, [pc, #148]	; (8009a38 <tcp_update_rcv_ann_wnd+0xac>)
 80099a4:	f00a fc02 	bl	80141ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80099b0:	4413      	add	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80099bc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80099c0:	bf28      	it	cs
 80099c2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80099c6:	b292      	uxth	r2, r2
 80099c8:	4413      	add	r3, r2
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	db08      	blt.n	80099e4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	e020      	b.n	8009a26 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dd03      	ble.n	80099fa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099f8:	e014      	b.n	8009a24 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a0c:	d306      	bcc.n	8009a1c <tcp_update_rcv_ann_wnd+0x90>
 8009a0e:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <tcp_update_rcv_ann_wnd+0xa4>)
 8009a10:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009a14:	4909      	ldr	r1, [pc, #36]	; (8009a3c <tcp_update_rcv_ann_wnd+0xb0>)
 8009a16:	4808      	ldr	r0, [pc, #32]	; (8009a38 <tcp_update_rcv_ann_wnd+0xac>)
 8009a18:	f00a fbc8 	bl	80141ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009a24:	2300      	movs	r3, #0
  }
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	08016514 	.word	0x08016514
 8009a34:	08016770 	.word	0x08016770
 8009a38:	08016558 	.word	0x08016558
 8009a3c:	08016794 	.word	0x08016794

08009a40 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d107      	bne.n	8009a62 <tcp_recved+0x22>
 8009a52:	4b1f      	ldr	r3, [pc, #124]	; (8009ad0 <tcp_recved+0x90>)
 8009a54:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009a58:	491e      	ldr	r1, [pc, #120]	; (8009ad4 <tcp_recved+0x94>)
 8009a5a:	481f      	ldr	r0, [pc, #124]	; (8009ad8 <tcp_recved+0x98>)
 8009a5c:	f00a fba6 	bl	80141ac <iprintf>
 8009a60:	e032      	b.n	8009ac8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	7d1b      	ldrb	r3, [r3, #20]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d106      	bne.n	8009a78 <tcp_recved+0x38>
 8009a6a:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <tcp_recved+0x90>)
 8009a6c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009a70:	491a      	ldr	r1, [pc, #104]	; (8009adc <tcp_recved+0x9c>)
 8009a72:	4819      	ldr	r0, [pc, #100]	; (8009ad8 <tcp_recved+0x98>)
 8009a74:	f00a fb9a 	bl	80141ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a7c:	887b      	ldrh	r3, [r7, #2]
 8009a7e:	4413      	add	r3, r2
 8009a80:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009a82:	89fb      	ldrh	r3, [r7, #14]
 8009a84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a88:	d804      	bhi.n	8009a94 <tcp_recved+0x54>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8e:	89fa      	ldrh	r2, [r7, #14]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d204      	bcs.n	8009a9e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009a9a:	851a      	strh	r2, [r3, #40]	; 0x28
 8009a9c:	e002      	b.n	8009aa4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	89fa      	ldrh	r2, [r7, #14]
 8009aa2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff ff71 	bl	800998c <tcp_update_rcv_ann_wnd>
 8009aaa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009ab2:	d309      	bcc.n	8009ac8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	8b5b      	ldrh	r3, [r3, #26]
 8009ab8:	f043 0302 	orr.w	r3, r3, #2
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f004 fbc8 	bl	800e258 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	08016514 	.word	0x08016514
 8009ad4:	080167b0 	.word	0x080167b0
 8009ad8:	08016558 	.word	0x08016558
 8009adc:	080167c8 	.word	0x080167c8

08009ae0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009aea:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <tcp_new_port+0x84>)
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	3301      	adds	r3, #1
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	4b1c      	ldr	r3, [pc, #112]	; (8009b64 <tcp_new_port+0x84>)
 8009af4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009af6:	4b1b      	ldr	r3, [pc, #108]	; (8009b64 <tcp_new_port+0x84>)
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d103      	bne.n	8009b0a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009b02:	4b18      	ldr	r3, [pc, #96]	; (8009b64 <tcp_new_port+0x84>)
 8009b04:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009b08:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	71fb      	strb	r3, [r7, #7]
 8009b0e:	e01e      	b.n	8009b4e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <tcp_new_port+0x88>)
 8009b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	e011      	b.n	8009b42 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	8ada      	ldrh	r2, [r3, #22]
 8009b22:	4b10      	ldr	r3, [pc, #64]	; (8009b64 <tcp_new_port+0x84>)
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d108      	bne.n	8009b3c <tcp_new_port+0x5c>
        n++;
 8009b2a:	88bb      	ldrh	r3, [r7, #4]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009b30:	88bb      	ldrh	r3, [r7, #4]
 8009b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b36:	d3d8      	bcc.n	8009aea <tcp_new_port+0xa>
          return 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	e00d      	b.n	8009b58 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	603b      	str	r3, [r7, #0]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1ea      	bne.n	8009b1e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	71fb      	strb	r3, [r7, #7]
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d9dd      	bls.n	8009b10 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009b54:	4b03      	ldr	r3, [pc, #12]	; (8009b64 <tcp_new_port+0x84>)
 8009b56:	881b      	ldrh	r3, [r3, #0]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	20000016 	.word	0x20000016
 8009b68:	08041a2c 	.word	0x08041a2c

08009b6c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009b6c:	b5b0      	push	{r4, r5, r7, lr}
 8009b6e:	b090      	sub	sp, #64	; 0x40
 8009b70:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009b78:	4b94      	ldr	r3, [pc, #592]	; (8009dcc <tcp_slowtmr+0x260>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	4a93      	ldr	r2, [pc, #588]	; (8009dcc <tcp_slowtmr+0x260>)
 8009b80:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009b82:	4b93      	ldr	r3, [pc, #588]	; (8009dd0 <tcp_slowtmr+0x264>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	3301      	adds	r3, #1
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	4b91      	ldr	r3, [pc, #580]	; (8009dd0 <tcp_slowtmr+0x264>)
 8009b8c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009b92:	4b90      	ldr	r3, [pc, #576]	; (8009dd4 <tcp_slowtmr+0x268>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009b98:	e29d      	b.n	800a0d6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	7d1b      	ldrb	r3, [r3, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d106      	bne.n	8009bb0 <tcp_slowtmr+0x44>
 8009ba2:	4b8d      	ldr	r3, [pc, #564]	; (8009dd8 <tcp_slowtmr+0x26c>)
 8009ba4:	f240 42be 	movw	r2, #1214	; 0x4be
 8009ba8:	498c      	ldr	r1, [pc, #560]	; (8009ddc <tcp_slowtmr+0x270>)
 8009baa:	488d      	ldr	r0, [pc, #564]	; (8009de0 <tcp_slowtmr+0x274>)
 8009bac:	f00a fafe 	bl	80141ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb2:	7d1b      	ldrb	r3, [r3, #20]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d106      	bne.n	8009bc6 <tcp_slowtmr+0x5a>
 8009bb8:	4b87      	ldr	r3, [pc, #540]	; (8009dd8 <tcp_slowtmr+0x26c>)
 8009bba:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009bbe:	4989      	ldr	r1, [pc, #548]	; (8009de4 <tcp_slowtmr+0x278>)
 8009bc0:	4887      	ldr	r0, [pc, #540]	; (8009de0 <tcp_slowtmr+0x274>)
 8009bc2:	f00a faf3 	bl	80141ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	7d1b      	ldrb	r3, [r3, #20]
 8009bca:	2b0a      	cmp	r3, #10
 8009bcc:	d106      	bne.n	8009bdc <tcp_slowtmr+0x70>
 8009bce:	4b82      	ldr	r3, [pc, #520]	; (8009dd8 <tcp_slowtmr+0x26c>)
 8009bd0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009bd4:	4984      	ldr	r1, [pc, #528]	; (8009de8 <tcp_slowtmr+0x27c>)
 8009bd6:	4882      	ldr	r0, [pc, #520]	; (8009de0 <tcp_slowtmr+0x274>)
 8009bd8:	f00a fae8 	bl	80141ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	7f9a      	ldrb	r2, [r3, #30]
 8009be0:	4b7b      	ldr	r3, [pc, #492]	; (8009dd0 <tcp_slowtmr+0x264>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d105      	bne.n	8009bf4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009bf2:	e270      	b.n	800a0d6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009bf4:	4b76      	ldr	r3, [pc, #472]	; (8009dd0 <tcp_slowtmr+0x264>)
 8009bf6:	781a      	ldrb	r2, [r3, #0]
 8009bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	7d1b      	ldrb	r3, [r3, #20]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d10a      	bne.n	8009c26 <tcp_slowtmr+0xba>
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c16:	2b05      	cmp	r3, #5
 8009c18:	d905      	bls.n	8009c26 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c1e:	3301      	adds	r3, #1
 8009c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c24:	e11e      	b.n	8009e64 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c2c:	2b0b      	cmp	r3, #11
 8009c2e:	d905      	bls.n	8009c3c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c34:	3301      	adds	r3, #1
 8009c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c3a:	e113      	b.n	8009e64 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d075      	beq.n	8009d32 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d006      	beq.n	8009c5c <tcp_slowtmr+0xf0>
 8009c4e:	4b62      	ldr	r3, [pc, #392]	; (8009dd8 <tcp_slowtmr+0x26c>)
 8009c50:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009c54:	4965      	ldr	r1, [pc, #404]	; (8009dec <tcp_slowtmr+0x280>)
 8009c56:	4862      	ldr	r0, [pc, #392]	; (8009de0 <tcp_slowtmr+0x274>)
 8009c58:	f00a faa8 	bl	80141ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <tcp_slowtmr+0x106>
 8009c64:	4b5c      	ldr	r3, [pc, #368]	; (8009dd8 <tcp_slowtmr+0x26c>)
 8009c66:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009c6a:	4961      	ldr	r1, [pc, #388]	; (8009df0 <tcp_slowtmr+0x284>)
 8009c6c:	485c      	ldr	r0, [pc, #368]	; (8009de0 <tcp_slowtmr+0x274>)
 8009c6e:	f00a fa9d 	bl	80141ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009c78:	2b0b      	cmp	r3, #11
 8009c7a:	d905      	bls.n	8009c88 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c80:	3301      	adds	r3, #1
 8009c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c86:	e0ed      	b.n	8009e64 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	4a58      	ldr	r2, [pc, #352]	; (8009df4 <tcp_slowtmr+0x288>)
 8009c92:	5cd3      	ldrb	r3, [r2, r3]
 8009c94:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009c9c:	7c7a      	ldrb	r2, [r7, #17]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d907      	bls.n	8009cb2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009ca8:	3301      	adds	r3, #1
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009cb8:	7c7a      	ldrb	r2, [r7, #17]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	f200 80d2 	bhi.w	8009e64 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d108      	bne.n	8009ce0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cd0:	f005 f96a 	bl	800efa8 <tcp_zero_window_probe>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d014      	beq.n	8009d04 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009cda:	2300      	movs	r3, #0
 8009cdc:	623b      	str	r3, [r7, #32]
 8009cde:	e011      	b.n	8009d04 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cea:	f004 f82f 	bl	800dd4c <tcp_split_unsent_seg>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d107      	bne.n	8009d04 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cf6:	f004 faaf 	bl	800e258 <tcp_output>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 80ac 	beq.w	8009e64 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d1a:	2b06      	cmp	r3, #6
 8009d1c:	f200 80a2 	bhi.w	8009e64 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d26:	3301      	adds	r3, #1
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009d30:	e098      	b.n	8009e64 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	db0f      	blt.n	8009d5c <tcp_slowtmr+0x1f0>
 8009d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d42:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d008      	beq.n	8009d5c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3301      	adds	r3, #1
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	b21a      	sxth	r2, r3
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	db7b      	blt.n	8009e64 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d6e:	f004 fd65 	bl	800e83c <tcp_rexmit_rto_prepare>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <tcp_slowtmr+0x21c>
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d171      	bne.n	8009e64 <tcp_slowtmr+0x2f8>
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d06d      	beq.n	8009e64 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	7d1b      	ldrb	r3, [r3, #20]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d03a      	beq.n	8009e06 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d96:	2b0c      	cmp	r3, #12
 8009d98:	bf28      	it	cs
 8009d9a:	230c      	movcs	r3, #12
 8009d9c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009da4:	10db      	asrs	r3, r3, #3
 8009da6:	b21b      	sxth	r3, r3
 8009da8:	461a      	mov	r2, r3
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009db0:	4413      	add	r3, r2
 8009db2:	7efa      	ldrb	r2, [r7, #27]
 8009db4:	4910      	ldr	r1, [pc, #64]	; (8009df8 <tcp_slowtmr+0x28c>)
 8009db6:	5c8a      	ldrb	r2, [r1, r2]
 8009db8:	4093      	lsls	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	dc1a      	bgt.n	8009dfc <tcp_slowtmr+0x290>
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	b21a      	sxth	r2, r3
 8009dca:	e019      	b.n	8009e00 <tcp_slowtmr+0x294>
 8009dcc:	20006e54 	.word	0x20006e54
 8009dd0:	20000532 	.word	0x20000532
 8009dd4:	20006e50 	.word	0x20006e50
 8009dd8:	08016514 	.word	0x08016514
 8009ddc:	08016858 	.word	0x08016858
 8009de0:	08016558 	.word	0x08016558
 8009de4:	08016884 	.word	0x08016884
 8009de8:	080168b0 	.word	0x080168b0
 8009dec:	080168e0 	.word	0x080168e0
 8009df0:	08016914 	.word	0x08016914
 8009df4:	08041a24 	.word	0x08041a24
 8009df8:	08041a14 	.word	0x08041a14
 8009dfc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2200      	movs	r2, #0
 8009e0a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	bf28      	it	cs
 8009e1c:	4613      	movcs	r3, r2
 8009e1e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009e20:	8a7b      	ldrh	r3, [r7, #18]
 8009e22:	085b      	lsrs	r3, r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d206      	bcs.n	8009e4c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e60:	f004 fd5c 	bl	800e91c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e66:	7d1b      	ldrb	r3, [r3, #20]
 8009e68:	2b06      	cmp	r3, #6
 8009e6a:	d111      	bne.n	8009e90 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	8b5b      	ldrh	r3, [r3, #26]
 8009e70:	f003 0310 	and.w	r3, r3, #16
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009e78:	4b9c      	ldr	r3, [pc, #624]	; (800a0ec <tcp_slowtmr+0x580>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b28      	cmp	r3, #40	; 0x28
 8009e84:	d904      	bls.n	8009e90 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	7a5b      	ldrb	r3, [r3, #9]
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d04a      	beq.n	8009f32 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	d003      	beq.n	8009eac <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009ea8:	2b07      	cmp	r3, #7
 8009eaa:	d142      	bne.n	8009f32 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009eac:	4b8f      	ldr	r3, [pc, #572]	; (800a0ec <tcp_slowtmr+0x580>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009ebc:	4b8c      	ldr	r3, [pc, #560]	; (800a0f0 <tcp_slowtmr+0x584>)
 8009ebe:	440b      	add	r3, r1
 8009ec0:	498c      	ldr	r1, [pc, #560]	; (800a0f4 <tcp_slowtmr+0x588>)
 8009ec2:	fba1 1303 	umull	r1, r3, r1, r3
 8009ec6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d90a      	bls.n	8009ee2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eda:	3301      	adds	r3, #1
 8009edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ee0:	e027      	b.n	8009f32 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ee2:	4b82      	ldr	r3, [pc, #520]	; (800a0ec <tcp_slowtmr+0x580>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009ef8:	4618      	mov	r0, r3
 8009efa:	4b7f      	ldr	r3, [pc, #508]	; (800a0f8 <tcp_slowtmr+0x58c>)
 8009efc:	fb03 f300 	mul.w	r3, r3, r0
 8009f00:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009f02:	497c      	ldr	r1, [pc, #496]	; (800a0f4 <tcp_slowtmr+0x588>)
 8009f04:	fba1 1303 	umull	r1, r3, r1, r3
 8009f08:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d911      	bls.n	8009f32 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009f0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f10:	f005 f80a 	bl	800ef28 <tcp_keepalive>
 8009f14:	4603      	mov	r3, r0
 8009f16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009f1a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d107      	bne.n	8009f32 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009f28:	3301      	adds	r3, #1
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d011      	beq.n	8009f5e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009f3a:	4b6c      	ldr	r3, [pc, #432]	; (800a0ec <tcp_slowtmr+0x580>)
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	1ad2      	subs	r2, r2, r3
 8009f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f46:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	440b      	add	r3, r1
 8009f52:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d302      	bcc.n	8009f5e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f5a:	f000 fec9 	bl	800acf0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	7d1b      	ldrb	r3, [r3, #20]
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d10b      	bne.n	8009f7e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f66:	4b61      	ldr	r3, [pc, #388]	; (800a0ec <tcp_slowtmr+0x580>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	2b28      	cmp	r3, #40	; 0x28
 8009f72:	d904      	bls.n	8009f7e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f78:	3301      	adds	r3, #1
 8009f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f80:	7d1b      	ldrb	r3, [r3, #20]
 8009f82:	2b09      	cmp	r3, #9
 8009f84:	d10b      	bne.n	8009f9e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f86:	4b59      	ldr	r3, [pc, #356]	; (800a0ec <tcp_slowtmr+0x580>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	2bf0      	cmp	r3, #240	; 0xf0
 8009f92:	d904      	bls.n	8009f9e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f98:	3301      	adds	r3, #1
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d060      	beq.n	800a068 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fac:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fb0:	f000 fcea 	bl	800a988 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d010      	beq.n	8009fdc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009fba:	4b50      	ldr	r3, [pc, #320]	; (800a0fc <tcp_slowtmr+0x590>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d106      	bne.n	8009fd2 <tcp_slowtmr+0x466>
 8009fc4:	4b4e      	ldr	r3, [pc, #312]	; (800a100 <tcp_slowtmr+0x594>)
 8009fc6:	f240 526d 	movw	r2, #1389	; 0x56d
 8009fca:	494e      	ldr	r1, [pc, #312]	; (800a104 <tcp_slowtmr+0x598>)
 8009fcc:	484e      	ldr	r0, [pc, #312]	; (800a108 <tcp_slowtmr+0x59c>)
 8009fce:	f00a f8ed 	bl	80141ac <iprintf>
        prev->next = pcb->next;
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd8:	60da      	str	r2, [r3, #12]
 8009fda:	e00f      	b.n	8009ffc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009fdc:	4b47      	ldr	r3, [pc, #284]	; (800a0fc <tcp_slowtmr+0x590>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d006      	beq.n	8009ff4 <tcp_slowtmr+0x488>
 8009fe6:	4b46      	ldr	r3, [pc, #280]	; (800a100 <tcp_slowtmr+0x594>)
 8009fe8:	f240 5271 	movw	r2, #1393	; 0x571
 8009fec:	4947      	ldr	r1, [pc, #284]	; (800a10c <tcp_slowtmr+0x5a0>)
 8009fee:	4846      	ldr	r0, [pc, #280]	; (800a108 <tcp_slowtmr+0x59c>)
 8009ff0:	f00a f8dc 	bl	80141ac <iprintf>
        tcp_active_pcbs = pcb->next;
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	4a40      	ldr	r2, [pc, #256]	; (800a0fc <tcp_slowtmr+0x590>)
 8009ffa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a000:	2b00      	cmp	r3, #0
 800a002:	d013      	beq.n	800a02c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a00c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	3304      	adds	r3, #4
 800a012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a014:	8ad2      	ldrh	r2, [r2, #22]
 800a016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a018:	8b09      	ldrh	r1, [r1, #24]
 800a01a:	9102      	str	r1, [sp, #8]
 800a01c:	9201      	str	r2, [sp, #4]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	462b      	mov	r3, r5
 800a022:	4622      	mov	r2, r4
 800a024:	4601      	mov	r1, r0
 800a026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a028:	f004 feca 	bl	800edc0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	7d1b      	ldrb	r3, [r3, #20]
 800a036:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a042:	6838      	ldr	r0, [r7, #0]
 800a044:	f7ff f83a 	bl	80090bc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a048:	4b31      	ldr	r3, [pc, #196]	; (800a110 <tcp_slowtmr+0x5a4>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <tcp_slowtmr+0x4f2>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f06f 010c 	mvn.w	r1, #12
 800a05a:	68b8      	ldr	r0, [r7, #8]
 800a05c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a05e:	4b2c      	ldr	r3, [pc, #176]	; (800a110 <tcp_slowtmr+0x5a4>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d037      	beq.n	800a0d6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a066:	e592      	b.n	8009b8e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	7f1b      	ldrb	r3, [r3, #28]
 800a076:	3301      	adds	r3, #1
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	7f1a      	ldrb	r2, [r3, #28]
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	7f5b      	ldrb	r3, [r3, #29]
 800a086:	429a      	cmp	r2, r3
 800a088:	d325      	bcc.n	800a0d6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	2200      	movs	r2, #0
 800a08e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a090:	4b1f      	ldr	r3, [pc, #124]	; (800a110 <tcp_slowtmr+0x5a4>)
 800a092:	2200      	movs	r2, #0
 800a094:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <tcp_slowtmr+0x54c>
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a8:	6912      	ldr	r2, [r2, #16]
 800a0aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a0b6:	e002      	b.n	800a0be <tcp_slowtmr+0x552>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a0be:	4b14      	ldr	r3, [pc, #80]	; (800a110 <tcp_slowtmr+0x5a4>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d000      	beq.n	800a0c8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a0c6:	e562      	b.n	8009b8e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a0c8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d102      	bne.n	800a0d6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0d2:	f004 f8c1 	bl	800e258 <tcp_output>
  while (pcb != NULL) {
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f47f ad5e 	bne.w	8009b9a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a0e2:	4b0c      	ldr	r3, [pc, #48]	; (800a114 <tcp_slowtmr+0x5a8>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a0e8:	e069      	b.n	800a1be <tcp_slowtmr+0x652>
 800a0ea:	bf00      	nop
 800a0ec:	20006e54 	.word	0x20006e54
 800a0f0:	000a4cb8 	.word	0x000a4cb8
 800a0f4:	10624dd3 	.word	0x10624dd3
 800a0f8:	000124f8 	.word	0x000124f8
 800a0fc:	20006e50 	.word	0x20006e50
 800a100:	08016514 	.word	0x08016514
 800a104:	0801694c 	.word	0x0801694c
 800a108:	08016558 	.word	0x08016558
 800a10c:	08016978 	.word	0x08016978
 800a110:	20006e4c 	.word	0x20006e4c
 800a114:	20006e60 	.word	0x20006e60
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	7d1b      	ldrb	r3, [r3, #20]
 800a11c:	2b0a      	cmp	r3, #10
 800a11e:	d006      	beq.n	800a12e <tcp_slowtmr+0x5c2>
 800a120:	4b2b      	ldr	r3, [pc, #172]	; (800a1d0 <tcp_slowtmr+0x664>)
 800a122:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a126:	492b      	ldr	r1, [pc, #172]	; (800a1d4 <tcp_slowtmr+0x668>)
 800a128:	482b      	ldr	r0, [pc, #172]	; (800a1d8 <tcp_slowtmr+0x66c>)
 800a12a:	f00a f83f 	bl	80141ac <iprintf>
    pcb_remove = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a134:	4b29      	ldr	r3, [pc, #164]	; (800a1dc <tcp_slowtmr+0x670>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2bf0      	cmp	r3, #240	; 0xf0
 800a140:	d904      	bls.n	800a14c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a146:	3301      	adds	r3, #1
 800a148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a150:	2b00      	cmp	r3, #0
 800a152:	d02f      	beq.n	800a1b4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a156:	f000 fc17 	bl	800a988 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d010      	beq.n	800a182 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a160:	4b1f      	ldr	r3, [pc, #124]	; (800a1e0 <tcp_slowtmr+0x674>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a166:	429a      	cmp	r2, r3
 800a168:	d106      	bne.n	800a178 <tcp_slowtmr+0x60c>
 800a16a:	4b19      	ldr	r3, [pc, #100]	; (800a1d0 <tcp_slowtmr+0x664>)
 800a16c:	f240 52af 	movw	r2, #1455	; 0x5af
 800a170:	491c      	ldr	r1, [pc, #112]	; (800a1e4 <tcp_slowtmr+0x678>)
 800a172:	4819      	ldr	r0, [pc, #100]	; (800a1d8 <tcp_slowtmr+0x66c>)
 800a174:	f00a f81a 	bl	80141ac <iprintf>
        prev->next = pcb->next;
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	60da      	str	r2, [r3, #12]
 800a180:	e00f      	b.n	800a1a2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a182:	4b17      	ldr	r3, [pc, #92]	; (800a1e0 <tcp_slowtmr+0x674>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d006      	beq.n	800a19a <tcp_slowtmr+0x62e>
 800a18c:	4b10      	ldr	r3, [pc, #64]	; (800a1d0 <tcp_slowtmr+0x664>)
 800a18e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a192:	4915      	ldr	r1, [pc, #84]	; (800a1e8 <tcp_slowtmr+0x67c>)
 800a194:	4810      	ldr	r0, [pc, #64]	; (800a1d8 <tcp_slowtmr+0x66c>)
 800a196:	f00a f809 	bl	80141ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	4a10      	ldr	r2, [pc, #64]	; (800a1e0 <tcp_slowtmr+0x674>)
 800a1a0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a1ac:	69f8      	ldr	r0, [r7, #28]
 800a1ae:	f7fe ff85 	bl	80090bc <tcp_free>
 800a1b2:	e004      	b.n	800a1be <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1a9      	bne.n	800a118 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	3730      	adds	r7, #48	; 0x30
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	08016514 	.word	0x08016514
 800a1d4:	080169a4 	.word	0x080169a4
 800a1d8:	08016558 	.word	0x08016558
 800a1dc:	20006e54 	.word	0x20006e54
 800a1e0:	20006e60 	.word	0x20006e60
 800a1e4:	080169d4 	.word	0x080169d4
 800a1e8:	080169fc 	.word	0x080169fc

0800a1ec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a1f2:	4b2d      	ldr	r3, [pc, #180]	; (800a2a8 <tcp_fasttmr+0xbc>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <tcp_fasttmr+0xbc>)
 800a1fc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a1fe:	4b2b      	ldr	r3, [pc, #172]	; (800a2ac <tcp_fasttmr+0xc0>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a204:	e048      	b.n	800a298 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	7f9a      	ldrb	r2, [r3, #30]
 800a20a:	4b27      	ldr	r3, [pc, #156]	; (800a2a8 <tcp_fasttmr+0xbc>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d03f      	beq.n	800a292 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a212:	4b25      	ldr	r3, [pc, #148]	; (800a2a8 <tcp_fasttmr+0xbc>)
 800a214:	781a      	ldrb	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8b5b      	ldrh	r3, [r3, #26]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	d010      	beq.n	800a248 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	8b5b      	ldrh	r3, [r3, #26]
 800a22a:	f043 0302 	orr.w	r3, r3, #2
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f004 f80f 	bl	800e258 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	8b5b      	ldrh	r3, [r3, #26]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	b29a      	uxth	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	8b5b      	ldrh	r3, [r3, #26]
 800a24c:	f003 0308 	and.w	r3, r3, #8
 800a250:	2b00      	cmp	r3, #0
 800a252:	d009      	beq.n	800a268 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	8b5b      	ldrh	r3, [r3, #26]
 800a258:	f023 0308 	bic.w	r3, r3, #8
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff f8be 	bl	80093e4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <tcp_fasttmr+0xc4>)
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f819 	bl	800a2b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a282:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <tcp_fasttmr+0xc4>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d000      	beq.n	800a28c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a28a:	e7b8      	b.n	800a1fe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	607b      	str	r3, [r7, #4]
 800a290:	e002      	b.n	800a298 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1b3      	bne.n	800a206 <tcp_fasttmr+0x1a>
    }
  }
}
 800a29e:	bf00      	nop
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000532 	.word	0x20000532
 800a2ac:	20006e50 	.word	0x20006e50
 800a2b0:	20006e4c 	.word	0x20006e4c

0800a2b4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d109      	bne.n	800a2d6 <tcp_process_refused_data+0x22>
 800a2c2:	4b37      	ldr	r3, [pc, #220]	; (800a3a0 <tcp_process_refused_data+0xec>)
 800a2c4:	f240 6209 	movw	r2, #1545	; 0x609
 800a2c8:	4936      	ldr	r1, [pc, #216]	; (800a3a4 <tcp_process_refused_data+0xf0>)
 800a2ca:	4837      	ldr	r0, [pc, #220]	; (800a3a8 <tcp_process_refused_data+0xf4>)
 800a2cc:	f009 ff6e 	bl	80141ac <iprintf>
 800a2d0:	f06f 030f 	mvn.w	r3, #15
 800a2d4:	e060      	b.n	800a398 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2da:	7b5b      	ldrb	r3, [r3, #13]
 800a2dc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2e2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <tcp_process_refused_data+0x58>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6918      	ldr	r0, [r3, #16]
 800a2fe:	2300      	movs	r3, #0
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	47a0      	blx	r4
 800a306:	4603      	mov	r3, r0
 800a308:	73fb      	strb	r3, [r7, #15]
 800a30a:	e007      	b.n	800a31c <tcp_process_refused_data+0x68>
 800a30c:	2300      	movs	r3, #0
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	2000      	movs	r0, #0
 800a314:	f000 f8c2 	bl	800a49c <tcp_recv_null>
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d12a      	bne.n	800a37a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a324:	7bbb      	ldrb	r3, [r7, #14]
 800a326:	f003 0320 	and.w	r3, r3, #32
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d033      	beq.n	800a396 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a332:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a336:	d005      	beq.n	800a344 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a33c:	3301      	adds	r3, #1
 800a33e:	b29a      	uxth	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00b      	beq.n	800a366 <tcp_process_refused_data+0xb2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6918      	ldr	r0, [r3, #16]
 800a358:	2300      	movs	r3, #0
 800a35a:	2200      	movs	r2, #0
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	47a0      	blx	r4
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	e001      	b.n	800a36a <tcp_process_refused_data+0xb6>
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a36e:	f113 0f0d 	cmn.w	r3, #13
 800a372:	d110      	bne.n	800a396 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a374:	f06f 030c 	mvn.w	r3, #12
 800a378:	e00e      	b.n	800a398 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a37e:	f113 0f0d 	cmn.w	r3, #13
 800a382:	d102      	bne.n	800a38a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a384:	f06f 030c 	mvn.w	r3, #12
 800a388:	e006      	b.n	800a398 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a390:	f06f 0304 	mvn.w	r3, #4
 800a394:	e000      	b.n	800a398 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd90      	pop	{r4, r7, pc}
 800a3a0:	08016514 	.word	0x08016514
 800a3a4:	08016a24 	.word	0x08016a24
 800a3a8:	08016558 	.word	0x08016558

0800a3ac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a3b4:	e007      	b.n	800a3c6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f80a 	bl	800a3d6 <tcp_seg_free>
    seg = next;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1f4      	bne.n	800a3b6 <tcp_segs_free+0xa>
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00c      	beq.n	800a3fe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d004      	beq.n	800a3f6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe fbb3 	bl	8008b5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	2003      	movs	r0, #3
 800a3fa:	f7fd fd95 	bl	8007f28 <memp_free>
  }
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d107      	bne.n	800a42a <tcp_setprio+0x22>
 800a41a:	4b07      	ldr	r3, [pc, #28]	; (800a438 <tcp_setprio+0x30>)
 800a41c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800a420:	4906      	ldr	r1, [pc, #24]	; (800a43c <tcp_setprio+0x34>)
 800a422:	4807      	ldr	r0, [pc, #28]	; (800a440 <tcp_setprio+0x38>)
 800a424:	f009 fec2 	bl	80141ac <iprintf>
 800a428:	e002      	b.n	800a430 <tcp_setprio+0x28>

  pcb->prio = prio;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	78fa      	ldrb	r2, [r7, #3]
 800a42e:	755a      	strb	r2, [r3, #21]
}
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	08016514 	.word	0x08016514
 800a43c:	08016a4c 	.word	0x08016a4c
 800a440:	08016558 	.word	0x08016558

0800a444 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d106      	bne.n	800a460 <tcp_seg_copy+0x1c>
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <tcp_seg_copy+0x4c>)
 800a454:	f240 6282 	movw	r2, #1666	; 0x682
 800a458:	490e      	ldr	r1, [pc, #56]	; (800a494 <tcp_seg_copy+0x50>)
 800a45a:	480f      	ldr	r0, [pc, #60]	; (800a498 <tcp_seg_copy+0x54>)
 800a45c:	f009 fea6 	bl	80141ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a460:	2003      	movs	r0, #3
 800a462:	f7fd fd15 	bl	8007e90 <memp_malloc>
 800a466:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <tcp_seg_copy+0x2e>
    return NULL;
 800a46e:	2300      	movs	r3, #0
 800a470:	e00a      	b.n	800a488 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a472:	2210      	movs	r2, #16
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f009 fe68 	bl	801414c <memcpy>
  pbuf_ref(cseg->p);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe fc0b 	bl	8008c9c <pbuf_ref>
  return cseg;
 800a486:	68fb      	ldr	r3, [r7, #12]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	08016514 	.word	0x08016514
 800a494:	08016a68 	.word	0x08016a68
 800a498:	08016558 	.word	0x08016558

0800a49c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d109      	bne.n	800a4c4 <tcp_recv_null+0x28>
 800a4b0:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <tcp_recv_null+0x60>)
 800a4b2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a4b6:	4912      	ldr	r1, [pc, #72]	; (800a500 <tcp_recv_null+0x64>)
 800a4b8:	4812      	ldr	r0, [pc, #72]	; (800a504 <tcp_recv_null+0x68>)
 800a4ba:	f009 fe77 	bl	80141ac <iprintf>
 800a4be:	f06f 030f 	mvn.w	r3, #15
 800a4c2:	e016      	b.n	800a4f2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d009      	beq.n	800a4de <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	891b      	ldrh	r3, [r3, #8]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	68b8      	ldr	r0, [r7, #8]
 800a4d2:	f7ff fab5 	bl	8009a40 <tcp_recved>
    pbuf_free(p);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7fe fb40 	bl	8008b5c <pbuf_free>
 800a4dc:	e008      	b.n	800a4f0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a4de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d104      	bne.n	800a4f0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a4e6:	68b8      	ldr	r0, [r7, #8]
 800a4e8:	f7fe ffe6 	bl	80094b8 <tcp_close>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	e000      	b.n	800a4f2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	08016514 	.word	0x08016514
 800a500:	08016a84 	.word	0x08016a84
 800a504:	08016558 	.word	0x08016558

0800a508 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a516:	2b00      	cmp	r3, #0
 800a518:	db01      	blt.n	800a51e <tcp_kill_prio+0x16>
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	e000      	b.n	800a520 <tcp_kill_prio+0x18>
 800a51e:	237f      	movs	r3, #127	; 0x7f
 800a520:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a522:	7afb      	ldrb	r3, [r7, #11]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d034      	beq.n	800a592 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a536:	4b19      	ldr	r3, [pc, #100]	; (800a59c <tcp_kill_prio+0x94>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	e01f      	b.n	800a57e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	7d5b      	ldrb	r3, [r3, #21]
 800a542:	7afa      	ldrb	r2, [r7, #11]
 800a544:	429a      	cmp	r2, r3
 800a546:	d80c      	bhi.n	800a562 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a54c:	7afa      	ldrb	r2, [r7, #11]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d112      	bne.n	800a578 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a552:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <tcp_kill_prio+0x98>)
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d80a      	bhi.n	800a578 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a562:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <tcp_kill_prio+0x98>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	7d5b      	ldrb	r3, [r3, #21]
 800a576:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	617b      	str	r3, [r7, #20]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1dc      	bne.n	800a53e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a58a:	6938      	ldr	r0, [r7, #16]
 800a58c:	f7ff f87e 	bl	800968c <tcp_abort>
 800a590:	e000      	b.n	800a594 <tcp_kill_prio+0x8c>
    return;
 800a592:	bf00      	nop
  }
}
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	20006e50 	.word	0x20006e50
 800a5a0:	20006e54 	.word	0x20006e54

0800a5a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	2b08      	cmp	r3, #8
 800a5b2:	d009      	beq.n	800a5c8 <tcp_kill_state+0x24>
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	2b09      	cmp	r3, #9
 800a5b8:	d006      	beq.n	800a5c8 <tcp_kill_state+0x24>
 800a5ba:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <tcp_kill_state+0x80>)
 800a5bc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a5c0:	4919      	ldr	r1, [pc, #100]	; (800a628 <tcp_kill_state+0x84>)
 800a5c2:	481a      	ldr	r0, [pc, #104]	; (800a62c <tcp_kill_state+0x88>)
 800a5c4:	f009 fdf2 	bl	80141ac <iprintf>

  inactivity = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5d0:	4b17      	ldr	r3, [pc, #92]	; (800a630 <tcp_kill_state+0x8c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e017      	b.n	800a608 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	7d1b      	ldrb	r3, [r3, #20]
 800a5dc:	79fa      	ldrb	r2, [r7, #7]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d10f      	bne.n	800a602 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5e2:	4b14      	ldr	r3, [pc, #80]	; (800a634 <tcp_kill_state+0x90>)
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d807      	bhi.n	800a602 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a5f2:	4b10      	ldr	r3, [pc, #64]	; (800a634 <tcp_kill_state+0x90>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e4      	bne.n	800a5d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a614:	2100      	movs	r1, #0
 800a616:	6938      	ldr	r0, [r7, #16]
 800a618:	f7fe ff7a 	bl	8009510 <tcp_abandon>
  }
}
 800a61c:	bf00      	nop
 800a61e:	3718      	adds	r7, #24
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	08016514 	.word	0x08016514
 800a628:	08016aa0 	.word	0x08016aa0
 800a62c:	08016558 	.word	0x08016558
 800a630:	20006e50 	.word	0x20006e50
 800a634:	20006e54 	.word	0x20006e54

0800a638 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a646:	4b12      	ldr	r3, [pc, #72]	; (800a690 <tcp_kill_timewait+0x58>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e012      	b.n	800a674 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a64e:	4b11      	ldr	r3, [pc, #68]	; (800a694 <tcp_kill_timewait+0x5c>)
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d807      	bhi.n	800a66e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a65e:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <tcp_kill_timewait+0x5c>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e9      	bne.n	800a64e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a680:	68b8      	ldr	r0, [r7, #8]
 800a682:	f7ff f803 	bl	800968c <tcp_abort>
  }
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20006e60 	.word	0x20006e60
 800a694:	20006e54 	.word	0x20006e54

0800a698 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a69e:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <tcp_handle_closepend+0x48>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a6a4:	e014      	b.n	800a6d0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	8b5b      	ldrh	r3, [r3, #26]
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d009      	beq.n	800a6cc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	8b5b      	ldrh	r3, [r3, #26]
 800a6bc:	f023 0308 	bic.w	r3, r3, #8
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7fe fe8c 	bl	80093e4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1e7      	bne.n	800a6a6 <tcp_handle_closepend+0xe>
  }
}
 800a6d6:	bf00      	nop
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20006e50 	.word	0x20006e50

0800a6e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f7fd fbce 	bl	8007e90 <memp_malloc>
 800a6f4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d126      	bne.n	800a74a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a6fc:	f7ff ffcc 	bl	800a698 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a700:	f7ff ff9a 	bl	800a638 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a704:	2001      	movs	r0, #1
 800a706:	f7fd fbc3 	bl	8007e90 <memp_malloc>
 800a70a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d11b      	bne.n	800a74a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a712:	2009      	movs	r0, #9
 800a714:	f7ff ff46 	bl	800a5a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a718:	2001      	movs	r0, #1
 800a71a:	f7fd fbb9 	bl	8007e90 <memp_malloc>
 800a71e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d111      	bne.n	800a74a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a726:	2008      	movs	r0, #8
 800a728:	f7ff ff3c 	bl	800a5a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a72c:	2001      	movs	r0, #1
 800a72e:	f7fd fbaf 	bl	8007e90 <memp_malloc>
 800a732:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d107      	bne.n	800a74a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7ff fee3 	bl	800a508 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a742:	2001      	movs	r0, #1
 800a744:	f7fd fba4 	bl	8007e90 <memp_malloc>
 800a748:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d03f      	beq.n	800a7d0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a750:	229c      	movs	r2, #156	; 0x9c
 800a752:	2100      	movs	r1, #0
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f009 fd21 	bl	801419c <memset>
    pcb->prio = prio;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	79fa      	ldrb	r2, [r7, #7]
 800a75e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a766:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a770:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	22ff      	movs	r2, #255	; 0xff
 800a77e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a786:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2206      	movs	r2, #6
 800a78c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2206      	movs	r2, #6
 800a794:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a79c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <tcp_alloc+0xf8>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a7ae:	4b0c      	ldr	r3, [pc, #48]	; (800a7e0 <tcp_alloc+0xfc>)
 800a7b0:	781a      	ldrb	r2, [r3, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a7bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4a08      	ldr	r2, [pc, #32]	; (800a7e4 <tcp_alloc+0x100>)
 800a7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4a07      	ldr	r2, [pc, #28]	; (800a7e8 <tcp_alloc+0x104>)
 800a7cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20006e54 	.word	0x20006e54
 800a7e0:	20000532 	.word	0x20000532
 800a7e4:	0800a49d 	.word	0x0800a49d
 800a7e8:	006ddd00 	.word	0x006ddd00

0800a7ec <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a7f6:	2040      	movs	r0, #64	; 0x40
 800a7f8:	f7ff ff74 	bl	800a6e4 <tcp_alloc>
 800a7fc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	611a      	str	r2, [r3, #16]
  }
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	7d1b      	ldrb	r3, [r3, #20]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d106      	bne.n	800a852 <tcp_recv+0x26>
 800a844:	4b07      	ldr	r3, [pc, #28]	; (800a864 <tcp_recv+0x38>)
 800a846:	f240 72df 	movw	r2, #2015	; 0x7df
 800a84a:	4907      	ldr	r1, [pc, #28]	; (800a868 <tcp_recv+0x3c>)
 800a84c:	4807      	ldr	r0, [pc, #28]	; (800a86c <tcp_recv+0x40>)
 800a84e:	f009 fcad 	bl	80141ac <iprintf>
    pcb->recv = recv;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	08016514 	.word	0x08016514
 800a868:	08016ab0 	.word	0x08016ab0
 800a86c:	08016558 	.word	0x08016558

0800a870 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00e      	beq.n	800a89e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	7d1b      	ldrb	r3, [r3, #20]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d106      	bne.n	800a896 <tcp_sent+0x26>
 800a888:	4b07      	ldr	r3, [pc, #28]	; (800a8a8 <tcp_sent+0x38>)
 800a88a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a88e:	4907      	ldr	r1, [pc, #28]	; (800a8ac <tcp_sent+0x3c>)
 800a890:	4807      	ldr	r0, [pc, #28]	; (800a8b0 <tcp_sent+0x40>)
 800a892:	f009 fc8b 	bl	80141ac <iprintf>
    pcb->sent = sent;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	08016514 	.word	0x08016514
 800a8ac:	08016ad8 	.word	0x08016ad8
 800a8b0:	08016558 	.word	0x08016558

0800a8b4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00e      	beq.n	800a8e2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7d1b      	ldrb	r3, [r3, #20]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d106      	bne.n	800a8da <tcp_err+0x26>
 800a8cc:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <tcp_err+0x38>)
 800a8ce:	f640 020d 	movw	r2, #2061	; 0x80d
 800a8d2:	4907      	ldr	r1, [pc, #28]	; (800a8f0 <tcp_err+0x3c>)
 800a8d4:	4807      	ldr	r0, [pc, #28]	; (800a8f4 <tcp_err+0x40>)
 800a8d6:	f009 fc69 	bl	80141ac <iprintf>
    pcb->errf = err;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	08016514 	.word	0x08016514
 800a8f0:	08016b00 	.word	0x08016b00
 800a8f4:	08016558 	.word	0x08016558

0800a8f8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d008      	beq.n	800a91a <tcp_accept+0x22>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7d1b      	ldrb	r3, [r3, #20]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d104      	bne.n	800a91a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	619a      	str	r2, [r3, #24]
  }
}
 800a91a:	bf00      	nop
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
	...

0800a928 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4613      	mov	r3, r2
 800a934:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d107      	bne.n	800a94c <tcp_poll+0x24>
 800a93c:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <tcp_poll+0x50>)
 800a93e:	f640 023d 	movw	r2, #2109	; 0x83d
 800a942:	490e      	ldr	r1, [pc, #56]	; (800a97c <tcp_poll+0x54>)
 800a944:	480e      	ldr	r0, [pc, #56]	; (800a980 <tcp_poll+0x58>)
 800a946:	f009 fc31 	bl	80141ac <iprintf>
 800a94a:	e011      	b.n	800a970 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	7d1b      	ldrb	r3, [r3, #20]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d106      	bne.n	800a962 <tcp_poll+0x3a>
 800a954:	4b08      	ldr	r3, [pc, #32]	; (800a978 <tcp_poll+0x50>)
 800a956:	f640 023e 	movw	r2, #2110	; 0x83e
 800a95a:	490a      	ldr	r1, [pc, #40]	; (800a984 <tcp_poll+0x5c>)
 800a95c:	4808      	ldr	r0, [pc, #32]	; (800a980 <tcp_poll+0x58>)
 800a95e:	f009 fc25 	bl	80141ac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	79fa      	ldrb	r2, [r7, #7]
 800a96e:	775a      	strb	r2, [r3, #29]
}
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	08016514 	.word	0x08016514
 800a97c:	08016b28 	.word	0x08016b28
 800a980:	08016558 	.word	0x08016558
 800a984:	08016b40 	.word	0x08016b40

0800a988 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d107      	bne.n	800a9a6 <tcp_pcb_purge+0x1e>
 800a996:	4b21      	ldr	r3, [pc, #132]	; (800aa1c <tcp_pcb_purge+0x94>)
 800a998:	f640 0251 	movw	r2, #2129	; 0x851
 800a99c:	4920      	ldr	r1, [pc, #128]	; (800aa20 <tcp_pcb_purge+0x98>)
 800a99e:	4821      	ldr	r0, [pc, #132]	; (800aa24 <tcp_pcb_purge+0x9c>)
 800a9a0:	f009 fc04 	bl	80141ac <iprintf>
 800a9a4:	e037      	b.n	800aa16 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7d1b      	ldrb	r3, [r3, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d033      	beq.n	800aa16 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a9b2:	2b0a      	cmp	r3, #10
 800a9b4:	d02f      	beq.n	800aa16 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d02b      	beq.n	800aa16 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe f8c6 	bl	8008b5c <pbuf_free>
      pcb->refused_data = NULL;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f986 	bl	800acf0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9ea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff fcdb 	bl	800a3ac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fcd6 	bl	800a3ac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	08016514 	.word	0x08016514
 800aa20:	08016b60 	.word	0x08016b60
 800aa24:	08016558 	.word	0x08016558

0800aa28 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d106      	bne.n	800aa46 <tcp_pcb_remove+0x1e>
 800aa38:	4b3e      	ldr	r3, [pc, #248]	; (800ab34 <tcp_pcb_remove+0x10c>)
 800aa3a:	f640 0283 	movw	r2, #2179	; 0x883
 800aa3e:	493e      	ldr	r1, [pc, #248]	; (800ab38 <tcp_pcb_remove+0x110>)
 800aa40:	483e      	ldr	r0, [pc, #248]	; (800ab3c <tcp_pcb_remove+0x114>)
 800aa42:	f009 fbb3 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d106      	bne.n	800aa5a <tcp_pcb_remove+0x32>
 800aa4c:	4b39      	ldr	r3, [pc, #228]	; (800ab34 <tcp_pcb_remove+0x10c>)
 800aa4e:	f640 0284 	movw	r2, #2180	; 0x884
 800aa52:	493b      	ldr	r1, [pc, #236]	; (800ab40 <tcp_pcb_remove+0x118>)
 800aa54:	4839      	ldr	r0, [pc, #228]	; (800ab3c <tcp_pcb_remove+0x114>)
 800aa56:	f009 fba9 	bl	80141ac <iprintf>

  TCP_RMV(pcblist, pcb);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d105      	bne.n	800aa70 <tcp_pcb_remove+0x48>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68da      	ldr	r2, [r3, #12]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	e013      	b.n	800aa98 <tcp_pcb_remove+0x70>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e00c      	b.n	800aa92 <tcp_pcb_remove+0x6a>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d104      	bne.n	800aa8c <tcp_pcb_remove+0x64>
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	60da      	str	r2, [r3, #12]
 800aa8a:	e005      	b.n	800aa98 <tcp_pcb_remove+0x70>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1ef      	bne.n	800aa78 <tcp_pcb_remove+0x50>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800aa9e:	6838      	ldr	r0, [r7, #0]
 800aaa0:	f7ff ff72 	bl	800a988 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	7d1b      	ldrb	r3, [r3, #20]
 800aaa8:	2b0a      	cmp	r3, #10
 800aaaa:	d013      	beq.n	800aad4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d00f      	beq.n	800aad4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	8b5b      	ldrh	r3, [r3, #26]
 800aab8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d009      	beq.n	800aad4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	8b5b      	ldrh	r3, [r3, #26]
 800aac4:	f043 0302 	orr.w	r3, r3, #2
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aace:	6838      	ldr	r0, [r7, #0]
 800aad0:	f003 fbc2 	bl	800e258 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	7d1b      	ldrb	r3, [r3, #20]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d020      	beq.n	800ab1e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d006      	beq.n	800aaf2 <tcp_pcb_remove+0xca>
 800aae4:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <tcp_pcb_remove+0x10c>)
 800aae6:	f640 0293 	movw	r2, #2195	; 0x893
 800aaea:	4916      	ldr	r1, [pc, #88]	; (800ab44 <tcp_pcb_remove+0x11c>)
 800aaec:	4813      	ldr	r0, [pc, #76]	; (800ab3c <tcp_pcb_remove+0x114>)
 800aaee:	f009 fb5d 	bl	80141ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d006      	beq.n	800ab08 <tcp_pcb_remove+0xe0>
 800aafa:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <tcp_pcb_remove+0x10c>)
 800aafc:	f640 0294 	movw	r2, #2196	; 0x894
 800ab00:	4911      	ldr	r1, [pc, #68]	; (800ab48 <tcp_pcb_remove+0x120>)
 800ab02:	480e      	ldr	r0, [pc, #56]	; (800ab3c <tcp_pcb_remove+0x114>)
 800ab04:	f009 fb52 	bl	80141ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d006      	beq.n	800ab1e <tcp_pcb_remove+0xf6>
 800ab10:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <tcp_pcb_remove+0x10c>)
 800ab12:	f640 0296 	movw	r2, #2198	; 0x896
 800ab16:	490d      	ldr	r1, [pc, #52]	; (800ab4c <tcp_pcb_remove+0x124>)
 800ab18:	4808      	ldr	r0, [pc, #32]	; (800ab3c <tcp_pcb_remove+0x114>)
 800ab1a:	f009 fb47 	bl	80141ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2200      	movs	r2, #0
 800ab22:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2200      	movs	r2, #0
 800ab28:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	08016514 	.word	0x08016514
 800ab38:	08016b7c 	.word	0x08016b7c
 800ab3c:	08016558 	.word	0x08016558
 800ab40:	08016b98 	.word	0x08016b98
 800ab44:	08016bb8 	.word	0x08016bb8
 800ab48:	08016bd0 	.word	0x08016bd0
 800ab4c:	08016bec 	.word	0x08016bec

0800ab50 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <tcp_next_iss+0x1c>
 800ab5e:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <tcp_next_iss+0x38>)
 800ab60:	f640 02af 	movw	r2, #2223	; 0x8af
 800ab64:	4909      	ldr	r1, [pc, #36]	; (800ab8c <tcp_next_iss+0x3c>)
 800ab66:	480a      	ldr	r0, [pc, #40]	; (800ab90 <tcp_next_iss+0x40>)
 800ab68:	f009 fb20 	bl	80141ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ab6c:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <tcp_next_iss+0x44>)
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <tcp_next_iss+0x48>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4413      	add	r3, r2
 800ab76:	4a07      	ldr	r2, [pc, #28]	; (800ab94 <tcp_next_iss+0x44>)
 800ab78:	6013      	str	r3, [r2, #0]
  return iss;
 800ab7a:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <tcp_next_iss+0x44>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	08016514 	.word	0x08016514
 800ab8c:	08016c04 	.word	0x08016c04
 800ab90:	08016558 	.word	0x08016558
 800ab94:	20000018 	.word	0x20000018
 800ab98:	20006e54 	.word	0x20006e54

0800ab9c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d106      	bne.n	800abbe <tcp_eff_send_mss_netif+0x22>
 800abb0:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <tcp_eff_send_mss_netif+0x68>)
 800abb2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800abb6:	4914      	ldr	r1, [pc, #80]	; (800ac08 <tcp_eff_send_mss_netif+0x6c>)
 800abb8:	4814      	ldr	r0, [pc, #80]	; (800ac0c <tcp_eff_send_mss_netif+0x70>)
 800abba:	f009 faf7 	bl	80141ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800abc4:	89fb      	ldrh	r3, [r7, #14]
 800abc6:	e019      	b.n	800abfc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abcc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800abce:	8afb      	ldrh	r3, [r7, #22]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d012      	beq.n	800abfa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800abd4:	2328      	movs	r3, #40	; 0x28
 800abd6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800abd8:	8afa      	ldrh	r2, [r7, #22]
 800abda:	8abb      	ldrh	r3, [r7, #20]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d904      	bls.n	800abea <tcp_eff_send_mss_netif+0x4e>
 800abe0:	8afa      	ldrh	r2, [r7, #22]
 800abe2:	8abb      	ldrh	r3, [r7, #20]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	e000      	b.n	800abec <tcp_eff_send_mss_netif+0x50>
 800abea:	2300      	movs	r3, #0
 800abec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800abee:	8a7a      	ldrh	r2, [r7, #18]
 800abf0:	89fb      	ldrh	r3, [r7, #14]
 800abf2:	4293      	cmp	r3, r2
 800abf4:	bf28      	it	cs
 800abf6:	4613      	movcs	r3, r2
 800abf8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800abfa:	89fb      	ldrh	r3, [r7, #14]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3718      	adds	r7, #24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	08016514 	.word	0x08016514
 800ac08:	08016c20 	.word	0x08016c20
 800ac0c:	08016558 	.word	0x08016558

0800ac10 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d119      	bne.n	800ac58 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ac24:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ac26:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ac2a:	4910      	ldr	r1, [pc, #64]	; (800ac6c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ac2c:	4810      	ldr	r0, [pc, #64]	; (800ac70 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ac2e:	f009 fabd 	bl	80141ac <iprintf>

  while (pcb != NULL) {
 800ac32:	e011      	b.n	800ac58 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d108      	bne.n	800ac52 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7fe fd20 	bl	800968c <tcp_abort>
      pcb = next;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	e002      	b.n	800ac58 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1ea      	bne.n	800ac34 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ac5e:	bf00      	nop
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	08016514 	.word	0x08016514
 800ac6c:	08016c48 	.word	0x08016c48
 800ac70:	08016558 	.word	0x08016558

0800ac74 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d02a      	beq.n	800acda <tcp_netif_ip_addr_changed+0x66>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d026      	beq.n	800acda <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ac8c:	4b15      	ldr	r3, [pc, #84]	; (800ace4 <tcp_netif_ip_addr_changed+0x70>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff ffbc 	bl	800ac10 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ac98:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <tcp_netif_ip_addr_changed+0x74>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff ffb6 	bl	800ac10 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d017      	beq.n	800acda <tcp_netif_ip_addr_changed+0x66>
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d013      	beq.n	800acda <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800acb2:	4b0e      	ldr	r3, [pc, #56]	; (800acec <tcp_netif_ip_addr_changed+0x78>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e00c      	b.n	800acd4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d103      	bne.n	800acce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1ef      	bne.n	800acba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800acda:	bf00      	nop
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20006e50 	.word	0x20006e50
 800ace8:	20006e5c 	.word	0x20006e5c
 800acec:	20006e58 	.word	0x20006e58

0800acf0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d007      	beq.n	800ad10 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fb51 	bl	800a3ac <tcp_segs_free>
    pcb->ooseq = NULL;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ad18:	b590      	push	{r4, r7, lr}
 800ad1a:	b08d      	sub	sp, #52	; 0x34
 800ad1c:	af04      	add	r7, sp, #16
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d105      	bne.n	800ad34 <tcp_input+0x1c>
 800ad28:	4b9b      	ldr	r3, [pc, #620]	; (800af98 <tcp_input+0x280>)
 800ad2a:	2283      	movs	r2, #131	; 0x83
 800ad2c:	499b      	ldr	r1, [pc, #620]	; (800af9c <tcp_input+0x284>)
 800ad2e:	489c      	ldr	r0, [pc, #624]	; (800afa0 <tcp_input+0x288>)
 800ad30:	f009 fa3c 	bl	80141ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4a9a      	ldr	r2, [pc, #616]	; (800afa4 <tcp_input+0x28c>)
 800ad3a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	895b      	ldrh	r3, [r3, #10]
 800ad40:	2b13      	cmp	r3, #19
 800ad42:	f240 83c4 	bls.w	800b4ce <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ad46:	4b98      	ldr	r3, [pc, #608]	; (800afa8 <tcp_input+0x290>)
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	4a97      	ldr	r2, [pc, #604]	; (800afa8 <tcp_input+0x290>)
 800ad4c:	6812      	ldr	r2, [r2, #0]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f008 f9e7 	bl	8013124 <ip4_addr_isbroadcast_u32>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f040 83ba 	bne.w	800b4d2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ad5e:	4b92      	ldr	r3, [pc, #584]	; (800afa8 <tcp_input+0x290>)
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ad66:	2be0      	cmp	r3, #224	; 0xe0
 800ad68:	f000 83b3 	beq.w	800b4d2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ad6c:	4b8d      	ldr	r3, [pc, #564]	; (800afa4 <tcp_input+0x28c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	899b      	ldrh	r3, [r3, #12]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fc fbcb 	bl	8007510 <lwip_htons>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	0b1b      	lsrs	r3, r3, #12
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ad86:	7cbb      	ldrb	r3, [r7, #18]
 800ad88:	2b13      	cmp	r3, #19
 800ad8a:	f240 83a4 	bls.w	800b4d6 <tcp_input+0x7be>
 800ad8e:	7cbb      	ldrb	r3, [r7, #18]
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	891b      	ldrh	r3, [r3, #8]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	f200 839d 	bhi.w	800b4d6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ad9c:	7cbb      	ldrb	r3, [r7, #18]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	3b14      	subs	r3, #20
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	4b81      	ldr	r3, [pc, #516]	; (800afac <tcp_input+0x294>)
 800ada6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ada8:	4b81      	ldr	r3, [pc, #516]	; (800afb0 <tcp_input+0x298>)
 800adaa:	2200      	movs	r2, #0
 800adac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	895a      	ldrh	r2, [r3, #10]
 800adb2:	7cbb      	ldrb	r3, [r7, #18]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d309      	bcc.n	800adce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800adba:	4b7c      	ldr	r3, [pc, #496]	; (800afac <tcp_input+0x294>)
 800adbc:	881a      	ldrh	r2, [r3, #0]
 800adbe:	4b7d      	ldr	r3, [pc, #500]	; (800afb4 <tcp_input+0x29c>)
 800adc0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800adc2:	7cbb      	ldrb	r3, [r7, #18]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7fd fe42 	bl	8008a50 <pbuf_remove_header>
 800adcc:	e04e      	b.n	800ae6c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d105      	bne.n	800ade2 <tcp_input+0xca>
 800add6:	4b70      	ldr	r3, [pc, #448]	; (800af98 <tcp_input+0x280>)
 800add8:	22c2      	movs	r2, #194	; 0xc2
 800adda:	4977      	ldr	r1, [pc, #476]	; (800afb8 <tcp_input+0x2a0>)
 800addc:	4870      	ldr	r0, [pc, #448]	; (800afa0 <tcp_input+0x288>)
 800adde:	f009 f9e5 	bl	80141ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ade2:	2114      	movs	r1, #20
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7fd fe33 	bl	8008a50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	895a      	ldrh	r2, [r3, #10]
 800adee:	4b71      	ldr	r3, [pc, #452]	; (800afb4 <tcp_input+0x29c>)
 800adf0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800adf2:	4b6e      	ldr	r3, [pc, #440]	; (800afac <tcp_input+0x294>)
 800adf4:	881a      	ldrh	r2, [r3, #0]
 800adf6:	4b6f      	ldr	r3, [pc, #444]	; (800afb4 <tcp_input+0x29c>)
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800adfe:	4b6d      	ldr	r3, [pc, #436]	; (800afb4 <tcp_input+0x29c>)
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7fd fe23 	bl	8008a50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	895b      	ldrh	r3, [r3, #10]
 800ae10:	8a3a      	ldrh	r2, [r7, #16]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	f200 8361 	bhi.w	800b4da <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	4a64      	ldr	r2, [pc, #400]	; (800afb0 <tcp_input+0x298>)
 800ae20:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	8a3a      	ldrh	r2, [r7, #16]
 800ae28:	4611      	mov	r1, r2
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fd fe10 	bl	8008a50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	891a      	ldrh	r2, [r3, #8]
 800ae34:	8a3b      	ldrh	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	895b      	ldrh	r3, [r3, #10]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d005      	beq.n	800ae52 <tcp_input+0x13a>
 800ae46:	4b54      	ldr	r3, [pc, #336]	; (800af98 <tcp_input+0x280>)
 800ae48:	22df      	movs	r2, #223	; 0xdf
 800ae4a:	495c      	ldr	r1, [pc, #368]	; (800afbc <tcp_input+0x2a4>)
 800ae4c:	4854      	ldr	r0, [pc, #336]	; (800afa0 <tcp_input+0x288>)
 800ae4e:	f009 f9ad 	bl	80141ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	891a      	ldrh	r2, [r3, #8]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	891b      	ldrh	r3, [r3, #8]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d005      	beq.n	800ae6c <tcp_input+0x154>
 800ae60:	4b4d      	ldr	r3, [pc, #308]	; (800af98 <tcp_input+0x280>)
 800ae62:	22e0      	movs	r2, #224	; 0xe0
 800ae64:	4956      	ldr	r1, [pc, #344]	; (800afc0 <tcp_input+0x2a8>)
 800ae66:	484e      	ldr	r0, [pc, #312]	; (800afa0 <tcp_input+0x288>)
 800ae68:	f009 f9a0 	bl	80141ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ae6c:	4b4d      	ldr	r3, [pc, #308]	; (800afa4 <tcp_input+0x28c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	4a4b      	ldr	r2, [pc, #300]	; (800afa4 <tcp_input+0x28c>)
 800ae76:	6814      	ldr	r4, [r2, #0]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fc fb49 	bl	8007510 <lwip_htons>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ae82:	4b48      	ldr	r3, [pc, #288]	; (800afa4 <tcp_input+0x28c>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	885b      	ldrh	r3, [r3, #2]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	4a46      	ldr	r2, [pc, #280]	; (800afa4 <tcp_input+0x28c>)
 800ae8c:	6814      	ldr	r4, [r2, #0]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fc fb3e 	bl	8007510 <lwip_htons>
 800ae94:	4603      	mov	r3, r0
 800ae96:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae98:	4b42      	ldr	r3, [pc, #264]	; (800afa4 <tcp_input+0x28c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4a41      	ldr	r2, [pc, #260]	; (800afa4 <tcp_input+0x28c>)
 800aea0:	6814      	ldr	r4, [r2, #0]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fc fb49 	bl	800753a <lwip_htonl>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	6063      	str	r3, [r4, #4]
 800aeac:	6863      	ldr	r3, [r4, #4]
 800aeae:	4a45      	ldr	r2, [pc, #276]	; (800afc4 <tcp_input+0x2ac>)
 800aeb0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aeb2:	4b3c      	ldr	r3, [pc, #240]	; (800afa4 <tcp_input+0x28c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	4a3a      	ldr	r2, [pc, #232]	; (800afa4 <tcp_input+0x28c>)
 800aeba:	6814      	ldr	r4, [r2, #0]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fc fb3c 	bl	800753a <lwip_htonl>
 800aec2:	4603      	mov	r3, r0
 800aec4:	60a3      	str	r3, [r4, #8]
 800aec6:	68a3      	ldr	r3, [r4, #8]
 800aec8:	4a3f      	ldr	r2, [pc, #252]	; (800afc8 <tcp_input+0x2b0>)
 800aeca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aecc:	4b35      	ldr	r3, [pc, #212]	; (800afa4 <tcp_input+0x28c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	89db      	ldrh	r3, [r3, #14]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	4a33      	ldr	r2, [pc, #204]	; (800afa4 <tcp_input+0x28c>)
 800aed6:	6814      	ldr	r4, [r2, #0]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fc fb19 	bl	8007510 <lwip_htons>
 800aede:	4603      	mov	r3, r0
 800aee0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800aee2:	4b30      	ldr	r3, [pc, #192]	; (800afa4 <tcp_input+0x28c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	899b      	ldrh	r3, [r3, #12]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fc fb10 	bl	8007510 <lwip_htons>
 800aef0:	4603      	mov	r3, r0
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	4b34      	ldr	r3, [pc, #208]	; (800afcc <tcp_input+0x2b4>)
 800aefc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	891a      	ldrh	r2, [r3, #8]
 800af02:	4b33      	ldr	r3, [pc, #204]	; (800afd0 <tcp_input+0x2b8>)
 800af04:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800af06:	4b31      	ldr	r3, [pc, #196]	; (800afcc <tcp_input+0x2b4>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 0303 	and.w	r3, r3, #3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00c      	beq.n	800af2c <tcp_input+0x214>
    tcplen++;
 800af12:	4b2f      	ldr	r3, [pc, #188]	; (800afd0 <tcp_input+0x2b8>)
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	3301      	adds	r3, #1
 800af18:	b29a      	uxth	r2, r3
 800af1a:	4b2d      	ldr	r3, [pc, #180]	; (800afd0 <tcp_input+0x2b8>)
 800af1c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	891a      	ldrh	r2, [r3, #8]
 800af22:	4b2b      	ldr	r3, [pc, #172]	; (800afd0 <tcp_input+0x2b8>)
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	f200 82d9 	bhi.w	800b4de <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800af2c:	2300      	movs	r3, #0
 800af2e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af30:	4b28      	ldr	r3, [pc, #160]	; (800afd4 <tcp_input+0x2bc>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	61fb      	str	r3, [r7, #28]
 800af36:	e09d      	b.n	800b074 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	7d1b      	ldrb	r3, [r3, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d105      	bne.n	800af4c <tcp_input+0x234>
 800af40:	4b15      	ldr	r3, [pc, #84]	; (800af98 <tcp_input+0x280>)
 800af42:	22fb      	movs	r2, #251	; 0xfb
 800af44:	4924      	ldr	r1, [pc, #144]	; (800afd8 <tcp_input+0x2c0>)
 800af46:	4816      	ldr	r0, [pc, #88]	; (800afa0 <tcp_input+0x288>)
 800af48:	f009 f930 	bl	80141ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	7d1b      	ldrb	r3, [r3, #20]
 800af50:	2b0a      	cmp	r3, #10
 800af52:	d105      	bne.n	800af60 <tcp_input+0x248>
 800af54:	4b10      	ldr	r3, [pc, #64]	; (800af98 <tcp_input+0x280>)
 800af56:	22fc      	movs	r2, #252	; 0xfc
 800af58:	4920      	ldr	r1, [pc, #128]	; (800afdc <tcp_input+0x2c4>)
 800af5a:	4811      	ldr	r0, [pc, #68]	; (800afa0 <tcp_input+0x288>)
 800af5c:	f009 f926 	bl	80141ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	7d1b      	ldrb	r3, [r3, #20]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d105      	bne.n	800af74 <tcp_input+0x25c>
 800af68:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <tcp_input+0x280>)
 800af6a:	22fd      	movs	r2, #253	; 0xfd
 800af6c:	491c      	ldr	r1, [pc, #112]	; (800afe0 <tcp_input+0x2c8>)
 800af6e:	480c      	ldr	r0, [pc, #48]	; (800afa0 <tcp_input+0x288>)
 800af70:	f009 f91c 	bl	80141ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	7a1b      	ldrb	r3, [r3, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d033      	beq.n	800afe4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	7a1a      	ldrb	r2, [r3, #8]
 800af80:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <tcp_input+0x290>)
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af88:	3301      	adds	r3, #1
 800af8a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d029      	beq.n	800afe4 <tcp_input+0x2cc>
      prev = pcb;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	61bb      	str	r3, [r7, #24]
      continue;
 800af94:	e06b      	b.n	800b06e <tcp_input+0x356>
 800af96:	bf00      	nop
 800af98:	08016c7c 	.word	0x08016c7c
 800af9c:	08016cb0 	.word	0x08016cb0
 800afa0:	08016cc8 	.word	0x08016cc8
 800afa4:	20000544 	.word	0x20000544
 800afa8:	200038ec 	.word	0x200038ec
 800afac:	20000548 	.word	0x20000548
 800afb0:	2000054c 	.word	0x2000054c
 800afb4:	2000054a 	.word	0x2000054a
 800afb8:	08016cf0 	.word	0x08016cf0
 800afbc:	08016d00 	.word	0x08016d00
 800afc0:	08016d0c 	.word	0x08016d0c
 800afc4:	20000554 	.word	0x20000554
 800afc8:	20000558 	.word	0x20000558
 800afcc:	20000560 	.word	0x20000560
 800afd0:	2000055e 	.word	0x2000055e
 800afd4:	20006e50 	.word	0x20006e50
 800afd8:	08016d2c 	.word	0x08016d2c
 800afdc:	08016d54 	.word	0x08016d54
 800afe0:	08016d80 	.word	0x08016d80
    }

    if (pcb->remote_port == tcphdr->src &&
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	8b1a      	ldrh	r2, [r3, #24]
 800afe8:	4b94      	ldr	r3, [pc, #592]	; (800b23c <tcp_input+0x524>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d13a      	bne.n	800b06a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	8ada      	ldrh	r2, [r3, #22]
 800aff8:	4b90      	ldr	r3, [pc, #576]	; (800b23c <tcp_input+0x524>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	885b      	ldrh	r3, [r3, #2]
 800affe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b000:	429a      	cmp	r2, r3
 800b002:	d132      	bne.n	800b06a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	685a      	ldr	r2, [r3, #4]
 800b008:	4b8d      	ldr	r3, [pc, #564]	; (800b240 <tcp_input+0x528>)
 800b00a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d12c      	bne.n	800b06a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	4b8a      	ldr	r3, [pc, #552]	; (800b240 <tcp_input+0x528>)
 800b016:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b018:	429a      	cmp	r2, r3
 800b01a:	d126      	bne.n	800b06a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	429a      	cmp	r2, r3
 800b024:	d106      	bne.n	800b034 <tcp_input+0x31c>
 800b026:	4b87      	ldr	r3, [pc, #540]	; (800b244 <tcp_input+0x52c>)
 800b028:	f240 120d 	movw	r2, #269	; 0x10d
 800b02c:	4986      	ldr	r1, [pc, #536]	; (800b248 <tcp_input+0x530>)
 800b02e:	4887      	ldr	r0, [pc, #540]	; (800b24c <tcp_input+0x534>)
 800b030:	f009 f8bc 	bl	80141ac <iprintf>
      if (prev != NULL) {
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00a      	beq.n	800b050 <tcp_input+0x338>
        prev->next = pcb->next;
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b042:	4b83      	ldr	r3, [pc, #524]	; (800b250 <tcp_input+0x538>)
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b04a:	4a81      	ldr	r2, [pc, #516]	; (800b250 <tcp_input+0x538>)
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	69fa      	ldr	r2, [r7, #28]
 800b056:	429a      	cmp	r2, r3
 800b058:	d111      	bne.n	800b07e <tcp_input+0x366>
 800b05a:	4b7a      	ldr	r3, [pc, #488]	; (800b244 <tcp_input+0x52c>)
 800b05c:	f240 1215 	movw	r2, #277	; 0x115
 800b060:	497c      	ldr	r1, [pc, #496]	; (800b254 <tcp_input+0x53c>)
 800b062:	487a      	ldr	r0, [pc, #488]	; (800b24c <tcp_input+0x534>)
 800b064:	f009 f8a2 	bl	80141ac <iprintf>
      break;
 800b068:	e009      	b.n	800b07e <tcp_input+0x366>
    }
    prev = pcb;
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	61fb      	str	r3, [r7, #28]
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2b00      	cmp	r3, #0
 800b078:	f47f af5e 	bne.w	800af38 <tcp_input+0x220>
 800b07c:	e000      	b.n	800b080 <tcp_input+0x368>
      break;
 800b07e:	bf00      	nop
  }

  if (pcb == NULL) {
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f040 8095 	bne.w	800b1b2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b088:	4b73      	ldr	r3, [pc, #460]	; (800b258 <tcp_input+0x540>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	61fb      	str	r3, [r7, #28]
 800b08e:	e03f      	b.n	800b110 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	7d1b      	ldrb	r3, [r3, #20]
 800b094:	2b0a      	cmp	r3, #10
 800b096:	d006      	beq.n	800b0a6 <tcp_input+0x38e>
 800b098:	4b6a      	ldr	r3, [pc, #424]	; (800b244 <tcp_input+0x52c>)
 800b09a:	f240 121f 	movw	r2, #287	; 0x11f
 800b09e:	496f      	ldr	r1, [pc, #444]	; (800b25c <tcp_input+0x544>)
 800b0a0:	486a      	ldr	r0, [pc, #424]	; (800b24c <tcp_input+0x534>)
 800b0a2:	f009 f883 	bl	80141ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	7a1b      	ldrb	r3, [r3, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d009      	beq.n	800b0c2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	7a1a      	ldrb	r2, [r3, #8]
 800b0b2:	4b63      	ldr	r3, [pc, #396]	; (800b240 <tcp_input+0x528>)
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d122      	bne.n	800b108 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	8b1a      	ldrh	r2, [r3, #24]
 800b0c6:	4b5d      	ldr	r3, [pc, #372]	; (800b23c <tcp_input+0x524>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d11b      	bne.n	800b10a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	8ada      	ldrh	r2, [r3, #22]
 800b0d6:	4b59      	ldr	r3, [pc, #356]	; (800b23c <tcp_input+0x524>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	885b      	ldrh	r3, [r3, #2]
 800b0dc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d113      	bne.n	800b10a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	4b56      	ldr	r3, [pc, #344]	; (800b240 <tcp_input+0x528>)
 800b0e8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d10d      	bne.n	800b10a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	4b53      	ldr	r3, [pc, #332]	; (800b240 <tcp_input+0x528>)
 800b0f4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d107      	bne.n	800b10a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b0fa:	69f8      	ldr	r0, [r7, #28]
 800b0fc:	f000 fb54 	bl	800b7a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7fd fd2b 	bl	8008b5c <pbuf_free>
        return;
 800b106:	e1f0      	b.n	800b4ea <tcp_input+0x7d2>
        continue;
 800b108:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	61fb      	str	r3, [r7, #28]
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1bc      	bne.n	800b090 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b11a:	4b51      	ldr	r3, [pc, #324]	; (800b260 <tcp_input+0x548>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	e02a      	b.n	800b178 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	7a1b      	ldrb	r3, [r3, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00c      	beq.n	800b144 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	7a1a      	ldrb	r2, [r3, #8]
 800b12e:	4b44      	ldr	r3, [pc, #272]	; (800b240 <tcp_input+0x528>)
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b136:	3301      	adds	r3, #1
 800b138:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d002      	beq.n	800b144 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	61bb      	str	r3, [r7, #24]
        continue;
 800b142:	e016      	b.n	800b172 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	8ada      	ldrh	r2, [r3, #22]
 800b148:	4b3c      	ldr	r3, [pc, #240]	; (800b23c <tcp_input+0x524>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	885b      	ldrh	r3, [r3, #2]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	429a      	cmp	r2, r3
 800b152:	d10c      	bne.n	800b16e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	4b39      	ldr	r3, [pc, #228]	; (800b240 <tcp_input+0x528>)
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d00f      	beq.n	800b180 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00d      	beq.n	800b182 <tcp_input+0x46a>
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d009      	beq.n	800b182 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1d1      	bne.n	800b122 <tcp_input+0x40a>
 800b17e:	e000      	b.n	800b182 <tcp_input+0x46a>
            break;
 800b180:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d014      	beq.n	800b1b2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b196:	4b32      	ldr	r3, [pc, #200]	; (800b260 <tcp_input+0x548>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b19e:	4a30      	ldr	r2, [pc, #192]	; (800b260 <tcp_input+0x548>)
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b1a4:	6978      	ldr	r0, [r7, #20]
 800b1a6:	f000 fa01 	bl	800b5ac <tcp_listen_input>
      }
      pbuf_free(p);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7fd fcd6 	bl	8008b5c <pbuf_free>
      return;
 800b1b0:	e19b      	b.n	800b4ea <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8160 	beq.w	800b47a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b1ba:	4b2a      	ldr	r3, [pc, #168]	; (800b264 <tcp_input+0x54c>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	891a      	ldrh	r2, [r3, #8]
 800b1c4:	4b27      	ldr	r3, [pc, #156]	; (800b264 <tcp_input+0x54c>)
 800b1c6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b1c8:	4a26      	ldr	r2, [pc, #152]	; (800b264 <tcp_input+0x54c>)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b1ce:	4b1b      	ldr	r3, [pc, #108]	; (800b23c <tcp_input+0x524>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a24      	ldr	r2, [pc, #144]	; (800b264 <tcp_input+0x54c>)
 800b1d4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b1d6:	4b24      	ldr	r3, [pc, #144]	; (800b268 <tcp_input+0x550>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b1dc:	4b23      	ldr	r3, [pc, #140]	; (800b26c <tcp_input+0x554>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b1e2:	4b23      	ldr	r3, [pc, #140]	; (800b270 <tcp_input+0x558>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b1e8:	4b22      	ldr	r3, [pc, #136]	; (800b274 <tcp_input+0x55c>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d006      	beq.n	800b202 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	7b5b      	ldrb	r3, [r3, #13]
 800b1f8:	f043 0301 	orr.w	r3, r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b206:	2b00      	cmp	r3, #0
 800b208:	d038      	beq.n	800b27c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b20a:	69f8      	ldr	r0, [r7, #28]
 800b20c:	f7ff f852 	bl	800a2b4 <tcp_process_refused_data>
 800b210:	4603      	mov	r3, r0
 800b212:	f113 0f0d 	cmn.w	r3, #13
 800b216:	d007      	beq.n	800b228 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d02d      	beq.n	800b27c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b220:	4b15      	ldr	r3, [pc, #84]	; (800b278 <tcp_input+0x560>)
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d029      	beq.n	800b27c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f040 8104 	bne.w	800b43a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b232:	69f8      	ldr	r0, [r7, #28]
 800b234:	f003 fe16 	bl	800ee64 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b238:	e0ff      	b.n	800b43a <tcp_input+0x722>
 800b23a:	bf00      	nop
 800b23c:	20000544 	.word	0x20000544
 800b240:	200038ec 	.word	0x200038ec
 800b244:	08016c7c 	.word	0x08016c7c
 800b248:	08016da8 	.word	0x08016da8
 800b24c:	08016cc8 	.word	0x08016cc8
 800b250:	20006e50 	.word	0x20006e50
 800b254:	08016dd4 	.word	0x08016dd4
 800b258:	20006e60 	.word	0x20006e60
 800b25c:	08016e00 	.word	0x08016e00
 800b260:	20006e58 	.word	0x20006e58
 800b264:	20000534 	.word	0x20000534
 800b268:	20000564 	.word	0x20000564
 800b26c:	20000561 	.word	0x20000561
 800b270:	2000055c 	.word	0x2000055c
 800b274:	20000560 	.word	0x20000560
 800b278:	2000055e 	.word	0x2000055e
      }
    }
    tcp_input_pcb = pcb;
 800b27c:	4a9c      	ldr	r2, [pc, #624]	; (800b4f0 <tcp_input+0x7d8>)
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b282:	69f8      	ldr	r0, [r7, #28]
 800b284:	f000 fb0a 	bl	800b89c <tcp_process>
 800b288:	4603      	mov	r3, r0
 800b28a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b28c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b290:	f113 0f0d 	cmn.w	r3, #13
 800b294:	f000 80d3 	beq.w	800b43e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800b298:	4b96      	ldr	r3, [pc, #600]	; (800b4f4 <tcp_input+0x7dc>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	f003 0308 	and.w	r3, r3, #8
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d015      	beq.n	800b2d0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d008      	beq.n	800b2c0 <tcp_input+0x5a8>
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b4:	69fa      	ldr	r2, [r7, #28]
 800b2b6:	6912      	ldr	r2, [r2, #16]
 800b2b8:	f06f 010d 	mvn.w	r1, #13
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b2c0:	69f9      	ldr	r1, [r7, #28]
 800b2c2:	488d      	ldr	r0, [pc, #564]	; (800b4f8 <tcp_input+0x7e0>)
 800b2c4:	f7ff fbb0 	bl	800aa28 <tcp_pcb_remove>
        tcp_free(pcb);
 800b2c8:	69f8      	ldr	r0, [r7, #28]
 800b2ca:	f7fd fef7 	bl	80090bc <tcp_free>
 800b2ce:	e0c1      	b.n	800b454 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b2d4:	4b89      	ldr	r3, [pc, #548]	; (800b4fc <tcp_input+0x7e4>)
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01d      	beq.n	800b318 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b2dc:	4b87      	ldr	r3, [pc, #540]	; (800b4fc <tcp_input+0x7e4>)
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <tcp_input+0x5ea>
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	6910      	ldr	r0, [r2, #16]
 800b2f6:	89fa      	ldrh	r2, [r7, #14]
 800b2f8:	69f9      	ldr	r1, [r7, #28]
 800b2fa:	4798      	blx	r3
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	74fb      	strb	r3, [r7, #19]
 800b300:	e001      	b.n	800b306 <tcp_input+0x5ee>
 800b302:	2300      	movs	r3, #0
 800b304:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b306:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b30a:	f113 0f0d 	cmn.w	r3, #13
 800b30e:	f000 8098 	beq.w	800b442 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b312:	4b7a      	ldr	r3, [pc, #488]	; (800b4fc <tcp_input+0x7e4>)
 800b314:	2200      	movs	r2, #0
 800b316:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b318:	69f8      	ldr	r0, [r7, #28]
 800b31a:	f000 f907 	bl	800b52c <tcp_input_delayed_close>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	f040 8090 	bne.w	800b446 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b326:	4b76      	ldr	r3, [pc, #472]	; (800b500 <tcp_input+0x7e8>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d041      	beq.n	800b3b2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b332:	2b00      	cmp	r3, #0
 800b334:	d006      	beq.n	800b344 <tcp_input+0x62c>
 800b336:	4b73      	ldr	r3, [pc, #460]	; (800b504 <tcp_input+0x7ec>)
 800b338:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b33c:	4972      	ldr	r1, [pc, #456]	; (800b508 <tcp_input+0x7f0>)
 800b33e:	4873      	ldr	r0, [pc, #460]	; (800b50c <tcp_input+0x7f4>)
 800b340:	f008 ff34 	bl	80141ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	8b5b      	ldrh	r3, [r3, #26]
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d008      	beq.n	800b362 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b350:	4b6b      	ldr	r3, [pc, #428]	; (800b500 <tcp_input+0x7e8>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4618      	mov	r0, r3
 800b356:	f7fd fc01 	bl	8008b5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b35a:	69f8      	ldr	r0, [r7, #28]
 800b35c:	f7fe f996 	bl	800968c <tcp_abort>
            goto aborted;
 800b360:	e078      	b.n	800b454 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00c      	beq.n	800b386 <tcp_input+0x66e>
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	6918      	ldr	r0, [r3, #16]
 800b376:	4b62      	ldr	r3, [pc, #392]	; (800b500 <tcp_input+0x7e8>)
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	2300      	movs	r3, #0
 800b37c:	69f9      	ldr	r1, [r7, #28]
 800b37e:	47a0      	blx	r4
 800b380:	4603      	mov	r3, r0
 800b382:	74fb      	strb	r3, [r7, #19]
 800b384:	e008      	b.n	800b398 <tcp_input+0x680>
 800b386:	4b5e      	ldr	r3, [pc, #376]	; (800b500 <tcp_input+0x7e8>)
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	2300      	movs	r3, #0
 800b38c:	69f9      	ldr	r1, [r7, #28]
 800b38e:	2000      	movs	r0, #0
 800b390:	f7ff f884 	bl	800a49c <tcp_recv_null>
 800b394:	4603      	mov	r3, r0
 800b396:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b398:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b39c:	f113 0f0d 	cmn.w	r3, #13
 800b3a0:	d053      	beq.n	800b44a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b3a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b3aa:	4b55      	ldr	r3, [pc, #340]	; (800b500 <tcp_input+0x7e8>)
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b3b2:	4b50      	ldr	r3, [pc, #320]	; (800b4f4 <tcp_input+0x7dc>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	f003 0320 	and.w	r3, r3, #32
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d030      	beq.n	800b420 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d009      	beq.n	800b3da <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ca:	7b5a      	ldrb	r2, [r3, #13]
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3d0:	f042 0220 	orr.w	r2, r2, #32
 800b3d4:	b2d2      	uxtb	r2, r2
 800b3d6:	735a      	strb	r2, [r3, #13]
 800b3d8:	e022      	b.n	800b420 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b3e2:	d005      	beq.n	800b3f0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00b      	beq.n	800b412 <tcp_input+0x6fa>
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	6918      	ldr	r0, [r3, #16]
 800b404:	2300      	movs	r3, #0
 800b406:	2200      	movs	r2, #0
 800b408:	69f9      	ldr	r1, [r7, #28]
 800b40a:	47a0      	blx	r4
 800b40c:	4603      	mov	r3, r0
 800b40e:	74fb      	strb	r3, [r7, #19]
 800b410:	e001      	b.n	800b416 <tcp_input+0x6fe>
 800b412:	2300      	movs	r3, #0
 800b414:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b416:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b41a:	f113 0f0d 	cmn.w	r3, #13
 800b41e:	d016      	beq.n	800b44e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b420:	4b33      	ldr	r3, [pc, #204]	; (800b4f0 <tcp_input+0x7d8>)
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b426:	69f8      	ldr	r0, [r7, #28]
 800b428:	f000 f880 	bl	800b52c <tcp_input_delayed_close>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10f      	bne.n	800b452 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b432:	69f8      	ldr	r0, [r7, #28]
 800b434:	f002 ff10 	bl	800e258 <tcp_output>
 800b438:	e00c      	b.n	800b454 <tcp_input+0x73c>
        goto aborted;
 800b43a:	bf00      	nop
 800b43c:	e00a      	b.n	800b454 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b43e:	bf00      	nop
 800b440:	e008      	b.n	800b454 <tcp_input+0x73c>
              goto aborted;
 800b442:	bf00      	nop
 800b444:	e006      	b.n	800b454 <tcp_input+0x73c>
          goto aborted;
 800b446:	bf00      	nop
 800b448:	e004      	b.n	800b454 <tcp_input+0x73c>
            goto aborted;
 800b44a:	bf00      	nop
 800b44c:	e002      	b.n	800b454 <tcp_input+0x73c>
              goto aborted;
 800b44e:	bf00      	nop
 800b450:	e000      	b.n	800b454 <tcp_input+0x73c>
          goto aborted;
 800b452:	bf00      	nop
    tcp_input_pcb = NULL;
 800b454:	4b26      	ldr	r3, [pc, #152]	; (800b4f0 <tcp_input+0x7d8>)
 800b456:	2200      	movs	r2, #0
 800b458:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b45a:	4b29      	ldr	r3, [pc, #164]	; (800b500 <tcp_input+0x7e8>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b460:	4b2b      	ldr	r3, [pc, #172]	; (800b510 <tcp_input+0x7f8>)
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d03f      	beq.n	800b4e8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800b468:	4b29      	ldr	r3, [pc, #164]	; (800b510 <tcp_input+0x7f8>)
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fd fb75 	bl	8008b5c <pbuf_free>
      inseg.p = NULL;
 800b472:	4b27      	ldr	r3, [pc, #156]	; (800b510 <tcp_input+0x7f8>)
 800b474:	2200      	movs	r2, #0
 800b476:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b478:	e036      	b.n	800b4e8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b47a:	4b26      	ldr	r3, [pc, #152]	; (800b514 <tcp_input+0x7fc>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	899b      	ldrh	r3, [r3, #12]
 800b480:	b29b      	uxth	r3, r3
 800b482:	4618      	mov	r0, r3
 800b484:	f7fc f844 	bl	8007510 <lwip_htons>
 800b488:	4603      	mov	r3, r0
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d118      	bne.n	800b4c6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b494:	4b20      	ldr	r3, [pc, #128]	; (800b518 <tcp_input+0x800>)
 800b496:	6819      	ldr	r1, [r3, #0]
 800b498:	4b20      	ldr	r3, [pc, #128]	; (800b51c <tcp_input+0x804>)
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	461a      	mov	r2, r3
 800b49e:	4b20      	ldr	r3, [pc, #128]	; (800b520 <tcp_input+0x808>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4a4:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <tcp_input+0x7fc>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4a8:	885b      	ldrh	r3, [r3, #2]
 800b4aa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4ac:	4a19      	ldr	r2, [pc, #100]	; (800b514 <tcp_input+0x7fc>)
 800b4ae:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4b0:	8812      	ldrh	r2, [r2, #0]
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	9202      	str	r2, [sp, #8]
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	4b1a      	ldr	r3, [pc, #104]	; (800b524 <tcp_input+0x80c>)
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	4b1a      	ldr	r3, [pc, #104]	; (800b528 <tcp_input+0x810>)
 800b4be:	4602      	mov	r2, r0
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	f003 fc7d 	bl	800edc0 <tcp_rst>
    pbuf_free(p);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fd fb48 	bl	8008b5c <pbuf_free>
  return;
 800b4cc:	e00c      	b.n	800b4e8 <tcp_input+0x7d0>
    goto dropped;
 800b4ce:	bf00      	nop
 800b4d0:	e006      	b.n	800b4e0 <tcp_input+0x7c8>
    goto dropped;
 800b4d2:	bf00      	nop
 800b4d4:	e004      	b.n	800b4e0 <tcp_input+0x7c8>
    goto dropped;
 800b4d6:	bf00      	nop
 800b4d8:	e002      	b.n	800b4e0 <tcp_input+0x7c8>
      goto dropped;
 800b4da:	bf00      	nop
 800b4dc:	e000      	b.n	800b4e0 <tcp_input+0x7c8>
      goto dropped;
 800b4de:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fd fb3b 	bl	8008b5c <pbuf_free>
 800b4e6:	e000      	b.n	800b4ea <tcp_input+0x7d2>
  return;
 800b4e8:	bf00      	nop
}
 800b4ea:	3724      	adds	r7, #36	; 0x24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd90      	pop	{r4, r7, pc}
 800b4f0:	20006e64 	.word	0x20006e64
 800b4f4:	20000561 	.word	0x20000561
 800b4f8:	20006e50 	.word	0x20006e50
 800b4fc:	2000055c 	.word	0x2000055c
 800b500:	20000564 	.word	0x20000564
 800b504:	08016c7c 	.word	0x08016c7c
 800b508:	08016e30 	.word	0x08016e30
 800b50c:	08016cc8 	.word	0x08016cc8
 800b510:	20000534 	.word	0x20000534
 800b514:	20000544 	.word	0x20000544
 800b518:	20000558 	.word	0x20000558
 800b51c:	2000055e 	.word	0x2000055e
 800b520:	20000554 	.word	0x20000554
 800b524:	200038fc 	.word	0x200038fc
 800b528:	20003900 	.word	0x20003900

0800b52c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d106      	bne.n	800b548 <tcp_input_delayed_close+0x1c>
 800b53a:	4b17      	ldr	r3, [pc, #92]	; (800b598 <tcp_input_delayed_close+0x6c>)
 800b53c:	f240 225a 	movw	r2, #602	; 0x25a
 800b540:	4916      	ldr	r1, [pc, #88]	; (800b59c <tcp_input_delayed_close+0x70>)
 800b542:	4817      	ldr	r0, [pc, #92]	; (800b5a0 <tcp_input_delayed_close+0x74>)
 800b544:	f008 fe32 	bl	80141ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b548:	4b16      	ldr	r3, [pc, #88]	; (800b5a4 <tcp_input_delayed_close+0x78>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01c      	beq.n	800b58e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	8b5b      	ldrh	r3, [r3, #26]
 800b558:	f003 0310 	and.w	r3, r3, #16
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10d      	bne.n	800b57c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b566:	2b00      	cmp	r3, #0
 800b568:	d008      	beq.n	800b57c <tcp_input_delayed_close+0x50>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	6912      	ldr	r2, [r2, #16]
 800b574:	f06f 010e 	mvn.w	r1, #14
 800b578:	4610      	mov	r0, r2
 800b57a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b57c:	6879      	ldr	r1, [r7, #4]
 800b57e:	480a      	ldr	r0, [pc, #40]	; (800b5a8 <tcp_input_delayed_close+0x7c>)
 800b580:	f7ff fa52 	bl	800aa28 <tcp_pcb_remove>
    tcp_free(pcb);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7fd fd99 	bl	80090bc <tcp_free>
    return 1;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	08016c7c 	.word	0x08016c7c
 800b59c:	08016e4c 	.word	0x08016e4c
 800b5a0:	08016cc8 	.word	0x08016cc8
 800b5a4:	20000561 	.word	0x20000561
 800b5a8:	20006e50 	.word	0x20006e50

0800b5ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b5ac:	b590      	push	{r4, r7, lr}
 800b5ae:	b08b      	sub	sp, #44	; 0x2c
 800b5b0:	af04      	add	r7, sp, #16
 800b5b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b5b4:	4b6f      	ldr	r3, [pc, #444]	; (800b774 <tcp_listen_input+0x1c8>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f040 80d2 	bne.w	800b766 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d106      	bne.n	800b5d6 <tcp_listen_input+0x2a>
 800b5c8:	4b6b      	ldr	r3, [pc, #428]	; (800b778 <tcp_listen_input+0x1cc>)
 800b5ca:	f240 2281 	movw	r2, #641	; 0x281
 800b5ce:	496b      	ldr	r1, [pc, #428]	; (800b77c <tcp_listen_input+0x1d0>)
 800b5d0:	486b      	ldr	r0, [pc, #428]	; (800b780 <tcp_listen_input+0x1d4>)
 800b5d2:	f008 fdeb 	bl	80141ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b5d6:	4b67      	ldr	r3, [pc, #412]	; (800b774 <tcp_listen_input+0x1c8>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	f003 0310 	and.w	r3, r3, #16
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d019      	beq.n	800b616 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5e2:	4b68      	ldr	r3, [pc, #416]	; (800b784 <tcp_listen_input+0x1d8>)
 800b5e4:	6819      	ldr	r1, [r3, #0]
 800b5e6:	4b68      	ldr	r3, [pc, #416]	; (800b788 <tcp_listen_input+0x1dc>)
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	4b67      	ldr	r3, [pc, #412]	; (800b78c <tcp_listen_input+0x1e0>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5f2:	4b67      	ldr	r3, [pc, #412]	; (800b790 <tcp_listen_input+0x1e4>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5f6:	885b      	ldrh	r3, [r3, #2]
 800b5f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5fa:	4a65      	ldr	r2, [pc, #404]	; (800b790 <tcp_listen_input+0x1e4>)
 800b5fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5fe:	8812      	ldrh	r2, [r2, #0]
 800b600:	b292      	uxth	r2, r2
 800b602:	9202      	str	r2, [sp, #8]
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	4b63      	ldr	r3, [pc, #396]	; (800b794 <tcp_listen_input+0x1e8>)
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	4b63      	ldr	r3, [pc, #396]	; (800b798 <tcp_listen_input+0x1ec>)
 800b60c:	4602      	mov	r2, r0
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f003 fbd6 	bl	800edc0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b614:	e0a9      	b.n	800b76a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b616:	4b57      	ldr	r3, [pc, #348]	; (800b774 <tcp_listen_input+0x1c8>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	f003 0302 	and.w	r3, r3, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 80a3 	beq.w	800b76a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	7d5b      	ldrb	r3, [r3, #21]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff f85b 	bl	800a6e4 <tcp_alloc>
 800b62e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d111      	bne.n	800b65a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00a      	beq.n	800b654 <tcp_listen_input+0xa8>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6910      	ldr	r0, [r2, #16]
 800b646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b64a:	2100      	movs	r1, #0
 800b64c:	4798      	blx	r3
 800b64e:	4603      	mov	r3, r0
 800b650:	73bb      	strb	r3, [r7, #14]
      return;
 800b652:	e08b      	b.n	800b76c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b654:	23f0      	movs	r3, #240	; 0xf0
 800b656:	73bb      	strb	r3, [r7, #14]
      return;
 800b658:	e088      	b.n	800b76c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b65a:	4b50      	ldr	r3, [pc, #320]	; (800b79c <tcp_listen_input+0x1f0>)
 800b65c:	695a      	ldr	r2, [r3, #20]
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b662:	4b4e      	ldr	r3, [pc, #312]	; (800b79c <tcp_listen_input+0x1f0>)
 800b664:	691a      	ldr	r2, [r3, #16]
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	8ada      	ldrh	r2, [r3, #22]
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b672:	4b47      	ldr	r3, [pc, #284]	; (800b790 <tcp_listen_input+0x1e4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	b29a      	uxth	r2, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2203      	movs	r2, #3
 800b682:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b684:	4b41      	ldr	r3, [pc, #260]	; (800b78c <tcp_listen_input+0x1e0>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b696:	6978      	ldr	r0, [r7, #20]
 800b698:	f7ff fa5a 	bl	800ab50 <tcp_next_iss>
 800b69c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	693a      	ldr	r2, [r7, #16]
 800b6b4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b6b6:	4b35      	ldr	r3, [pc, #212]	; (800b78c <tcp_listen_input+0x1e0>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	1e5a      	subs	r2, r3, #1
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691a      	ldr	r2, [r3, #16]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	7a5b      	ldrb	r3, [r3, #9]
 800b6d2:	f003 030c 	and.w	r3, r3, #12
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	7a1a      	ldrb	r2, [r3, #8]
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b6e4:	4b2e      	ldr	r3, [pc, #184]	; (800b7a0 <tcp_listen_input+0x1f4>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	60da      	str	r2, [r3, #12]
 800b6ec:	4a2c      	ldr	r2, [pc, #176]	; (800b7a0 <tcp_listen_input+0x1f4>)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	6013      	str	r3, [r2, #0]
 800b6f2:	f003 fd27 	bl	800f144 <tcp_timer_needed>
 800b6f6:	4b2b      	ldr	r3, [pc, #172]	; (800b7a4 <tcp_listen_input+0x1f8>)
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b6fc:	6978      	ldr	r0, [r7, #20]
 800b6fe:	f001 fd8d 	bl	800d21c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b702:	4b23      	ldr	r3, [pc, #140]	; (800b790 <tcp_listen_input+0x1e4>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	89db      	ldrh	r3, [r3, #14]
 800b708:	b29a      	uxth	r2, r3
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	3304      	adds	r3, #4
 800b724:	4618      	mov	r0, r3
 800b726:	f007 fa49 	bl	8012bbc <ip4_route>
 800b72a:	4601      	mov	r1, r0
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	3304      	adds	r3, #4
 800b730:	461a      	mov	r2, r3
 800b732:	4620      	mov	r0, r4
 800b734:	f7ff fa32 	bl	800ab9c <tcp_eff_send_mss_netif>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b740:	2112      	movs	r1, #18
 800b742:	6978      	ldr	r0, [r7, #20]
 800b744:	f002 fc9a 	bl	800e07c <tcp_enqueue_flags>
 800b748:	4603      	mov	r3, r0
 800b74a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d004      	beq.n	800b75e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b754:	2100      	movs	r1, #0
 800b756:	6978      	ldr	r0, [r7, #20]
 800b758:	f7fd feda 	bl	8009510 <tcp_abandon>
      return;
 800b75c:	e006      	b.n	800b76c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b75e:	6978      	ldr	r0, [r7, #20]
 800b760:	f002 fd7a 	bl	800e258 <tcp_output>
  return;
 800b764:	e001      	b.n	800b76a <tcp_listen_input+0x1be>
    return;
 800b766:	bf00      	nop
 800b768:	e000      	b.n	800b76c <tcp_listen_input+0x1c0>
  return;
 800b76a:	bf00      	nop
}
 800b76c:	371c      	adds	r7, #28
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd90      	pop	{r4, r7, pc}
 800b772:	bf00      	nop
 800b774:	20000560 	.word	0x20000560
 800b778:	08016c7c 	.word	0x08016c7c
 800b77c:	08016e74 	.word	0x08016e74
 800b780:	08016cc8 	.word	0x08016cc8
 800b784:	20000558 	.word	0x20000558
 800b788:	2000055e 	.word	0x2000055e
 800b78c:	20000554 	.word	0x20000554
 800b790:	20000544 	.word	0x20000544
 800b794:	200038fc 	.word	0x200038fc
 800b798:	20003900 	.word	0x20003900
 800b79c:	200038ec 	.word	0x200038ec
 800b7a0:	20006e50 	.word	0x20006e50
 800b7a4:	20006e4c 	.word	0x20006e4c

0800b7a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af04      	add	r7, sp, #16
 800b7ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b7b0:	4b2f      	ldr	r3, [pc, #188]	; (800b870 <tcp_timewait_input+0xc8>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	f003 0304 	and.w	r3, r3, #4
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d153      	bne.n	800b864 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d106      	bne.n	800b7d0 <tcp_timewait_input+0x28>
 800b7c2:	4b2c      	ldr	r3, [pc, #176]	; (800b874 <tcp_timewait_input+0xcc>)
 800b7c4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b7c8:	492b      	ldr	r1, [pc, #172]	; (800b878 <tcp_timewait_input+0xd0>)
 800b7ca:	482c      	ldr	r0, [pc, #176]	; (800b87c <tcp_timewait_input+0xd4>)
 800b7cc:	f008 fcee 	bl	80141ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b7d0:	4b27      	ldr	r3, [pc, #156]	; (800b870 <tcp_timewait_input+0xc8>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d02a      	beq.n	800b832 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b7dc:	4b28      	ldr	r3, [pc, #160]	; (800b880 <tcp_timewait_input+0xd8>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	db2d      	blt.n	800b846 <tcp_timewait_input+0x9e>
 800b7ea:	4b25      	ldr	r3, [pc, #148]	; (800b880 <tcp_timewait_input+0xd8>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b7f6:	440b      	add	r3, r1
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dc23      	bgt.n	800b846 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7fe:	4b21      	ldr	r3, [pc, #132]	; (800b884 <tcp_timewait_input+0xdc>)
 800b800:	6819      	ldr	r1, [r3, #0]
 800b802:	4b21      	ldr	r3, [pc, #132]	; (800b888 <tcp_timewait_input+0xe0>)
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	4b1d      	ldr	r3, [pc, #116]	; (800b880 <tcp_timewait_input+0xd8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b80e:	4b1f      	ldr	r3, [pc, #124]	; (800b88c <tcp_timewait_input+0xe4>)
 800b810:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b812:	885b      	ldrh	r3, [r3, #2]
 800b814:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b816:	4a1d      	ldr	r2, [pc, #116]	; (800b88c <tcp_timewait_input+0xe4>)
 800b818:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b81a:	8812      	ldrh	r2, [r2, #0]
 800b81c:	b292      	uxth	r2, r2
 800b81e:	9202      	str	r2, [sp, #8]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <tcp_timewait_input+0xe8>)
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <tcp_timewait_input+0xec>)
 800b828:	4602      	mov	r2, r0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f003 fac8 	bl	800edc0 <tcp_rst>
      return;
 800b830:	e01b      	b.n	800b86a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b832:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <tcp_timewait_input+0xc8>)
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b83e:	4b16      	ldr	r3, [pc, #88]	; (800b898 <tcp_timewait_input+0xf0>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b846:	4b10      	ldr	r3, [pc, #64]	; (800b888 <tcp_timewait_input+0xe0>)
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00c      	beq.n	800b868 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	8b5b      	ldrh	r3, [r3, #26]
 800b852:	f043 0302 	orr.w	r3, r3, #2
 800b856:	b29a      	uxth	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f002 fcfb 	bl	800e258 <tcp_output>
  }
  return;
 800b862:	e001      	b.n	800b868 <tcp_timewait_input+0xc0>
    return;
 800b864:	bf00      	nop
 800b866:	e000      	b.n	800b86a <tcp_timewait_input+0xc2>
  return;
 800b868:	bf00      	nop
}
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20000560 	.word	0x20000560
 800b874:	08016c7c 	.word	0x08016c7c
 800b878:	08016e94 	.word	0x08016e94
 800b87c:	08016cc8 	.word	0x08016cc8
 800b880:	20000554 	.word	0x20000554
 800b884:	20000558 	.word	0x20000558
 800b888:	2000055e 	.word	0x2000055e
 800b88c:	20000544 	.word	0x20000544
 800b890:	200038fc 	.word	0x200038fc
 800b894:	20003900 	.word	0x20003900
 800b898:	20006e54 	.word	0x20006e54

0800b89c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b08d      	sub	sp, #52	; 0x34
 800b8a0:	af04      	add	r7, sp, #16
 800b8a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <tcp_process+0x24>
 800b8b2:	4ba5      	ldr	r3, [pc, #660]	; (800bb48 <tcp_process+0x2ac>)
 800b8b4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b8b8:	49a4      	ldr	r1, [pc, #656]	; (800bb4c <tcp_process+0x2b0>)
 800b8ba:	48a5      	ldr	r0, [pc, #660]	; (800bb50 <tcp_process+0x2b4>)
 800b8bc:	f008 fc76 	bl	80141ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b8c0:	4ba4      	ldr	r3, [pc, #656]	; (800bb54 <tcp_process+0x2b8>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	f003 0304 	and.w	r3, r3, #4
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d04e      	beq.n	800b96a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7d1b      	ldrb	r3, [r3, #20]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d108      	bne.n	800b8e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8d8:	4b9f      	ldr	r3, [pc, #636]	; (800bb58 <tcp_process+0x2bc>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d123      	bne.n	800b928 <tcp_process+0x8c>
        acceptable = 1;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	76fb      	strb	r3, [r7, #27]
 800b8e4:	e020      	b.n	800b928 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8ea:	4b9c      	ldr	r3, [pc, #624]	; (800bb5c <tcp_process+0x2c0>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d102      	bne.n	800b8f8 <tcp_process+0x5c>
        acceptable = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	76fb      	strb	r3, [r7, #27]
 800b8f6:	e017      	b.n	800b928 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b8f8:	4b98      	ldr	r3, [pc, #608]	; (800bb5c <tcp_process+0x2c0>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	2b00      	cmp	r3, #0
 800b904:	db10      	blt.n	800b928 <tcp_process+0x8c>
 800b906:	4b95      	ldr	r3, [pc, #596]	; (800bb5c <tcp_process+0x2c0>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b912:	440b      	add	r3, r1
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	dc06      	bgt.n	800b928 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	8b5b      	ldrh	r3, [r3, #26]
 800b91e:	f043 0302 	orr.w	r3, r3, #2
 800b922:	b29a      	uxth	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b928:	7efb      	ldrb	r3, [r7, #27]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d01b      	beq.n	800b966 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7d1b      	ldrb	r3, [r3, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <tcp_process+0xa8>
 800b936:	4b84      	ldr	r3, [pc, #528]	; (800bb48 <tcp_process+0x2ac>)
 800b938:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b93c:	4988      	ldr	r1, [pc, #544]	; (800bb60 <tcp_process+0x2c4>)
 800b93e:	4884      	ldr	r0, [pc, #528]	; (800bb50 <tcp_process+0x2b4>)
 800b940:	f008 fc34 	bl	80141ac <iprintf>
      recv_flags |= TF_RESET;
 800b944:	4b87      	ldr	r3, [pc, #540]	; (800bb64 <tcp_process+0x2c8>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	f043 0308 	orr.w	r3, r3, #8
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b85      	ldr	r3, [pc, #532]	; (800bb64 <tcp_process+0x2c8>)
 800b950:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	8b5b      	ldrh	r3, [r3, #26]
 800b956:	f023 0301 	bic.w	r3, r3, #1
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b960:	f06f 030d 	mvn.w	r3, #13
 800b964:	e37a      	b.n	800c05c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	e378      	b.n	800c05c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b96a:	4b7a      	ldr	r3, [pc, #488]	; (800bb54 <tcp_process+0x2b8>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	f003 0302 	and.w	r3, r3, #2
 800b972:	2b00      	cmp	r3, #0
 800b974:	d010      	beq.n	800b998 <tcp_process+0xfc>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7d1b      	ldrb	r3, [r3, #20]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d00c      	beq.n	800b998 <tcp_process+0xfc>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	7d1b      	ldrb	r3, [r3, #20]
 800b982:	2b03      	cmp	r3, #3
 800b984:	d008      	beq.n	800b998 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	8b5b      	ldrh	r3, [r3, #26]
 800b98a:	f043 0302 	orr.w	r3, r3, #2
 800b98e:	b29a      	uxth	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	e361      	b.n	800c05c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8b5b      	ldrh	r3, [r3, #26]
 800b99c:	f003 0310 	and.w	r3, r3, #16
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d103      	bne.n	800b9ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b9a4:	4b70      	ldr	r3, [pc, #448]	; (800bb68 <tcp_process+0x2cc>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 fc2d 	bl	800d21c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	7d1b      	ldrb	r3, [r3, #20]
 800b9c6:	3b02      	subs	r3, #2
 800b9c8:	2b07      	cmp	r3, #7
 800b9ca:	f200 8337 	bhi.w	800c03c <tcp_process+0x7a0>
 800b9ce:	a201      	add	r2, pc, #4	; (adr r2, 800b9d4 <tcp_process+0x138>)
 800b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d4:	0800b9f5 	.word	0x0800b9f5
 800b9d8:	0800bc25 	.word	0x0800bc25
 800b9dc:	0800bd9d 	.word	0x0800bd9d
 800b9e0:	0800bdc7 	.word	0x0800bdc7
 800b9e4:	0800beeb 	.word	0x0800beeb
 800b9e8:	0800bd9d 	.word	0x0800bd9d
 800b9ec:	0800bf77 	.word	0x0800bf77
 800b9f0:	0800c007 	.word	0x0800c007
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b9f4:	4b57      	ldr	r3, [pc, #348]	; (800bb54 <tcp_process+0x2b8>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 0310 	and.w	r3, r3, #16
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 80e4 	beq.w	800bbca <tcp_process+0x32e>
 800ba02:	4b54      	ldr	r3, [pc, #336]	; (800bb54 <tcp_process+0x2b8>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f003 0302 	and.w	r3, r3, #2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 80dd 	beq.w	800bbca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba14:	1c5a      	adds	r2, r3, #1
 800ba16:	4b50      	ldr	r3, [pc, #320]	; (800bb58 <tcp_process+0x2bc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	f040 80d5 	bne.w	800bbca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ba20:	4b4e      	ldr	r3, [pc, #312]	; (800bb5c <tcp_process+0x2c0>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	1c5a      	adds	r2, r3, #1
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ba32:	4b49      	ldr	r3, [pc, #292]	; (800bb58 <tcp_process+0x2bc>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ba3a:	4b4c      	ldr	r3, [pc, #304]	; (800bb6c <tcp_process+0x2d0>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	89db      	ldrh	r3, [r3, #14]
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ba54:	4b41      	ldr	r3, [pc, #260]	; (800bb5c <tcp_process+0x2c0>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	1e5a      	subs	r2, r3, #1
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2204      	movs	r2, #4
 800ba62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f007 f8a5 	bl	8012bbc <ip4_route>
 800ba72:	4601      	mov	r1, r0
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3304      	adds	r3, #4
 800ba78:	461a      	mov	r2, r3
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f7ff f88e 	bl	800ab9c <tcp_eff_send_mss_netif>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba8c:	009a      	lsls	r2, r3, #2
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	f241 111c 	movw	r1, #4380	; 0x111c
 800ba98:	428b      	cmp	r3, r1
 800ba9a:	bf38      	it	cc
 800ba9c:	460b      	movcc	r3, r1
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d204      	bcs.n	800baac <tcp_process+0x210>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	e00d      	b.n	800bac8 <tcp_process+0x22c>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	f241 121c 	movw	r2, #4380	; 0x111c
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d904      	bls.n	800bac4 <tcp_process+0x228>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	e001      	b.n	800bac8 <tcp_process+0x22c>
 800bac4:	f241 131c 	movw	r3, #4380	; 0x111c
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d106      	bne.n	800bae6 <tcp_process+0x24a>
 800bad8:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <tcp_process+0x2ac>)
 800bada:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bade:	4924      	ldr	r1, [pc, #144]	; (800bb70 <tcp_process+0x2d4>)
 800bae0:	481b      	ldr	r0, [pc, #108]	; (800bb50 <tcp_process+0x2b4>)
 800bae2:	f008 fb63 	bl	80141ac <iprintf>
        --pcb->snd_queuelen;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800baec:	3b01      	subs	r3, #1
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bafa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d111      	bne.n	800bb26 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb06:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d106      	bne.n	800bb1c <tcp_process+0x280>
 800bb0e:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <tcp_process+0x2ac>)
 800bb10:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bb14:	4917      	ldr	r1, [pc, #92]	; (800bb74 <tcp_process+0x2d8>)
 800bb16:	480e      	ldr	r0, [pc, #56]	; (800bb50 <tcp_process+0x2b4>)
 800bb18:	f008 fb48 	bl	80141ac <iprintf>
          pcb->unsent = rseg->next;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	66da      	str	r2, [r3, #108]	; 0x6c
 800bb24:	e003      	b.n	800bb2e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bb2e:	69f8      	ldr	r0, [r7, #28]
 800bb30:	f7fe fc51 	bl	800a3d6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d11d      	bne.n	800bb78 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb42:	861a      	strh	r2, [r3, #48]	; 0x30
 800bb44:	e01f      	b.n	800bb86 <tcp_process+0x2ea>
 800bb46:	bf00      	nop
 800bb48:	08016c7c 	.word	0x08016c7c
 800bb4c:	08016eb4 	.word	0x08016eb4
 800bb50:	08016cc8 	.word	0x08016cc8
 800bb54:	20000560 	.word	0x20000560
 800bb58:	20000558 	.word	0x20000558
 800bb5c:	20000554 	.word	0x20000554
 800bb60:	08016ed0 	.word	0x08016ed0
 800bb64:	20000561 	.word	0x20000561
 800bb68:	20006e54 	.word	0x20006e54
 800bb6c:	20000544 	.word	0x20000544
 800bb70:	08016ef0 	.word	0x08016ef0
 800bb74:	08016f08 	.word	0x08016f08
        } else {
          pcb->rtime = 0;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00a      	beq.n	800bba6 <tcp_process+0x30a>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	6910      	ldr	r0, [r2, #16]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	4798      	blx	r3
 800bba0:	4603      	mov	r3, r0
 800bba2:	76bb      	strb	r3, [r7, #26]
 800bba4:	e001      	b.n	800bbaa <tcp_process+0x30e>
 800bba6:	2300      	movs	r3, #0
 800bba8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bbaa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bbae:	f113 0f0d 	cmn.w	r3, #13
 800bbb2:	d102      	bne.n	800bbba <tcp_process+0x31e>
          return ERR_ABRT;
 800bbb4:	f06f 030c 	mvn.w	r3, #12
 800bbb8:	e250      	b.n	800c05c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	8b5b      	ldrh	r3, [r3, #26]
 800bbbe:	f043 0302 	orr.w	r3, r3, #2
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bbc8:	e23a      	b.n	800c040 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bbca:	4b9d      	ldr	r3, [pc, #628]	; (800be40 <tcp_process+0x5a4>)
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 8234 	beq.w	800c040 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbd8:	4b9a      	ldr	r3, [pc, #616]	; (800be44 <tcp_process+0x5a8>)
 800bbda:	6819      	ldr	r1, [r3, #0]
 800bbdc:	4b9a      	ldr	r3, [pc, #616]	; (800be48 <tcp_process+0x5ac>)
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4b9a      	ldr	r3, [pc, #616]	; (800be4c <tcp_process+0x5b0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bbe8:	4b99      	ldr	r3, [pc, #612]	; (800be50 <tcp_process+0x5b4>)
 800bbea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbec:	885b      	ldrh	r3, [r3, #2]
 800bbee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bbf0:	4a97      	ldr	r2, [pc, #604]	; (800be50 <tcp_process+0x5b4>)
 800bbf2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbf4:	8812      	ldrh	r2, [r2, #0]
 800bbf6:	b292      	uxth	r2, r2
 800bbf8:	9202      	str	r2, [sp, #8]
 800bbfa:	9301      	str	r3, [sp, #4]
 800bbfc:	4b95      	ldr	r3, [pc, #596]	; (800be54 <tcp_process+0x5b8>)
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	4b95      	ldr	r3, [pc, #596]	; (800be58 <tcp_process+0x5bc>)
 800bc02:	4602      	mov	r2, r0
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f003 f8db 	bl	800edc0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc10:	2b05      	cmp	r3, #5
 800bc12:	f200 8215 	bhi.w	800c040 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f002 fea5 	bl	800e96c <tcp_rexmit_rto>
      break;
 800bc22:	e20d      	b.n	800c040 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bc24:	4b86      	ldr	r3, [pc, #536]	; (800be40 <tcp_process+0x5a4>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	f003 0310 	and.w	r3, r3, #16
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 80a1 	beq.w	800bd74 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc32:	4b84      	ldr	r3, [pc, #528]	; (800be44 <tcp_process+0x5a8>)
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	db7e      	blt.n	800bd40 <tcp_process+0x4a4>
 800bc42:	4b80      	ldr	r3, [pc, #512]	; (800be44 <tcp_process+0x5a8>)
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dc77      	bgt.n	800bd40 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2204      	movs	r2, #4
 800bc54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d102      	bne.n	800bc64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bc5e:	23fa      	movs	r3, #250	; 0xfa
 800bc60:	76bb      	strb	r3, [r7, #26]
 800bc62:	e01d      	b.n	800bca0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_process+0x3e0>
 800bc6e:	4b7b      	ldr	r3, [pc, #492]	; (800be5c <tcp_process+0x5c0>)
 800bc70:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bc74:	497a      	ldr	r1, [pc, #488]	; (800be60 <tcp_process+0x5c4>)
 800bc76:	487b      	ldr	r0, [pc, #492]	; (800be64 <tcp_process+0x5c8>)
 800bc78:	f008 fa98 	bl	80141ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00a      	beq.n	800bc9c <tcp_process+0x400>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	6910      	ldr	r0, [r2, #16]
 800bc90:	2200      	movs	r2, #0
 800bc92:	6879      	ldr	r1, [r7, #4]
 800bc94:	4798      	blx	r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	76bb      	strb	r3, [r7, #26]
 800bc9a:	e001      	b.n	800bca0 <tcp_process+0x404>
 800bc9c:	23f0      	movs	r3, #240	; 0xf0
 800bc9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bca0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00a      	beq.n	800bcbe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bca8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bcac:	f113 0f0d 	cmn.w	r3, #13
 800bcb0:	d002      	beq.n	800bcb8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7fd fcea 	bl	800968c <tcp_abort>
            }
            return ERR_ABRT;
 800bcb8:	f06f 030c 	mvn.w	r3, #12
 800bcbc:	e1ce      	b.n	800c05c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fae0 	bl	800c284 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bcc4:	4b68      	ldr	r3, [pc, #416]	; (800be68 <tcp_process+0x5cc>)
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <tcp_process+0x43c>
            recv_acked--;
 800bccc:	4b66      	ldr	r3, [pc, #408]	; (800be68 <tcp_process+0x5cc>)
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	4b64      	ldr	r3, [pc, #400]	; (800be68 <tcp_process+0x5cc>)
 800bcd6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcdc:	009a      	lsls	r2, r3, #2
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	f241 111c 	movw	r1, #4380	; 0x111c
 800bce8:	428b      	cmp	r3, r1
 800bcea:	bf38      	it	cc
 800bcec:	460b      	movcc	r3, r1
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d204      	bcs.n	800bcfc <tcp_process+0x460>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	e00d      	b.n	800bd18 <tcp_process+0x47c>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	f241 121c 	movw	r2, #4380	; 0x111c
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d904      	bls.n	800bd14 <tcp_process+0x478>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	e001      	b.n	800bd18 <tcp_process+0x47c>
 800bd14:	f241 131c 	movw	r3, #4380	; 0x111c
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bd1e:	4b53      	ldr	r3, [pc, #332]	; (800be6c <tcp_process+0x5d0>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	f003 0320 	and.w	r3, r3, #32
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d037      	beq.n	800bd9a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	8b5b      	ldrh	r3, [r3, #26]
 800bd2e:	f043 0302 	orr.w	r3, r3, #2
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2207      	movs	r2, #7
 800bd3c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bd3e:	e02c      	b.n	800bd9a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd40:	4b40      	ldr	r3, [pc, #256]	; (800be44 <tcp_process+0x5a8>)
 800bd42:	6819      	ldr	r1, [r3, #0]
 800bd44:	4b40      	ldr	r3, [pc, #256]	; (800be48 <tcp_process+0x5ac>)
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	4b40      	ldr	r3, [pc, #256]	; (800be4c <tcp_process+0x5b0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd50:	4b3f      	ldr	r3, [pc, #252]	; (800be50 <tcp_process+0x5b4>)
 800bd52:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd54:	885b      	ldrh	r3, [r3, #2]
 800bd56:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd58:	4a3d      	ldr	r2, [pc, #244]	; (800be50 <tcp_process+0x5b4>)
 800bd5a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd5c:	8812      	ldrh	r2, [r2, #0]
 800bd5e:	b292      	uxth	r2, r2
 800bd60:	9202      	str	r2, [sp, #8]
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	4b3b      	ldr	r3, [pc, #236]	; (800be54 <tcp_process+0x5b8>)
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	4b3b      	ldr	r3, [pc, #236]	; (800be58 <tcp_process+0x5bc>)
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f003 f827 	bl	800edc0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bd72:	e167      	b.n	800c044 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bd74:	4b32      	ldr	r3, [pc, #200]	; (800be40 <tcp_process+0x5a4>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	f003 0302 	and.w	r3, r3, #2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 8161 	beq.w	800c044 <tcp_process+0x7a8>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd86:	1e5a      	subs	r2, r3, #1
 800bd88:	4b30      	ldr	r3, [pc, #192]	; (800be4c <tcp_process+0x5b0>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	f040 8159 	bne.w	800c044 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f002 fe0c 	bl	800e9b0 <tcp_rexmit>
      break;
 800bd98:	e154      	b.n	800c044 <tcp_process+0x7a8>
 800bd9a:	e153      	b.n	800c044 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fa71 	bl	800c284 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bda2:	4b32      	ldr	r3, [pc, #200]	; (800be6c <tcp_process+0x5d0>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	f003 0320 	and.w	r3, r3, #32
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 814c 	beq.w	800c048 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	8b5b      	ldrh	r3, [r3, #26]
 800bdb4:	f043 0302 	orr.w	r3, r3, #2
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2207      	movs	r2, #7
 800bdc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bdc4:	e140      	b.n	800c048 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa5c 	bl	800c284 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bdcc:	4b27      	ldr	r3, [pc, #156]	; (800be6c <tcp_process+0x5d0>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	f003 0320 	and.w	r3, r3, #32
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d071      	beq.n	800bebc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bdd8:	4b19      	ldr	r3, [pc, #100]	; (800be40 <tcp_process+0x5a4>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	f003 0310 	and.w	r3, r3, #16
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d060      	beq.n	800bea6 <tcp_process+0x60a>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bde8:	4b16      	ldr	r3, [pc, #88]	; (800be44 <tcp_process+0x5a8>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d15a      	bne.n	800bea6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d156      	bne.n	800bea6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	8b5b      	ldrh	r3, [r3, #26]
 800bdfc:	f043 0302 	orr.w	r3, r3, #2
 800be00:	b29a      	uxth	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7fe fdbe 	bl	800a988 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800be0c:	4b18      	ldr	r3, [pc, #96]	; (800be70 <tcp_process+0x5d4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d105      	bne.n	800be22 <tcp_process+0x586>
 800be16:	4b16      	ldr	r3, [pc, #88]	; (800be70 <tcp_process+0x5d4>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	4a14      	ldr	r2, [pc, #80]	; (800be70 <tcp_process+0x5d4>)
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	e02e      	b.n	800be80 <tcp_process+0x5e4>
 800be22:	4b13      	ldr	r3, [pc, #76]	; (800be70 <tcp_process+0x5d4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	e027      	b.n	800be7a <tcp_process+0x5de>
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d11f      	bne.n	800be74 <tcp_process+0x5d8>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68da      	ldr	r2, [r3, #12]
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	60da      	str	r2, [r3, #12]
 800be3c:	e020      	b.n	800be80 <tcp_process+0x5e4>
 800be3e:	bf00      	nop
 800be40:	20000560 	.word	0x20000560
 800be44:	20000558 	.word	0x20000558
 800be48:	2000055e 	.word	0x2000055e
 800be4c:	20000554 	.word	0x20000554
 800be50:	20000544 	.word	0x20000544
 800be54:	200038fc 	.word	0x200038fc
 800be58:	20003900 	.word	0x20003900
 800be5c:	08016c7c 	.word	0x08016c7c
 800be60:	08016f1c 	.word	0x08016f1c
 800be64:	08016cc8 	.word	0x08016cc8
 800be68:	2000055c 	.word	0x2000055c
 800be6c:	20000561 	.word	0x20000561
 800be70:	20006e50 	.word	0x20006e50
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1d4      	bne.n	800be2a <tcp_process+0x58e>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	60da      	str	r2, [r3, #12]
 800be86:	4b77      	ldr	r3, [pc, #476]	; (800c064 <tcp_process+0x7c8>)
 800be88:	2201      	movs	r2, #1
 800be8a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	220a      	movs	r2, #10
 800be90:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800be92:	4b75      	ldr	r3, [pc, #468]	; (800c068 <tcp_process+0x7cc>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60da      	str	r2, [r3, #12]
 800be9a:	4a73      	ldr	r2, [pc, #460]	; (800c068 <tcp_process+0x7cc>)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	f003 f950 	bl	800f144 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bea4:	e0d2      	b.n	800c04c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	8b5b      	ldrh	r3, [r3, #26]
 800beaa:	f043 0302 	orr.w	r3, r3, #2
 800beae:	b29a      	uxth	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2208      	movs	r2, #8
 800beb8:	751a      	strb	r2, [r3, #20]
      break;
 800beba:	e0c7      	b.n	800c04c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bebc:	4b6b      	ldr	r3, [pc, #428]	; (800c06c <tcp_process+0x7d0>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 0310 	and.w	r3, r3, #16
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 80c1 	beq.w	800c04c <tcp_process+0x7b0>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bece:	4b68      	ldr	r3, [pc, #416]	; (800c070 <tcp_process+0x7d4>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	f040 80ba 	bne.w	800c04c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f040 80b5 	bne.w	800c04c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2206      	movs	r2, #6
 800bee6:	751a      	strb	r2, [r3, #20]
      break;
 800bee8:	e0b0      	b.n	800c04c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f9ca 	bl	800c284 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bef0:	4b60      	ldr	r3, [pc, #384]	; (800c074 <tcp_process+0x7d8>)
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f000 80a9 	beq.w	800c050 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	8b5b      	ldrh	r3, [r3, #26]
 800bf02:	f043 0302 	orr.w	r3, r3, #2
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7fe fd3b 	bl	800a988 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bf12:	4b59      	ldr	r3, [pc, #356]	; (800c078 <tcp_process+0x7dc>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d105      	bne.n	800bf28 <tcp_process+0x68c>
 800bf1c:	4b56      	ldr	r3, [pc, #344]	; (800c078 <tcp_process+0x7dc>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	4a55      	ldr	r2, [pc, #340]	; (800c078 <tcp_process+0x7dc>)
 800bf24:	6013      	str	r3, [r2, #0]
 800bf26:	e013      	b.n	800bf50 <tcp_process+0x6b4>
 800bf28:	4b53      	ldr	r3, [pc, #332]	; (800c078 <tcp_process+0x7dc>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	613b      	str	r3, [r7, #16]
 800bf2e:	e00c      	b.n	800bf4a <tcp_process+0x6ae>
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d104      	bne.n	800bf44 <tcp_process+0x6a8>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68da      	ldr	r2, [r3, #12]
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	60da      	str	r2, [r3, #12]
 800bf42:	e005      	b.n	800bf50 <tcp_process+0x6b4>
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1ef      	bne.n	800bf30 <tcp_process+0x694>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	60da      	str	r2, [r3, #12]
 800bf56:	4b43      	ldr	r3, [pc, #268]	; (800c064 <tcp_process+0x7c8>)
 800bf58:	2201      	movs	r2, #1
 800bf5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	220a      	movs	r2, #10
 800bf60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bf62:	4b41      	ldr	r3, [pc, #260]	; (800c068 <tcp_process+0x7cc>)
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	60da      	str	r2, [r3, #12]
 800bf6a:	4a3f      	ldr	r2, [pc, #252]	; (800c068 <tcp_process+0x7cc>)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6013      	str	r3, [r2, #0]
 800bf70:	f003 f8e8 	bl	800f144 <tcp_timer_needed>
      }
      break;
 800bf74:	e06c      	b.n	800c050 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f984 	bl	800c284 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bf7c:	4b3b      	ldr	r3, [pc, #236]	; (800c06c <tcp_process+0x7d0>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	f003 0310 	and.w	r3, r3, #16
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d065      	beq.n	800c054 <tcp_process+0x7b8>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf8c:	4b38      	ldr	r3, [pc, #224]	; (800c070 <tcp_process+0x7d4>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d15f      	bne.n	800c054 <tcp_process+0x7b8>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d15b      	bne.n	800c054 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7fe fcf3 	bl	800a988 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bfa2:	4b35      	ldr	r3, [pc, #212]	; (800c078 <tcp_process+0x7dc>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d105      	bne.n	800bfb8 <tcp_process+0x71c>
 800bfac:	4b32      	ldr	r3, [pc, #200]	; (800c078 <tcp_process+0x7dc>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	4a31      	ldr	r2, [pc, #196]	; (800c078 <tcp_process+0x7dc>)
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	e013      	b.n	800bfe0 <tcp_process+0x744>
 800bfb8:	4b2f      	ldr	r3, [pc, #188]	; (800c078 <tcp_process+0x7dc>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	60fb      	str	r3, [r7, #12]
 800bfbe:	e00c      	b.n	800bfda <tcp_process+0x73e>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d104      	bne.n	800bfd4 <tcp_process+0x738>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68da      	ldr	r2, [r3, #12]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	60da      	str	r2, [r3, #12]
 800bfd2:	e005      	b.n	800bfe0 <tcp_process+0x744>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	60fb      	str	r3, [r7, #12]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1ef      	bne.n	800bfc0 <tcp_process+0x724>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	4b1f      	ldr	r3, [pc, #124]	; (800c064 <tcp_process+0x7c8>)
 800bfe8:	2201      	movs	r2, #1
 800bfea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	220a      	movs	r2, #10
 800bff0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bff2:	4b1d      	ldr	r3, [pc, #116]	; (800c068 <tcp_process+0x7cc>)
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60da      	str	r2, [r3, #12]
 800bffa:	4a1b      	ldr	r2, [pc, #108]	; (800c068 <tcp_process+0x7cc>)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	f003 f8a0 	bl	800f144 <tcp_timer_needed>
      }
      break;
 800c004:	e026      	b.n	800c054 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f93c 	bl	800c284 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c00c:	4b17      	ldr	r3, [pc, #92]	; (800c06c <tcp_process+0x7d0>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f003 0310 	and.w	r3, r3, #16
 800c014:	2b00      	cmp	r3, #0
 800c016:	d01f      	beq.n	800c058 <tcp_process+0x7bc>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c01c:	4b14      	ldr	r3, [pc, #80]	; (800c070 <tcp_process+0x7d4>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d119      	bne.n	800c058 <tcp_process+0x7bc>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d115      	bne.n	800c058 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c02c:	4b11      	ldr	r3, [pc, #68]	; (800c074 <tcp_process+0x7d8>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	f043 0310 	orr.w	r3, r3, #16
 800c034:	b2da      	uxtb	r2, r3
 800c036:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <tcp_process+0x7d8>)
 800c038:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c03a:	e00d      	b.n	800c058 <tcp_process+0x7bc>
    default:
      break;
 800c03c:	bf00      	nop
 800c03e:	e00c      	b.n	800c05a <tcp_process+0x7be>
      break;
 800c040:	bf00      	nop
 800c042:	e00a      	b.n	800c05a <tcp_process+0x7be>
      break;
 800c044:	bf00      	nop
 800c046:	e008      	b.n	800c05a <tcp_process+0x7be>
      break;
 800c048:	bf00      	nop
 800c04a:	e006      	b.n	800c05a <tcp_process+0x7be>
      break;
 800c04c:	bf00      	nop
 800c04e:	e004      	b.n	800c05a <tcp_process+0x7be>
      break;
 800c050:	bf00      	nop
 800c052:	e002      	b.n	800c05a <tcp_process+0x7be>
      break;
 800c054:	bf00      	nop
 800c056:	e000      	b.n	800c05a <tcp_process+0x7be>
      break;
 800c058:	bf00      	nop
  }
  return ERR_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3724      	adds	r7, #36	; 0x24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd90      	pop	{r4, r7, pc}
 800c064:	20006e4c 	.word	0x20006e4c
 800c068:	20006e60 	.word	0x20006e60
 800c06c:	20000560 	.word	0x20000560
 800c070:	20000558 	.word	0x20000558
 800c074:	20000561 	.word	0x20000561
 800c078:	20006e50 	.word	0x20006e50

0800c07c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c07c:	b590      	push	{r4, r7, lr}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d106      	bne.n	800c09a <tcp_oos_insert_segment+0x1e>
 800c08c:	4b3b      	ldr	r3, [pc, #236]	; (800c17c <tcp_oos_insert_segment+0x100>)
 800c08e:	f240 421f 	movw	r2, #1055	; 0x41f
 800c092:	493b      	ldr	r1, [pc, #236]	; (800c180 <tcp_oos_insert_segment+0x104>)
 800c094:	483b      	ldr	r0, [pc, #236]	; (800c184 <tcp_oos_insert_segment+0x108>)
 800c096:	f008 f889 	bl	80141ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	899b      	ldrh	r3, [r3, #12]
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fb fa34 	bl	8007510 <lwip_htons>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d028      	beq.n	800c106 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c0b4:	6838      	ldr	r0, [r7, #0]
 800c0b6:	f7fe f979 	bl	800a3ac <tcp_segs_free>
    next = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	603b      	str	r3, [r7, #0]
 800c0be:	e056      	b.n	800c16e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	899b      	ldrh	r3, [r3, #12]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fb fa21 	bl	8007510 <lwip_htons>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00d      	beq.n	800c0f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	899b      	ldrh	r3, [r3, #12]
 800c0e0:	b29c      	uxth	r4, r3
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	f7fb fa14 	bl	8007510 <lwip_htons>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	4322      	orrs	r2, r4
 800c0f2:	b292      	uxth	r2, r2
 800c0f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7fe f968 	bl	800a3d6 <tcp_seg_free>
    while (next &&
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00e      	beq.n	800c12a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	891b      	ldrh	r3, [r3, #8]
 800c110:	461a      	mov	r2, r3
 800c112:	4b1d      	ldr	r3, [pc, #116]	; (800c188 <tcp_oos_insert_segment+0x10c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	441a      	add	r2, r3
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	8909      	ldrh	r1, [r1, #8]
 800c122:	440b      	add	r3, r1
 800c124:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c126:	2b00      	cmp	r3, #0
 800c128:	daca      	bge.n	800c0c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01e      	beq.n	800c16e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	891b      	ldrh	r3, [r3, #8]
 800c134:	461a      	mov	r2, r3
 800c136:	4b14      	ldr	r3, [pc, #80]	; (800c188 <tcp_oos_insert_segment+0x10c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	441a      	add	r2, r3
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c144:	2b00      	cmp	r3, #0
 800c146:	dd12      	ble.n	800c16e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	b29a      	uxth	r2, r3
 800c150:	4b0d      	ldr	r3, [pc, #52]	; (800c188 <tcp_oos_insert_segment+0x10c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	b29b      	uxth	r3, r3
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	b29a      	uxth	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	891b      	ldrh	r3, [r3, #8]
 800c166:	4619      	mov	r1, r3
 800c168:	4610      	mov	r0, r2
 800c16a:	f7fc fb71 	bl	8008850 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	601a      	str	r2, [r3, #0]
}
 800c174:	bf00      	nop
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd90      	pop	{r4, r7, pc}
 800c17c:	08016c7c 	.word	0x08016c7c
 800c180:	08016f3c 	.word	0x08016f3c
 800c184:	08016cc8 	.word	0x08016cc8
 800c188:	20000554 	.word	0x20000554

0800c18c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c18c:	b5b0      	push	{r4, r5, r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c19a:	e03e      	b.n	800c21a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fc fd5e 	bl	8008c6c <pbuf_clen>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c1ba:	8a7a      	ldrh	r2, [r7, #18]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d906      	bls.n	800c1ce <tcp_free_acked_segments+0x42>
 800c1c0:	4b2a      	ldr	r3, [pc, #168]	; (800c26c <tcp_free_acked_segments+0xe0>)
 800c1c2:	f240 4257 	movw	r2, #1111	; 0x457
 800c1c6:	492a      	ldr	r1, [pc, #168]	; (800c270 <tcp_free_acked_segments+0xe4>)
 800c1c8:	482a      	ldr	r0, [pc, #168]	; (800c274 <tcp_free_acked_segments+0xe8>)
 800c1ca:	f007 ffef 	bl	80141ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c1d4:	8a7b      	ldrh	r3, [r7, #18]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	891a      	ldrh	r2, [r3, #8]
 800c1e4:	4b24      	ldr	r3, [pc, #144]	; (800c278 <tcp_free_acked_segments+0xec>)
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	4b22      	ldr	r3, [pc, #136]	; (800c278 <tcp_free_acked_segments+0xec>)
 800c1ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c1f0:	6978      	ldr	r0, [r7, #20]
 800c1f2:	f7fe f8f0 	bl	800a3d6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00c      	beq.n	800c21a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <tcp_free_acked_segments+0x8e>
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d106      	bne.n	800c21a <tcp_free_acked_segments+0x8e>
 800c20c:	4b17      	ldr	r3, [pc, #92]	; (800c26c <tcp_free_acked_segments+0xe0>)
 800c20e:	f240 4261 	movw	r2, #1121	; 0x461
 800c212:	491a      	ldr	r1, [pc, #104]	; (800c27c <tcp_free_acked_segments+0xf0>)
 800c214:	4817      	ldr	r0, [pc, #92]	; (800c274 <tcp_free_acked_segments+0xe8>)
 800c216:	f007 ffc9 	bl	80141ac <iprintf>
  while (seg_list != NULL &&
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d020      	beq.n	800c262 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	4618      	mov	r0, r3
 800c228:	f7fb f987 	bl	800753a <lwip_htonl>
 800c22c:	4604      	mov	r4, r0
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	891b      	ldrh	r3, [r3, #8]
 800c232:	461d      	mov	r5, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	899b      	ldrh	r3, [r3, #12]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fb f967 	bl	8007510 <lwip_htons>
 800c242:	4603      	mov	r3, r0
 800c244:	b2db      	uxtb	r3, r3
 800c246:	f003 0303 	and.w	r3, r3, #3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <tcp_free_acked_segments+0xc6>
 800c24e:	2301      	movs	r3, #1
 800c250:	e000      	b.n	800c254 <tcp_free_acked_segments+0xc8>
 800c252:	2300      	movs	r3, #0
 800c254:	442b      	add	r3, r5
 800c256:	18e2      	adds	r2, r4, r3
 800c258:	4b09      	ldr	r3, [pc, #36]	; (800c280 <tcp_free_acked_segments+0xf4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c25e:	2b00      	cmp	r3, #0
 800c260:	dd9c      	ble.n	800c19c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c262:	68bb      	ldr	r3, [r7, #8]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bdb0      	pop	{r4, r5, r7, pc}
 800c26c:	08016c7c 	.word	0x08016c7c
 800c270:	08016f64 	.word	0x08016f64
 800c274:	08016cc8 	.word	0x08016cc8
 800c278:	2000055c 	.word	0x2000055c
 800c27c:	08016f8c 	.word	0x08016f8c
 800c280:	20000558 	.word	0x20000558

0800c284 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c284:	b5b0      	push	{r4, r5, r7, lr}
 800c286:	b094      	sub	sp, #80	; 0x50
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d106      	bne.n	800c2a4 <tcp_receive+0x20>
 800c296:	4ba6      	ldr	r3, [pc, #664]	; (800c530 <tcp_receive+0x2ac>)
 800c298:	f240 427b 	movw	r2, #1147	; 0x47b
 800c29c:	49a5      	ldr	r1, [pc, #660]	; (800c534 <tcp_receive+0x2b0>)
 800c29e:	48a6      	ldr	r0, [pc, #664]	; (800c538 <tcp_receive+0x2b4>)
 800c2a0:	f007 ff84 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	7d1b      	ldrb	r3, [r3, #20]
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d806      	bhi.n	800c2ba <tcp_receive+0x36>
 800c2ac:	4ba0      	ldr	r3, [pc, #640]	; (800c530 <tcp_receive+0x2ac>)
 800c2ae:	f240 427c 	movw	r2, #1148	; 0x47c
 800c2b2:	49a2      	ldr	r1, [pc, #648]	; (800c53c <tcp_receive+0x2b8>)
 800c2b4:	48a0      	ldr	r0, [pc, #640]	; (800c538 <tcp_receive+0x2b4>)
 800c2b6:	f007 ff79 	bl	80141ac <iprintf>

  if (flags & TCP_ACK) {
 800c2ba:	4ba1      	ldr	r3, [pc, #644]	; (800c540 <tcp_receive+0x2bc>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	f003 0310 	and.w	r3, r3, #16
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 8263 	beq.w	800c78e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2d4:	4413      	add	r3, r2
 800c2d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2dc:	4b99      	ldr	r3, [pc, #612]	; (800c544 <tcp_receive+0x2c0>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	db1b      	blt.n	800c31e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2ea:	4b96      	ldr	r3, [pc, #600]	; (800c544 <tcp_receive+0x2c0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d106      	bne.n	800c300 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2f6:	4b94      	ldr	r3, [pc, #592]	; (800c548 <tcp_receive+0x2c4>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	db0e      	blt.n	800c31e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c304:	4b90      	ldr	r3, [pc, #576]	; (800c548 <tcp_receive+0x2c4>)
 800c306:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c308:	429a      	cmp	r2, r3
 800c30a:	d125      	bne.n	800c358 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c30c:	4b8f      	ldr	r3, [pc, #572]	; (800c54c <tcp_receive+0x2c8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	89db      	ldrh	r3, [r3, #14]
 800c312:	b29a      	uxth	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d91c      	bls.n	800c358 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c31e:	4b8b      	ldr	r3, [pc, #556]	; (800c54c <tcp_receive+0x2c8>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	89db      	ldrh	r3, [r3, #14]
 800c324:	b29a      	uxth	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c338:	429a      	cmp	r2, r3
 800c33a:	d205      	bcs.n	800c348 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c348:	4b7e      	ldr	r3, [pc, #504]	; (800c544 <tcp_receive+0x2c0>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c350:	4b7d      	ldr	r3, [pc, #500]	; (800c548 <tcp_receive+0x2c4>)
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c358:	4b7b      	ldr	r3, [pc, #492]	; (800c548 <tcp_receive+0x2c4>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	dc58      	bgt.n	800c418 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c366:	4b7a      	ldr	r3, [pc, #488]	; (800c550 <tcp_receive+0x2cc>)
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d14b      	bne.n	800c406 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c378:	4413      	add	r3, r2
 800c37a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d142      	bne.n	800c406 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c386:	2b00      	cmp	r3, #0
 800c388:	db3d      	blt.n	800c406 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c38e:	4b6e      	ldr	r3, [pc, #440]	; (800c548 <tcp_receive+0x2c4>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d137      	bne.n	800c406 <tcp_receive+0x182>
              found_dupack = 1;
 800c396:	2301      	movs	r3, #1
 800c398:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c3a0:	2bff      	cmp	r3, #255	; 0xff
 800c3a2:	d007      	beq.n	800c3b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d91b      	bls.n	800c3f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3c8:	4413      	add	r3, r2
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d30a      	bcc.n	800c3ec <tcp_receive+0x168>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3e0:	4413      	add	r3, r2
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c3ea:	e004      	b.n	800c3f6 <tcp_receive+0x172>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d902      	bls.n	800c406 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f002 fb41 	bl	800ea88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f040 8160 	bne.w	800c6ce <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c416:	e15a      	b.n	800c6ce <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c418:	4b4b      	ldr	r3, [pc, #300]	; (800c548 <tcp_receive+0x2c4>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	3b01      	subs	r3, #1
 800c424:	2b00      	cmp	r3, #0
 800c426:	f2c0 814d 	blt.w	800c6c4 <tcp_receive+0x440>
 800c42a:	4b47      	ldr	r3, [pc, #284]	; (800c548 <tcp_receive+0x2c4>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	2b00      	cmp	r3, #0
 800c436:	f300 8145 	bgt.w	800c6c4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	8b5b      	ldrh	r3, [r3, #26]
 800c43e:	f003 0304 	and.w	r3, r3, #4
 800c442:	2b00      	cmp	r3, #0
 800c444:	d010      	beq.n	800c468 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	8b5b      	ldrh	r3, [r3, #26]
 800c44a:	f023 0304 	bic.w	r3, r3, #4
 800c44e:	b29a      	uxth	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c476:	10db      	asrs	r3, r3, #3
 800c478:	b21b      	sxth	r3, r3
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c482:	b29b      	uxth	r3, r3
 800c484:	4413      	add	r3, r2
 800c486:	b29b      	uxth	r3, r3
 800c488:	b21a      	sxth	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c490:	4b2d      	ldr	r3, [pc, #180]	; (800c548 <tcp_receive+0x2c4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	b29a      	uxth	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c4a8:	4b27      	ldr	r3, [pc, #156]	; (800c548 <tcp_receive+0x2c4>)
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7d1b      	ldrb	r3, [r3, #20]
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	f240 8096 	bls.w	800c5e6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d244      	bcs.n	800c554 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8b5b      	ldrh	r3, [r3, #26]
 800c4ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <tcp_receive+0x256>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e000      	b.n	800c4dc <tcp_receive+0x258>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c4e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4ea:	fb12 f303 	smulbb	r3, r2, r3
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	bf28      	it	cs
 800c4f6:	4613      	movcs	r3, r2
 800c4f8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c500:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c502:	4413      	add	r3, r2
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d309      	bcc.n	800c524 <tcp_receive+0x2a0>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c516:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c518:	4413      	add	r3, r2
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c522:	e060      	b.n	800c5e6 <tcp_receive+0x362>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c52a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c52e:	e05a      	b.n	800c5e6 <tcp_receive+0x362>
 800c530:	08016c7c 	.word	0x08016c7c
 800c534:	08016fac 	.word	0x08016fac
 800c538:	08016cc8 	.word	0x08016cc8
 800c53c:	08016fc8 	.word	0x08016fc8
 800c540:	20000560 	.word	0x20000560
 800c544:	20000554 	.word	0x20000554
 800c548:	20000558 	.word	0x20000558
 800c54c:	20000544 	.word	0x20000544
 800c550:	2000055e 	.word	0x2000055e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c55a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c55c:	4413      	add	r3, r2
 800c55e:	b29a      	uxth	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c566:	429a      	cmp	r2, r3
 800c568:	d309      	bcc.n	800c57e <tcp_receive+0x2fa>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c572:	4413      	add	r3, r2
 800c574:	b29a      	uxth	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c57c:	e004      	b.n	800c588 <tcp_receive+0x304>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c594:	429a      	cmp	r2, r3
 800c596:	d326      	bcc.n	800c5e6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5b8:	4413      	add	r3, r2
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d30a      	bcc.n	800c5dc <tcp_receive+0x358>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5d0:	4413      	add	r3, r2
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c5da:	e004      	b.n	800c5e6 <tcp_receive+0x362>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ee:	4a98      	ldr	r2, [pc, #608]	; (800c850 <tcp_receive+0x5cc>)
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7ff fdcb 	bl	800c18c <tcp_free_acked_segments>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c604:	4a93      	ldr	r2, [pc, #588]	; (800c854 <tcp_receive+0x5d0>)
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fdc0 	bl	800c18c <tcp_free_acked_segments>
 800c60c:	4602      	mov	r2, r0
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c616:	2b00      	cmp	r3, #0
 800c618:	d104      	bne.n	800c624 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c620:	861a      	strh	r2, [r3, #48]	; 0x30
 800c622:	e002      	b.n	800c62a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c634:	2b00      	cmp	r3, #0
 800c636:	d103      	bne.n	800c640 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c646:	4b84      	ldr	r3, [pc, #528]	; (800c858 <tcp_receive+0x5d4>)
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	4413      	add	r3, r2
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	8b5b      	ldrh	r3, [r3, #26]
 800c658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d035      	beq.n	800c6cc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c664:	2b00      	cmp	r3, #0
 800c666:	d118      	bne.n	800c69a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00c      	beq.n	800c68a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fa ff5c 	bl	800753a <lwip_htonl>
 800c682:	4603      	mov	r3, r0
 800c684:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c686:	2b00      	cmp	r3, #0
 800c688:	dc20      	bgt.n	800c6cc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	8b5b      	ldrh	r3, [r3, #26]
 800c68e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c692:	b29a      	uxth	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c698:	e018      	b.n	800c6cc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fa ff47 	bl	800753a <lwip_htonl>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	1ae3      	subs	r3, r4, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	dc0b      	bgt.n	800c6cc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	8b5b      	ldrh	r3, [r3, #26]
 800c6b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c6c2:	e003      	b.n	800c6cc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f002 fbcd 	bl	800ee64 <tcp_send_empty_ack>
 800c6ca:	e000      	b.n	800c6ce <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c6cc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d05b      	beq.n	800c78e <tcp_receive+0x50a>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6da:	4b60      	ldr	r3, [pc, #384]	; (800c85c <tcp_receive+0x5d8>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	da54      	bge.n	800c78e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c6e4:	4b5e      	ldr	r3, [pc, #376]	; (800c860 <tcp_receive+0x5dc>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c6f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c702:	10db      	asrs	r3, r3, #3
 800c704:	b21b      	sxth	r3, r3
 800c706:	b29b      	uxth	r3, r3
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c716:	b29a      	uxth	r2, r3
 800c718:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c71c:	4413      	add	r3, r2
 800c71e:	b29b      	uxth	r3, r3
 800c720:	b21a      	sxth	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c726:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	da05      	bge.n	800c73a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c72e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c732:	425b      	negs	r3, r3
 800c734:	b29b      	uxth	r3, r3
 800c736:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c73a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c744:	109b      	asrs	r3, r3, #2
 800c746:	b21b      	sxth	r3, r3
 800c748:	b29b      	uxth	r3, r3
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c758:	b29a      	uxth	r2, r3
 800c75a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c75e:	4413      	add	r3, r2
 800c760:	b29b      	uxth	r3, r3
 800c762:	b21a      	sxth	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c76e:	10db      	asrs	r3, r3, #3
 800c770:	b21b      	sxth	r3, r3
 800c772:	b29a      	uxth	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	4413      	add	r3, r2
 800c77e:	b29b      	uxth	r3, r3
 800c780:	b21a      	sxth	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c78e:	4b35      	ldr	r3, [pc, #212]	; (800c864 <tcp_receive+0x5e0>)
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	f000 84e1 	beq.w	800d15a <tcp_receive+0xed6>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7d1b      	ldrb	r3, [r3, #20]
 800c79c:	2b06      	cmp	r3, #6
 800c79e:	f200 84dc 	bhi.w	800d15a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7a6:	4b30      	ldr	r3, [pc, #192]	; (800c868 <tcp_receive+0x5e4>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f2c0 808e 	blt.w	800c8d0 <tcp_receive+0x64c>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7b8:	4b2a      	ldr	r3, [pc, #168]	; (800c864 <tcp_receive+0x5e0>)
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	4619      	mov	r1, r3
 800c7be:	4b2a      	ldr	r3, [pc, #168]	; (800c868 <tcp_receive+0x5e4>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	440b      	add	r3, r1
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f300 8081 	bgt.w	800c8d0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c7ce:	4b27      	ldr	r3, [pc, #156]	; (800c86c <tcp_receive+0x5e8>)
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7d8:	4b23      	ldr	r3, [pc, #140]	; (800c868 <tcp_receive+0x5e4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c7e0:	4b22      	ldr	r3, [pc, #136]	; (800c86c <tcp_receive+0x5e8>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <tcp_receive+0x572>
 800c7e8:	4b21      	ldr	r3, [pc, #132]	; (800c870 <tcp_receive+0x5ec>)
 800c7ea:	f240 5294 	movw	r2, #1428	; 0x594
 800c7ee:	4921      	ldr	r1, [pc, #132]	; (800c874 <tcp_receive+0x5f0>)
 800c7f0:	4821      	ldr	r0, [pc, #132]	; (800c878 <tcp_receive+0x5f4>)
 800c7f2:	f007 fcdb 	bl	80141ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d906      	bls.n	800c80e <tcp_receive+0x58a>
 800c800:	4b1b      	ldr	r3, [pc, #108]	; (800c870 <tcp_receive+0x5ec>)
 800c802:	f240 5295 	movw	r2, #1429	; 0x595
 800c806:	491d      	ldr	r1, [pc, #116]	; (800c87c <tcp_receive+0x5f8>)
 800c808:	481b      	ldr	r0, [pc, #108]	; (800c878 <tcp_receive+0x5f4>)
 800c80a:	f007 fccf 	bl	80141ac <iprintf>
      off = (u16_t)off32;
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c814:	4b15      	ldr	r3, [pc, #84]	; (800c86c <tcp_receive+0x5e8>)
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	891b      	ldrh	r3, [r3, #8]
 800c81a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c81e:	429a      	cmp	r2, r3
 800c820:	d906      	bls.n	800c830 <tcp_receive+0x5ac>
 800c822:	4b13      	ldr	r3, [pc, #76]	; (800c870 <tcp_receive+0x5ec>)
 800c824:	f240 5297 	movw	r2, #1431	; 0x597
 800c828:	4915      	ldr	r1, [pc, #84]	; (800c880 <tcp_receive+0x5fc>)
 800c82a:	4813      	ldr	r0, [pc, #76]	; (800c878 <tcp_receive+0x5f4>)
 800c82c:	f007 fcbe 	bl	80141ac <iprintf>
      inseg.len -= off;
 800c830:	4b0e      	ldr	r3, [pc, #56]	; (800c86c <tcp_receive+0x5e8>)
 800c832:	891a      	ldrh	r2, [r3, #8]
 800c834:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <tcp_receive+0x5e8>)
 800c83e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <tcp_receive+0x5e8>)
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	891a      	ldrh	r2, [r3, #8]
 800c846:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c84e:	e029      	b.n	800c8a4 <tcp_receive+0x620>
 800c850:	08016fe4 	.word	0x08016fe4
 800c854:	08016fec 	.word	0x08016fec
 800c858:	2000055c 	.word	0x2000055c
 800c85c:	20000558 	.word	0x20000558
 800c860:	20006e54 	.word	0x20006e54
 800c864:	2000055e 	.word	0x2000055e
 800c868:	20000554 	.word	0x20000554
 800c86c:	20000534 	.word	0x20000534
 800c870:	08016c7c 	.word	0x08016c7c
 800c874:	08016ff4 	.word	0x08016ff4
 800c878:	08016cc8 	.word	0x08016cc8
 800c87c:	08017004 	.word	0x08017004
 800c880:	08017014 	.word	0x08017014
        off -= p->len;
 800c884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c886:	895b      	ldrh	r3, [r3, #10]
 800c888:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c894:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c896:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c89a:	2200      	movs	r2, #0
 800c89c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8a6:	895b      	ldrh	r3, [r3, #10]
 800c8a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d8e9      	bhi.n	800c884 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c8b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c8b8:	f7fc f8ca 	bl	8008a50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c0:	4a91      	ldr	r2, [pc, #580]	; (800cb08 <tcp_receive+0x884>)
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	4b91      	ldr	r3, [pc, #580]	; (800cb0c <tcp_receive+0x888>)
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	4a8f      	ldr	r2, [pc, #572]	; (800cb08 <tcp_receive+0x884>)
 800c8ca:	6812      	ldr	r2, [r2, #0]
 800c8cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c8ce:	e00d      	b.n	800c8ec <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c8d0:	4b8d      	ldr	r3, [pc, #564]	; (800cb08 <tcp_receive+0x884>)
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	da06      	bge.n	800c8ec <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	8b5b      	ldrh	r3, [r3, #26]
 800c8e2:	f043 0302 	orr.w	r3, r3, #2
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c8ec:	4b86      	ldr	r3, [pc, #536]	; (800cb08 <tcp_receive+0x884>)
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f2c0 842a 	blt.w	800d150 <tcp_receive+0xecc>
 800c8fc:	4b82      	ldr	r3, [pc, #520]	; (800cb08 <tcp_receive+0x884>)
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c908:	440b      	add	r3, r1
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	3301      	adds	r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f300 841e 	bgt.w	800d150 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c918:	4b7b      	ldr	r3, [pc, #492]	; (800cb08 <tcp_receive+0x884>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	f040 829a 	bne.w	800ce56 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c922:	4b7a      	ldr	r3, [pc, #488]	; (800cb0c <tcp_receive+0x888>)
 800c924:	891c      	ldrh	r4, [r3, #8]
 800c926:	4b79      	ldr	r3, [pc, #484]	; (800cb0c <tcp_receive+0x888>)
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	899b      	ldrh	r3, [r3, #12]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fa fdee 	bl	8007510 <lwip_htons>
 800c934:	4603      	mov	r3, r0
 800c936:	b2db      	uxtb	r3, r3
 800c938:	f003 0303 	and.w	r3, r3, #3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <tcp_receive+0x6c0>
 800c940:	2301      	movs	r3, #1
 800c942:	e000      	b.n	800c946 <tcp_receive+0x6c2>
 800c944:	2300      	movs	r3, #0
 800c946:	4423      	add	r3, r4
 800c948:	b29a      	uxth	r2, r3
 800c94a:	4b71      	ldr	r3, [pc, #452]	; (800cb10 <tcp_receive+0x88c>)
 800c94c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c952:	4b6f      	ldr	r3, [pc, #444]	; (800cb10 <tcp_receive+0x88c>)
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d275      	bcs.n	800ca46 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c95a:	4b6c      	ldr	r3, [pc, #432]	; (800cb0c <tcp_receive+0x888>)
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	899b      	ldrh	r3, [r3, #12]
 800c960:	b29b      	uxth	r3, r3
 800c962:	4618      	mov	r0, r3
 800c964:	f7fa fdd4 	bl	8007510 <lwip_htons>
 800c968:	4603      	mov	r3, r0
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	f003 0301 	and.w	r3, r3, #1
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01f      	beq.n	800c9b4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c974:	4b65      	ldr	r3, [pc, #404]	; (800cb0c <tcp_receive+0x888>)
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	899b      	ldrh	r3, [r3, #12]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	b21b      	sxth	r3, r3
 800c97e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c982:	b21c      	sxth	r4, r3
 800c984:	4b61      	ldr	r3, [pc, #388]	; (800cb0c <tcp_receive+0x888>)
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	899b      	ldrh	r3, [r3, #12]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fa fdbf 	bl	8007510 <lwip_htons>
 800c992:	4603      	mov	r3, r0
 800c994:	b2db      	uxtb	r3, r3
 800c996:	b29b      	uxth	r3, r3
 800c998:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fa fdb6 	bl	8007510 <lwip_htons>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	b21b      	sxth	r3, r3
 800c9a8:	4323      	orrs	r3, r4
 800c9aa:	b21a      	sxth	r2, r3
 800c9ac:	4b57      	ldr	r3, [pc, #348]	; (800cb0c <tcp_receive+0x888>)
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	b292      	uxth	r2, r2
 800c9b2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9b8:	4b54      	ldr	r3, [pc, #336]	; (800cb0c <tcp_receive+0x888>)
 800c9ba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c9bc:	4b53      	ldr	r3, [pc, #332]	; (800cb0c <tcp_receive+0x888>)
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	899b      	ldrh	r3, [r3, #12]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fa fda3 	bl	8007510 <lwip_htons>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	f003 0302 	and.w	r3, r3, #2
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d005      	beq.n	800c9e2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800c9d6:	4b4d      	ldr	r3, [pc, #308]	; (800cb0c <tcp_receive+0x888>)
 800c9d8:	891b      	ldrh	r3, [r3, #8]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	4b4b      	ldr	r3, [pc, #300]	; (800cb0c <tcp_receive+0x888>)
 800c9e0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c9e2:	4b4a      	ldr	r3, [pc, #296]	; (800cb0c <tcp_receive+0x888>)
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	4a49      	ldr	r2, [pc, #292]	; (800cb0c <tcp_receive+0x888>)
 800c9e8:	8912      	ldrh	r2, [r2, #8]
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fb ff2f 	bl	8008850 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c9f2:	4b46      	ldr	r3, [pc, #280]	; (800cb0c <tcp_receive+0x888>)
 800c9f4:	891c      	ldrh	r4, [r3, #8]
 800c9f6:	4b45      	ldr	r3, [pc, #276]	; (800cb0c <tcp_receive+0x888>)
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	899b      	ldrh	r3, [r3, #12]
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fa fd86 	bl	8007510 <lwip_htons>
 800ca04:	4603      	mov	r3, r0
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	f003 0303 	and.w	r3, r3, #3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <tcp_receive+0x790>
 800ca10:	2301      	movs	r3, #1
 800ca12:	e000      	b.n	800ca16 <tcp_receive+0x792>
 800ca14:	2300      	movs	r3, #0
 800ca16:	4423      	add	r3, r4
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	4b3d      	ldr	r3, [pc, #244]	; (800cb10 <tcp_receive+0x88c>)
 800ca1c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ca1e:	4b3c      	ldr	r3, [pc, #240]	; (800cb10 <tcp_receive+0x88c>)
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	4b38      	ldr	r3, [pc, #224]	; (800cb08 <tcp_receive+0x884>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	441a      	add	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ca32:	440b      	add	r3, r1
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d006      	beq.n	800ca46 <tcp_receive+0x7c2>
 800ca38:	4b36      	ldr	r3, [pc, #216]	; (800cb14 <tcp_receive+0x890>)
 800ca3a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ca3e:	4936      	ldr	r1, [pc, #216]	; (800cb18 <tcp_receive+0x894>)
 800ca40:	4836      	ldr	r0, [pc, #216]	; (800cb1c <tcp_receive+0x898>)
 800ca42:	f007 fbb3 	bl	80141ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 80e7 	beq.w	800cc1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca50:	4b2e      	ldr	r3, [pc, #184]	; (800cb0c <tcp_receive+0x888>)
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	899b      	ldrh	r3, [r3, #12]
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fa fd59 	bl	8007510 <lwip_htons>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d010      	beq.n	800ca8c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ca6a:	e00a      	b.n	800ca82 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca70:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f7fd fcaa 	bl	800a3d6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1f0      	bne.n	800ca6c <tcp_receive+0x7e8>
 800ca8a:	e0c8      	b.n	800cc1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca90:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ca92:	e052      	b.n	800cb3a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ca94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	899b      	ldrh	r3, [r3, #12]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fa fd37 	bl	8007510 <lwip_htons>
 800caa2:	4603      	mov	r3, r0
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	f003 0301 	and.w	r3, r3, #1
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d03d      	beq.n	800cb2a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800caae:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <tcp_receive+0x888>)
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	899b      	ldrh	r3, [r3, #12]
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fa fd2a 	bl	8007510 <lwip_htons>
 800cabc:	4603      	mov	r3, r0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d130      	bne.n	800cb2a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cac8:	4b10      	ldr	r3, [pc, #64]	; (800cb0c <tcp_receive+0x888>)
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	899b      	ldrh	r3, [r3, #12]
 800cace:	b29c      	uxth	r4, r3
 800cad0:	2001      	movs	r0, #1
 800cad2:	f7fa fd1d 	bl	8007510 <lwip_htons>
 800cad6:	4603      	mov	r3, r0
 800cad8:	461a      	mov	r2, r3
 800cada:	4b0c      	ldr	r3, [pc, #48]	; (800cb0c <tcp_receive+0x888>)
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	4322      	orrs	r2, r4
 800cae0:	b292      	uxth	r2, r2
 800cae2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cae4:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <tcp_receive+0x888>)
 800cae6:	891c      	ldrh	r4, [r3, #8]
 800cae8:	4b08      	ldr	r3, [pc, #32]	; (800cb0c <tcp_receive+0x888>)
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	899b      	ldrh	r3, [r3, #12]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fa fd0d 	bl	8007510 <lwip_htons>
 800caf6:	4603      	mov	r3, r0
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	f003 0303 	and.w	r3, r3, #3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00e      	beq.n	800cb20 <tcp_receive+0x89c>
 800cb02:	2301      	movs	r3, #1
 800cb04:	e00d      	b.n	800cb22 <tcp_receive+0x89e>
 800cb06:	bf00      	nop
 800cb08:	20000554 	.word	0x20000554
 800cb0c:	20000534 	.word	0x20000534
 800cb10:	2000055e 	.word	0x2000055e
 800cb14:	08016c7c 	.word	0x08016c7c
 800cb18:	08017024 	.word	0x08017024
 800cb1c:	08016cc8 	.word	0x08016cc8
 800cb20:	2300      	movs	r3, #0
 800cb22:	4423      	add	r3, r4
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	4b98      	ldr	r3, [pc, #608]	; (800cd88 <tcp_receive+0xb04>)
 800cb28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cb34:	6938      	ldr	r0, [r7, #16]
 800cb36:	f7fd fc4e 	bl	800a3d6 <tcp_seg_free>
            while (next &&
 800cb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00e      	beq.n	800cb5e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cb40:	4b91      	ldr	r3, [pc, #580]	; (800cd88 <tcp_receive+0xb04>)
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	461a      	mov	r2, r3
 800cb46:	4b91      	ldr	r3, [pc, #580]	; (800cd8c <tcp_receive+0xb08>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	441a      	add	r2, r3
 800cb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb54:	8909      	ldrh	r1, [r1, #8]
 800cb56:	440b      	add	r3, r1
 800cb58:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da9a      	bge.n	800ca94 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cb5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d059      	beq.n	800cc18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800cb64:	4b88      	ldr	r3, [pc, #544]	; (800cd88 <tcp_receive+0xb04>)
 800cb66:	881b      	ldrh	r3, [r3, #0]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b88      	ldr	r3, [pc, #544]	; (800cd8c <tcp_receive+0xb08>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	441a      	add	r2, r3
 800cb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	dd4d      	ble.n	800cc18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	4b81      	ldr	r3, [pc, #516]	; (800cd8c <tcp_receive+0xb08>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	4b80      	ldr	r3, [pc, #512]	; (800cd90 <tcp_receive+0xb0c>)
 800cb90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cb92:	4b7f      	ldr	r3, [pc, #508]	; (800cd90 <tcp_receive+0xb0c>)
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	899b      	ldrh	r3, [r3, #12]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fa fcb8 	bl	8007510 <lwip_htons>
 800cba0:	4603      	mov	r3, r0
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <tcp_receive+0x934>
                inseg.len -= 1;
 800cbac:	4b78      	ldr	r3, [pc, #480]	; (800cd90 <tcp_receive+0xb0c>)
 800cbae:	891b      	ldrh	r3, [r3, #8]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	4b76      	ldr	r3, [pc, #472]	; (800cd90 <tcp_receive+0xb0c>)
 800cbb6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cbb8:	4b75      	ldr	r3, [pc, #468]	; (800cd90 <tcp_receive+0xb0c>)
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	4a74      	ldr	r2, [pc, #464]	; (800cd90 <tcp_receive+0xb0c>)
 800cbbe:	8912      	ldrh	r2, [r2, #8]
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fb fe44 	bl	8008850 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cbc8:	4b71      	ldr	r3, [pc, #452]	; (800cd90 <tcp_receive+0xb0c>)
 800cbca:	891c      	ldrh	r4, [r3, #8]
 800cbcc:	4b70      	ldr	r3, [pc, #448]	; (800cd90 <tcp_receive+0xb0c>)
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	899b      	ldrh	r3, [r3, #12]
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fa fc9b 	bl	8007510 <lwip_htons>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	f003 0303 	and.w	r3, r3, #3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <tcp_receive+0x966>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e000      	b.n	800cbec <tcp_receive+0x968>
 800cbea:	2300      	movs	r3, #0
 800cbec:	4423      	add	r3, r4
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	4b65      	ldr	r3, [pc, #404]	; (800cd88 <tcp_receive+0xb04>)
 800cbf2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cbf4:	4b64      	ldr	r3, [pc, #400]	; (800cd88 <tcp_receive+0xb04>)
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4b64      	ldr	r3, [pc, #400]	; (800cd8c <tcp_receive+0xb08>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	441a      	add	r2, r3
 800cc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d006      	beq.n	800cc18 <tcp_receive+0x994>
 800cc0a:	4b62      	ldr	r3, [pc, #392]	; (800cd94 <tcp_receive+0xb10>)
 800cc0c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cc10:	4961      	ldr	r1, [pc, #388]	; (800cd98 <tcp_receive+0xb14>)
 800cc12:	4862      	ldr	r0, [pc, #392]	; (800cd9c <tcp_receive+0xb18>)
 800cc14:	f007 faca 	bl	80141ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc1c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cc1e:	4b5a      	ldr	r3, [pc, #360]	; (800cd88 <tcp_receive+0xb04>)
 800cc20:	881b      	ldrh	r3, [r3, #0]
 800cc22:	461a      	mov	r2, r3
 800cc24:	4b59      	ldr	r3, [pc, #356]	; (800cd8c <tcp_receive+0xb08>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	441a      	add	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc32:	4b55      	ldr	r3, [pc, #340]	; (800cd88 <tcp_receive+0xb04>)
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d206      	bcs.n	800cc48 <tcp_receive+0x9c4>
 800cc3a:	4b56      	ldr	r3, [pc, #344]	; (800cd94 <tcp_receive+0xb10>)
 800cc3c:	f240 6207 	movw	r2, #1543	; 0x607
 800cc40:	4957      	ldr	r1, [pc, #348]	; (800cda0 <tcp_receive+0xb1c>)
 800cc42:	4856      	ldr	r0, [pc, #344]	; (800cd9c <tcp_receive+0xb18>)
 800cc44:	f007 fab2 	bl	80141ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc4c:	4b4e      	ldr	r3, [pc, #312]	; (800cd88 <tcp_receive+0xb04>)
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7fc fe97 	bl	800998c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cc5e:	4b4c      	ldr	r3, [pc, #304]	; (800cd90 <tcp_receive+0xb0c>)
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	891b      	ldrh	r3, [r3, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d006      	beq.n	800cc76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800cc68:	4b49      	ldr	r3, [pc, #292]	; (800cd90 <tcp_receive+0xb0c>)
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	4a4d      	ldr	r2, [pc, #308]	; (800cda4 <tcp_receive+0xb20>)
 800cc6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cc70:	4b47      	ldr	r3, [pc, #284]	; (800cd90 <tcp_receive+0xb0c>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc76:	4b46      	ldr	r3, [pc, #280]	; (800cd90 <tcp_receive+0xb0c>)
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	899b      	ldrh	r3, [r3, #12]
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fa fc46 	bl	8007510 <lwip_htons>
 800cc84:	4603      	mov	r3, r0
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f000 80b8 	beq.w	800ce02 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cc92:	4b45      	ldr	r3, [pc, #276]	; (800cda8 <tcp_receive+0xb24>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	f043 0320 	orr.w	r3, r3, #32
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	4b42      	ldr	r3, [pc, #264]	; (800cda8 <tcp_receive+0xb24>)
 800cc9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cca0:	e0af      	b.n	800ce02 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cca6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	4a36      	ldr	r2, [pc, #216]	; (800cd8c <tcp_receive+0xb08>)
 800ccb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	891b      	ldrh	r3, [r3, #8]
 800ccb8:	461c      	mov	r4, r3
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	899b      	ldrh	r3, [r3, #12]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fa fc24 	bl	8007510 <lwip_htons>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	f003 0303 	and.w	r3, r3, #3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <tcp_receive+0xa54>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e000      	b.n	800ccda <tcp_receive+0xa56>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	191a      	adds	r2, r3, r4
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce0:	441a      	add	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccea:	461c      	mov	r4, r3
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	891b      	ldrh	r3, [r3, #8]
 800ccf0:	461d      	mov	r5, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	899b      	ldrh	r3, [r3, #12]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fa fc08 	bl	8007510 <lwip_htons>
 800cd00:	4603      	mov	r3, r0
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	f003 0303 	and.w	r3, r3, #3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <tcp_receive+0xa8c>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e000      	b.n	800cd12 <tcp_receive+0xa8e>
 800cd10:	2300      	movs	r3, #0
 800cd12:	442b      	add	r3, r5
 800cd14:	429c      	cmp	r4, r3
 800cd16:	d206      	bcs.n	800cd26 <tcp_receive+0xaa2>
 800cd18:	4b1e      	ldr	r3, [pc, #120]	; (800cd94 <tcp_receive+0xb10>)
 800cd1a:	f240 622b 	movw	r2, #1579	; 0x62b
 800cd1e:	4923      	ldr	r1, [pc, #140]	; (800cdac <tcp_receive+0xb28>)
 800cd20:	481e      	ldr	r0, [pc, #120]	; (800cd9c <tcp_receive+0xb18>)
 800cd22:	f007 fa43 	bl	80141ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	891b      	ldrh	r3, [r3, #8]
 800cd2a:	461c      	mov	r4, r3
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	899b      	ldrh	r3, [r3, #12]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fa fbeb 	bl	8007510 <lwip_htons>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	f003 0303 	and.w	r3, r3, #3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d001      	beq.n	800cd4a <tcp_receive+0xac6>
 800cd46:	2301      	movs	r3, #1
 800cd48:	e000      	b.n	800cd4c <tcp_receive+0xac8>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	1919      	adds	r1, r3, r4
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd52:	b28b      	uxth	r3, r1
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7fc fe15 	bl	800998c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	891b      	ldrh	r3, [r3, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d028      	beq.n	800cdbe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <tcp_receive+0xb20>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d01d      	beq.n	800cdb0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800cd74:	4b0b      	ldr	r3, [pc, #44]	; (800cda4 <tcp_receive+0xb20>)
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4610      	mov	r0, r2
 800cd80:	f7fb ffae 	bl	8008ce0 <pbuf_cat>
 800cd84:	e018      	b.n	800cdb8 <tcp_receive+0xb34>
 800cd86:	bf00      	nop
 800cd88:	2000055e 	.word	0x2000055e
 800cd8c:	20000554 	.word	0x20000554
 800cd90:	20000534 	.word	0x20000534
 800cd94:	08016c7c 	.word	0x08016c7c
 800cd98:	0801705c 	.word	0x0801705c
 800cd9c:	08016cc8 	.word	0x08016cc8
 800cda0:	08017098 	.word	0x08017098
 800cda4:	20000564 	.word	0x20000564
 800cda8:	20000561 	.word	0x20000561
 800cdac:	080170b8 	.word	0x080170b8
            } else {
              recv_data = cseg->p;
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	4a70      	ldr	r2, [pc, #448]	; (800cf78 <tcp_receive+0xcf4>)
 800cdb6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	899b      	ldrh	r3, [r3, #12]
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fa fba2 	bl	8007510 <lwip_htons>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00d      	beq.n	800cdf4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cdd8:	4b68      	ldr	r3, [pc, #416]	; (800cf7c <tcp_receive+0xcf8>)
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	f043 0320 	orr.w	r3, r3, #32
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	4b66      	ldr	r3, [pc, #408]	; (800cf7c <tcp_receive+0xcf8>)
 800cde4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	7d1b      	ldrb	r3, [r3, #20]
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d102      	bne.n	800cdf4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2207      	movs	r2, #7
 800cdf2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800cdfc:	68b8      	ldr	r0, [r7, #8]
 800cdfe:	f7fd faea 	bl	800a3d6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d008      	beq.n	800ce1c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	685a      	ldr	r2, [r3, #4]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ce16:	429a      	cmp	r2, r3
 800ce18:	f43f af43 	beq.w	800cca2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	8b5b      	ldrh	r3, [r3, #26]
 800ce20:	f003 0301 	and.w	r3, r3, #1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00e      	beq.n	800ce46 <tcp_receive+0xbc2>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	8b5b      	ldrh	r3, [r3, #26]
 800ce2c:	f023 0301 	bic.w	r3, r3, #1
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	835a      	strh	r2, [r3, #26]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	8b5b      	ldrh	r3, [r3, #26]
 800ce3a:	f043 0302 	orr.w	r3, r3, #2
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ce44:	e188      	b.n	800d158 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8b5b      	ldrh	r3, [r3, #26]
 800ce4a:	f043 0301 	orr.w	r3, r3, #1
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ce54:	e180      	b.n	800d158 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ce5e:	4848      	ldr	r0, [pc, #288]	; (800cf80 <tcp_receive+0xcfc>)
 800ce60:	f7fd faf0 	bl	800a444 <tcp_seg_copy>
 800ce64:	4602      	mov	r2, r0
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	675a      	str	r2, [r3, #116]	; 0x74
 800ce6a:	e16d      	b.n	800d148 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce74:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce76:	e157      	b.n	800d128 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	685a      	ldr	r2, [r3, #4]
 800ce7e:	4b41      	ldr	r3, [pc, #260]	; (800cf84 <tcp_receive+0xd00>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d11d      	bne.n	800cec2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ce86:	4b3e      	ldr	r3, [pc, #248]	; (800cf80 <tcp_receive+0xcfc>)
 800ce88:	891a      	ldrh	r2, [r3, #8]
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	891b      	ldrh	r3, [r3, #8]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	f240 814f 	bls.w	800d132 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ce94:	483a      	ldr	r0, [pc, #232]	; (800cf80 <tcp_receive+0xcfc>)
 800ce96:	f7fd fad5 	bl	800a444 <tcp_seg_copy>
 800ce9a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 8149 	beq.w	800d136 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d003      	beq.n	800ceb2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	e002      	b.n	800ceb8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ceb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ceba:	6978      	ldr	r0, [r7, #20]
 800cebc:	f7ff f8de 	bl	800c07c <tcp_oos_insert_segment>
                }
                break;
 800cec0:	e139      	b.n	800d136 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d117      	bne.n	800cef8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cec8:	4b2e      	ldr	r3, [pc, #184]	; (800cf84 <tcp_receive+0xd00>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	da57      	bge.n	800cf88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ced8:	4829      	ldr	r0, [pc, #164]	; (800cf80 <tcp_receive+0xcfc>)
 800ceda:	f7fd fab3 	bl	800a444 <tcp_seg_copy>
 800cede:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 8129 	beq.w	800d13a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	69ba      	ldr	r2, [r7, #24]
 800ceec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ceee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cef0:	69b8      	ldr	r0, [r7, #24]
 800cef2:	f7ff f8c3 	bl	800c07c <tcp_oos_insert_segment>
                  }
                  break;
 800cef6:	e120      	b.n	800d13a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cef8:	4b22      	ldr	r3, [pc, #136]	; (800cf84 <tcp_receive+0xd00>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	3b01      	subs	r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	db3e      	blt.n	800cf88 <tcp_receive+0xd04>
 800cf0a:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <tcp_receive+0xd00>)
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	3301      	adds	r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc35      	bgt.n	800cf88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cf1c:	4818      	ldr	r0, [pc, #96]	; (800cf80 <tcp_receive+0xcfc>)
 800cf1e:	f7fd fa91 	bl	800a444 <tcp_seg_copy>
 800cf22:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 8109 	beq.w	800d13e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf34:	8912      	ldrh	r2, [r2, #8]
 800cf36:	441a      	add	r2, r3
 800cf38:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <tcp_receive+0xd00>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	dd12      	ble.n	800cf68 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cf42:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <tcp_receive+0xd00>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf56:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cf58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5e:	891b      	ldrh	r3, [r3, #8]
 800cf60:	4619      	mov	r1, r3
 800cf62:	4610      	mov	r0, r2
 800cf64:	f7fb fc74 	bl	8008850 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6a:	69fa      	ldr	r2, [r7, #28]
 800cf6c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cf6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf70:	69f8      	ldr	r0, [r7, #28]
 800cf72:	f7ff f883 	bl	800c07c <tcp_oos_insert_segment>
                  }
                  break;
 800cf76:	e0e2      	b.n	800d13e <tcp_receive+0xeba>
 800cf78:	20000564 	.word	0x20000564
 800cf7c:	20000561 	.word	0x20000561
 800cf80:	20000534 	.word	0x20000534
 800cf84:	20000554 	.word	0x20000554
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f040 80c6 	bne.w	800d122 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cf96:	4b80      	ldr	r3, [pc, #512]	; (800d198 <tcp_receive+0xf14>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f340 80bd 	ble.w	800d122 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	899b      	ldrh	r3, [r3, #12]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fa faad 	bl	8007510 <lwip_htons>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f040 80bf 	bne.w	800d142 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cfc4:	4875      	ldr	r0, [pc, #468]	; (800d19c <tcp_receive+0xf18>)
 800cfc6:	f7fd fa3d 	bl	800a444 <tcp_seg_copy>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 80b6 	beq.w	800d146 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfe2:	8912      	ldrh	r2, [r2, #8]
 800cfe4:	441a      	add	r2, r3
 800cfe6:	4b6c      	ldr	r3, [pc, #432]	; (800d198 <tcp_receive+0xf14>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	dd12      	ble.n	800d016 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cff0:	4b69      	ldr	r3, [pc, #420]	; (800d198 <tcp_receive+0xf14>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	b29a      	uxth	r2, r3
 800d002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d004:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	891b      	ldrh	r3, [r3, #8]
 800d00e:	4619      	mov	r1, r3
 800d010:	4610      	mov	r0, r2
 800d012:	f7fb fc1d 	bl	8008850 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d016:	4b62      	ldr	r3, [pc, #392]	; (800d1a0 <tcp_receive+0xf1c>)
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	461a      	mov	r2, r3
 800d01c:	4b5e      	ldr	r3, [pc, #376]	; (800d198 <tcp_receive+0xf14>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	441a      	add	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d02a:	440b      	add	r3, r1
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f340 8089 	ble.w	800d146 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	899b      	ldrh	r3, [r3, #12]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fa fa66 	bl	8007510 <lwip_htons>
 800d044:	4603      	mov	r3, r0
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d022      	beq.n	800d096 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	899b      	ldrh	r3, [r3, #12]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	b21b      	sxth	r3, r3
 800d05c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d060:	b21c      	sxth	r4, r3
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	899b      	ldrh	r3, [r3, #12]
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7fa fa4f 	bl	8007510 <lwip_htons>
 800d072:	4603      	mov	r3, r0
 800d074:	b2db      	uxtb	r3, r3
 800d076:	b29b      	uxth	r3, r3
 800d078:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fa fa46 	bl	8007510 <lwip_htons>
 800d084:	4603      	mov	r3, r0
 800d086:	b21b      	sxth	r3, r3
 800d088:	4323      	orrs	r3, r4
 800d08a:	b21a      	sxth	r2, r3
 800d08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	b292      	uxth	r2, r2
 800d094:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0a0:	4413      	add	r3, r2
 800d0a2:	b299      	uxth	r1, r3
 800d0a4:	4b3c      	ldr	r3, [pc, #240]	; (800d198 <tcp_receive+0xf14>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	1a8a      	subs	r2, r1, r2
 800d0b0:	b292      	uxth	r2, r2
 800d0b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	685a      	ldr	r2, [r3, #4]
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	891b      	ldrh	r3, [r3, #8]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4610      	mov	r0, r2
 800d0c4:	f7fb fbc4 	bl	8008850 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	891c      	ldrh	r4, [r3, #8]
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	899b      	ldrh	r3, [r3, #12]
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fa fa19 	bl	8007510 <lwip_htons>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	f003 0303 	and.w	r3, r3, #3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <tcp_receive+0xe6a>
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e000      	b.n	800d0f0 <tcp_receive+0xe6c>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	4423      	add	r3, r4
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	4b2a      	ldr	r3, [pc, #168]	; (800d1a0 <tcp_receive+0xf1c>)
 800d0f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d0f8:	4b29      	ldr	r3, [pc, #164]	; (800d1a0 <tcp_receive+0xf1c>)
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	4b26      	ldr	r3, [pc, #152]	; (800d198 <tcp_receive+0xf14>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	441a      	add	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	6879      	ldr	r1, [r7, #4]
 800d10a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d10c:	440b      	add	r3, r1
 800d10e:	429a      	cmp	r2, r3
 800d110:	d019      	beq.n	800d146 <tcp_receive+0xec2>
 800d112:	4b24      	ldr	r3, [pc, #144]	; (800d1a4 <tcp_receive+0xf20>)
 800d114:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d118:	4923      	ldr	r1, [pc, #140]	; (800d1a8 <tcp_receive+0xf24>)
 800d11a:	4824      	ldr	r0, [pc, #144]	; (800d1ac <tcp_receive+0xf28>)
 800d11c:	f007 f846 	bl	80141ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d120:	e011      	b.n	800d146 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	63bb      	str	r3, [r7, #56]	; 0x38
 800d128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f47f aea4 	bne.w	800ce78 <tcp_receive+0xbf4>
 800d130:	e00a      	b.n	800d148 <tcp_receive+0xec4>
                break;
 800d132:	bf00      	nop
 800d134:	e008      	b.n	800d148 <tcp_receive+0xec4>
                break;
 800d136:	bf00      	nop
 800d138:	e006      	b.n	800d148 <tcp_receive+0xec4>
                  break;
 800d13a:	bf00      	nop
 800d13c:	e004      	b.n	800d148 <tcp_receive+0xec4>
                  break;
 800d13e:	bf00      	nop
 800d140:	e002      	b.n	800d148 <tcp_receive+0xec4>
                  break;
 800d142:	bf00      	nop
 800d144:	e000      	b.n	800d148 <tcp_receive+0xec4>
                break;
 800d146:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f001 fe8b 	bl	800ee64 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d14e:	e003      	b.n	800d158 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f001 fe87 	bl	800ee64 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d156:	e01a      	b.n	800d18e <tcp_receive+0xf0a>
 800d158:	e019      	b.n	800d18e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d15a:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <tcp_receive+0xf14>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	db0a      	blt.n	800d17e <tcp_receive+0xefa>
 800d168:	4b0b      	ldr	r3, [pc, #44]	; (800d198 <tcp_receive+0xf14>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	6879      	ldr	r1, [r7, #4]
 800d172:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d174:	440b      	add	r3, r1
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	3301      	adds	r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	dd07      	ble.n	800d18e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	8b5b      	ldrh	r3, [r3, #26]
 800d182:	f043 0302 	orr.w	r3, r3, #2
 800d186:	b29a      	uxth	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d18c:	e7ff      	b.n	800d18e <tcp_receive+0xf0a>
 800d18e:	bf00      	nop
 800d190:	3750      	adds	r7, #80	; 0x50
 800d192:	46bd      	mov	sp, r7
 800d194:	bdb0      	pop	{r4, r5, r7, pc}
 800d196:	bf00      	nop
 800d198:	20000554 	.word	0x20000554
 800d19c:	20000534 	.word	0x20000534
 800d1a0:	2000055e 	.word	0x2000055e
 800d1a4:	08016c7c 	.word	0x08016c7c
 800d1a8:	08017024 	.word	0x08017024
 800d1ac:	08016cc8 	.word	0x08016cc8

0800d1b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d1b6:	4b15      	ldr	r3, [pc, #84]	; (800d20c <tcp_get_next_optbyte+0x5c>)
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	b291      	uxth	r1, r2
 800d1be:	4a13      	ldr	r2, [pc, #76]	; (800d20c <tcp_get_next_optbyte+0x5c>)
 800d1c0:	8011      	strh	r1, [r2, #0]
 800d1c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d1c4:	4b12      	ldr	r3, [pc, #72]	; (800d210 <tcp_get_next_optbyte+0x60>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d004      	beq.n	800d1d6 <tcp_get_next_optbyte+0x26>
 800d1cc:	4b11      	ldr	r3, [pc, #68]	; (800d214 <tcp_get_next_optbyte+0x64>)
 800d1ce:	881b      	ldrh	r3, [r3, #0]
 800d1d0:	88fa      	ldrh	r2, [r7, #6]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d208      	bcs.n	800d1e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d1d6:	4b10      	ldr	r3, [pc, #64]	; (800d218 <tcp_get_next_optbyte+0x68>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3314      	adds	r3, #20
 800d1dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d1de:	88fb      	ldrh	r3, [r7, #6]
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	e00b      	b.n	800d200 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d1e8:	88fb      	ldrh	r3, [r7, #6]
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	4b09      	ldr	r3, [pc, #36]	; (800d214 <tcp_get_next_optbyte+0x64>)
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d1f6:	4b06      	ldr	r3, [pc, #24]	; (800d210 <tcp_get_next_optbyte+0x60>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	797b      	ldrb	r3, [r7, #5]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	20000550 	.word	0x20000550
 800d210:	2000054c 	.word	0x2000054c
 800d214:	2000054a 	.word	0x2000054a
 800d218:	20000544 	.word	0x20000544

0800d21c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d106      	bne.n	800d238 <tcp_parseopt+0x1c>
 800d22a:	4b32      	ldr	r3, [pc, #200]	; (800d2f4 <tcp_parseopt+0xd8>)
 800d22c:	f240 727d 	movw	r2, #1917	; 0x77d
 800d230:	4931      	ldr	r1, [pc, #196]	; (800d2f8 <tcp_parseopt+0xdc>)
 800d232:	4832      	ldr	r0, [pc, #200]	; (800d2fc <tcp_parseopt+0xe0>)
 800d234:	f006 ffba 	bl	80141ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d238:	4b31      	ldr	r3, [pc, #196]	; (800d300 <tcp_parseopt+0xe4>)
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d055      	beq.n	800d2ec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d240:	4b30      	ldr	r3, [pc, #192]	; (800d304 <tcp_parseopt+0xe8>)
 800d242:	2200      	movs	r2, #0
 800d244:	801a      	strh	r2, [r3, #0]
 800d246:	e045      	b.n	800d2d4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d248:	f7ff ffb2 	bl	800d1b0 <tcp_get_next_optbyte>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	2b02      	cmp	r3, #2
 800d254:	d006      	beq.n	800d264 <tcp_parseopt+0x48>
 800d256:	2b02      	cmp	r3, #2
 800d258:	dc2b      	bgt.n	800d2b2 <tcp_parseopt+0x96>
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d041      	beq.n	800d2e2 <tcp_parseopt+0xc6>
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d127      	bne.n	800d2b2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d262:	e037      	b.n	800d2d4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d264:	f7ff ffa4 	bl	800d1b0 <tcp_get_next_optbyte>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	d13b      	bne.n	800d2e6 <tcp_parseopt+0xca>
 800d26e:	4b25      	ldr	r3, [pc, #148]	; (800d304 <tcp_parseopt+0xe8>)
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	3301      	adds	r3, #1
 800d274:	4a22      	ldr	r2, [pc, #136]	; (800d300 <tcp_parseopt+0xe4>)
 800d276:	8812      	ldrh	r2, [r2, #0]
 800d278:	4293      	cmp	r3, r2
 800d27a:	da34      	bge.n	800d2e6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d27c:	f7ff ff98 	bl	800d1b0 <tcp_get_next_optbyte>
 800d280:	4603      	mov	r3, r0
 800d282:	b29b      	uxth	r3, r3
 800d284:	021b      	lsls	r3, r3, #8
 800d286:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d288:	f7ff ff92 	bl	800d1b0 <tcp_get_next_optbyte>
 800d28c:	4603      	mov	r3, r0
 800d28e:	b29a      	uxth	r2, r3
 800d290:	89bb      	ldrh	r3, [r7, #12]
 800d292:	4313      	orrs	r3, r2
 800d294:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d296:	89bb      	ldrh	r3, [r7, #12]
 800d298:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d29c:	d804      	bhi.n	800d2a8 <tcp_parseopt+0x8c>
 800d29e:	89bb      	ldrh	r3, [r7, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <tcp_parseopt+0x8c>
 800d2a4:	89ba      	ldrh	r2, [r7, #12]
 800d2a6:	e001      	b.n	800d2ac <tcp_parseopt+0x90>
 800d2a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d2b0:	e010      	b.n	800d2d4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d2b2:	f7ff ff7d 	bl	800d1b0 <tcp_get_next_optbyte>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d2ba:	7afb      	ldrb	r3, [r7, #11]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d914      	bls.n	800d2ea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d2c0:	7afb      	ldrb	r3, [r7, #11]
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	4b0f      	ldr	r3, [pc, #60]	; (800d304 <tcp_parseopt+0xe8>)
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	3b02      	subs	r3, #2
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	4b0c      	ldr	r3, [pc, #48]	; (800d304 <tcp_parseopt+0xe8>)
 800d2d2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d2d4:	4b0b      	ldr	r3, [pc, #44]	; (800d304 <tcp_parseopt+0xe8>)
 800d2d6:	881a      	ldrh	r2, [r3, #0]
 800d2d8:	4b09      	ldr	r3, [pc, #36]	; (800d300 <tcp_parseopt+0xe4>)
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d3b3      	bcc.n	800d248 <tcp_parseopt+0x2c>
 800d2e0:	e004      	b.n	800d2ec <tcp_parseopt+0xd0>
          return;
 800d2e2:	bf00      	nop
 800d2e4:	e002      	b.n	800d2ec <tcp_parseopt+0xd0>
            return;
 800d2e6:	bf00      	nop
 800d2e8:	e000      	b.n	800d2ec <tcp_parseopt+0xd0>
            return;
 800d2ea:	bf00      	nop
      }
    }
  }
}
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	08016c7c 	.word	0x08016c7c
 800d2f8:	080170e0 	.word	0x080170e0
 800d2fc:	08016cc8 	.word	0x08016cc8
 800d300:	20000548 	.word	0x20000548
 800d304:	20000550 	.word	0x20000550

0800d308 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d308:	b480      	push	{r7}
 800d30a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d30c:	4b05      	ldr	r3, [pc, #20]	; (800d324 <tcp_trigger_input_pcb_close+0x1c>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	f043 0310 	orr.w	r3, r3, #16
 800d314:	b2da      	uxtb	r2, r3
 800d316:	4b03      	ldr	r3, [pc, #12]	; (800d324 <tcp_trigger_input_pcb_close+0x1c>)
 800d318:	701a      	strb	r2, [r3, #0]
}
 800d31a:	bf00      	nop
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	20000561 	.word	0x20000561

0800d328 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00a      	beq.n	800d350 <tcp_route+0x28>
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	7a1b      	ldrb	r3, [r3, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d006      	beq.n	800d350 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	7a1b      	ldrb	r3, [r3, #8]
 800d346:	4618      	mov	r0, r3
 800d348:	f7fb f8a8 	bl	800849c <netif_get_by_index>
 800d34c:	4603      	mov	r3, r0
 800d34e:	e003      	b.n	800d358 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f005 fc33 	bl	8012bbc <ip4_route>
 800d356:	4603      	mov	r3, r0
  }
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	603b      	str	r3, [r7, #0]
 800d36c:	4613      	mov	r3, r2
 800d36e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d105      	bne.n	800d382 <tcp_create_segment+0x22>
 800d376:	4b44      	ldr	r3, [pc, #272]	; (800d488 <tcp_create_segment+0x128>)
 800d378:	22a3      	movs	r2, #163	; 0xa3
 800d37a:	4944      	ldr	r1, [pc, #272]	; (800d48c <tcp_create_segment+0x12c>)
 800d37c:	4844      	ldr	r0, [pc, #272]	; (800d490 <tcp_create_segment+0x130>)
 800d37e:	f006 ff15 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d105      	bne.n	800d394 <tcp_create_segment+0x34>
 800d388:	4b3f      	ldr	r3, [pc, #252]	; (800d488 <tcp_create_segment+0x128>)
 800d38a:	22a4      	movs	r2, #164	; 0xa4
 800d38c:	4941      	ldr	r1, [pc, #260]	; (800d494 <tcp_create_segment+0x134>)
 800d38e:	4840      	ldr	r0, [pc, #256]	; (800d490 <tcp_create_segment+0x130>)
 800d390:	f006 ff0c 	bl	80141ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d394:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	f003 0304 	and.w	r3, r3, #4
 800d3a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d3a2:	2003      	movs	r0, #3
 800d3a4:	f7fa fd74 	bl	8007e90 <memp_malloc>
 800d3a8:	6138      	str	r0, [r7, #16]
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d104      	bne.n	800d3ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d3b0:	68b8      	ldr	r0, [r7, #8]
 800d3b2:	f7fb fbd3 	bl	8008b5c <pbuf_free>
    return NULL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	e061      	b.n	800d47e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d3c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	891a      	ldrh	r2, [r3, #8]
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d205      	bcs.n	800d3e6 <tcp_create_segment+0x86>
 800d3da:	4b2b      	ldr	r3, [pc, #172]	; (800d488 <tcp_create_segment+0x128>)
 800d3dc:	22b0      	movs	r2, #176	; 0xb0
 800d3de:	492e      	ldr	r1, [pc, #184]	; (800d498 <tcp_create_segment+0x138>)
 800d3e0:	482b      	ldr	r0, [pc, #172]	; (800d490 <tcp_create_segment+0x130>)
 800d3e2:	f006 fee3 	bl	80141ac <iprintf>
  seg->len = p->tot_len - optlen;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	891a      	ldrh	r2, [r3, #8]
 800d3ea:	7dfb      	ldrb	r3, [r7, #23]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d3f6:	2114      	movs	r1, #20
 800d3f8:	68b8      	ldr	r0, [r7, #8]
 800d3fa:	f7fb fb19 	bl	8008a30 <pbuf_add_header>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d004      	beq.n	800d40e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d404:	6938      	ldr	r0, [r7, #16]
 800d406:	f7fc ffe6 	bl	800a3d6 <tcp_seg_free>
    return NULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	e037      	b.n	800d47e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	685a      	ldr	r2, [r3, #4]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	8ada      	ldrh	r2, [r3, #22]
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	68dc      	ldr	r4, [r3, #12]
 800d420:	4610      	mov	r0, r2
 800d422:	f7fa f875 	bl	8007510 <lwip_htons>
 800d426:	4603      	mov	r3, r0
 800d428:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	8b1a      	ldrh	r2, [r3, #24]
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	68dc      	ldr	r4, [r3, #12]
 800d432:	4610      	mov	r0, r2
 800d434:	f7fa f86c 	bl	8007510 <lwip_htons>
 800d438:	4603      	mov	r3, r0
 800d43a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	68dc      	ldr	r4, [r3, #12]
 800d440:	6838      	ldr	r0, [r7, #0]
 800d442:	f7fa f87a 	bl	800753a <lwip_htonl>
 800d446:	4603      	mov	r3, r0
 800d448:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	089b      	lsrs	r3, r3, #2
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	b29b      	uxth	r3, r3
 800d452:	3305      	adds	r3, #5
 800d454:	b29b      	uxth	r3, r3
 800d456:	031b      	lsls	r3, r3, #12
 800d458:	b29a      	uxth	r2, r3
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	4313      	orrs	r3, r2
 800d460:	b29a      	uxth	r2, r3
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	68dc      	ldr	r4, [r3, #12]
 800d466:	4610      	mov	r0, r2
 800d468:	f7fa f852 	bl	8007510 <lwip_htons>
 800d46c:	4603      	mov	r3, r0
 800d46e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	749a      	strb	r2, [r3, #18]
 800d478:	2200      	movs	r2, #0
 800d47a:	74da      	strb	r2, [r3, #19]
  return seg;
 800d47c:	693b      	ldr	r3, [r7, #16]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	371c      	adds	r7, #28
 800d482:	46bd      	mov	sp, r7
 800d484:	bd90      	pop	{r4, r7, pc}
 800d486:	bf00      	nop
 800d488:	080170fc 	.word	0x080170fc
 800d48c:	08017130 	.word	0x08017130
 800d490:	08017150 	.word	0x08017150
 800d494:	08017178 	.word	0x08017178
 800d498:	0801719c 	.word	0x0801719c

0800d49c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	607b      	str	r3, [r7, #4]
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73fb      	strb	r3, [r7, #15]
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	81bb      	strh	r3, [r7, #12]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d4b0:	89bb      	ldrh	r3, [r7, #12]
 800d4b2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d105      	bne.n	800d4c6 <tcp_pbuf_prealloc+0x2a>
 800d4ba:	4b30      	ldr	r3, [pc, #192]	; (800d57c <tcp_pbuf_prealloc+0xe0>)
 800d4bc:	22e8      	movs	r2, #232	; 0xe8
 800d4be:	4930      	ldr	r1, [pc, #192]	; (800d580 <tcp_pbuf_prealloc+0xe4>)
 800d4c0:	4830      	ldr	r0, [pc, #192]	; (800d584 <tcp_pbuf_prealloc+0xe8>)
 800d4c2:	f006 fe73 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d105      	bne.n	800d4d8 <tcp_pbuf_prealloc+0x3c>
 800d4cc:	4b2b      	ldr	r3, [pc, #172]	; (800d57c <tcp_pbuf_prealloc+0xe0>)
 800d4ce:	22e9      	movs	r2, #233	; 0xe9
 800d4d0:	492d      	ldr	r1, [pc, #180]	; (800d588 <tcp_pbuf_prealloc+0xec>)
 800d4d2:	482c      	ldr	r0, [pc, #176]	; (800d584 <tcp_pbuf_prealloc+0xe8>)
 800d4d4:	f006 fe6a 	bl	80141ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d4d8:	89ba      	ldrh	r2, [r7, #12]
 800d4da:	897b      	ldrh	r3, [r7, #10]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d221      	bcs.n	800d524 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d4e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4e4:	f003 0302 	and.w	r3, r3, #2
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d111      	bne.n	800d510 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	8b5b      	ldrh	r3, [r3, #26]
 800d4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d115      	bne.n	800d524 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d4f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d007      	beq.n	800d510 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d500:	6a3b      	ldr	r3, [r7, #32]
 800d502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800d504:	2b00      	cmp	r3, #0
 800d506:	d103      	bne.n	800d510 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d508:	6a3b      	ldr	r3, [r7, #32]
 800d50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d009      	beq.n	800d524 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d510:	89bb      	ldrh	r3, [r7, #12]
 800d512:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d516:	f023 0203 	bic.w	r2, r3, #3
 800d51a:	897b      	ldrh	r3, [r7, #10]
 800d51c:	4293      	cmp	r3, r2
 800d51e:	bf28      	it	cs
 800d520:	4613      	movcs	r3, r2
 800d522:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d524:	8af9      	ldrh	r1, [r7, #22]
 800d526:	7bfb      	ldrb	r3, [r7, #15]
 800d528:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fb f831 	bl	8008594 <pbuf_alloc>
 800d532:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d101      	bne.n	800d53e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e019      	b.n	800d572 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d006      	beq.n	800d554 <tcp_pbuf_prealloc+0xb8>
 800d546:	4b0d      	ldr	r3, [pc, #52]	; (800d57c <tcp_pbuf_prealloc+0xe0>)
 800d548:	f240 120b 	movw	r2, #267	; 0x10b
 800d54c:	490f      	ldr	r1, [pc, #60]	; (800d58c <tcp_pbuf_prealloc+0xf0>)
 800d54e:	480d      	ldr	r0, [pc, #52]	; (800d584 <tcp_pbuf_prealloc+0xe8>)
 800d550:	f006 fe2c 	bl	80141ac <iprintf>
  *oversize = p->len - length;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	895a      	ldrh	r2, [r3, #10]
 800d558:	89bb      	ldrh	r3, [r7, #12]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	89ba      	ldrh	r2, [r7, #12]
 800d566:	811a      	strh	r2, [r3, #8]
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	891a      	ldrh	r2, [r3, #8]
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	815a      	strh	r2, [r3, #10]
  return p;
 800d570:	693b      	ldr	r3, [r7, #16]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3718      	adds	r7, #24
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	080170fc 	.word	0x080170fc
 800d580:	080171b4 	.word	0x080171b4
 800d584:	08017150 	.word	0x08017150
 800d588:	080171d8 	.word	0x080171d8
 800d58c:	080171f8 	.word	0x080171f8

0800d590 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	460b      	mov	r3, r1
 800d59a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d106      	bne.n	800d5b0 <tcp_write_checks+0x20>
 800d5a2:	4b33      	ldr	r3, [pc, #204]	; (800d670 <tcp_write_checks+0xe0>)
 800d5a4:	f240 1233 	movw	r2, #307	; 0x133
 800d5a8:	4932      	ldr	r1, [pc, #200]	; (800d674 <tcp_write_checks+0xe4>)
 800d5aa:	4833      	ldr	r0, [pc, #204]	; (800d678 <tcp_write_checks+0xe8>)
 800d5ac:	f006 fdfe 	bl	80141ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	7d1b      	ldrb	r3, [r3, #20]
 800d5b4:	2b04      	cmp	r3, #4
 800d5b6:	d00e      	beq.n	800d5d6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d5bc:	2b07      	cmp	r3, #7
 800d5be:	d00a      	beq.n	800d5d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d006      	beq.n	800d5d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d002      	beq.n	800d5d6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d5d0:	f06f 030a 	mvn.w	r3, #10
 800d5d4:	e048      	b.n	800d668 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d5d6:	887b      	ldrh	r3, [r7, #2]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d101      	bne.n	800d5e0 <tcp_write_checks+0x50>
    return ERR_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e043      	b.n	800d668 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d5e6:	887a      	ldrh	r2, [r7, #2]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d909      	bls.n	800d600 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	8b5b      	ldrh	r3, [r3, #26]
 800d5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d5fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5fe:	e033      	b.n	800d668 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d606:	2b08      	cmp	r3, #8
 800d608:	d909      	bls.n	800d61e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	8b5b      	ldrh	r3, [r3, #26]
 800d60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d612:	b29a      	uxth	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d61c:	e024      	b.n	800d668 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00f      	beq.n	800d648 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d11a      	bne.n	800d666 <tcp_write_checks+0xd6>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d116      	bne.n	800d666 <tcp_write_checks+0xd6>
 800d638:	4b0d      	ldr	r3, [pc, #52]	; (800d670 <tcp_write_checks+0xe0>)
 800d63a:	f240 1255 	movw	r2, #341	; 0x155
 800d63e:	490f      	ldr	r1, [pc, #60]	; (800d67c <tcp_write_checks+0xec>)
 800d640:	480d      	ldr	r0, [pc, #52]	; (800d678 <tcp_write_checks+0xe8>)
 800d642:	f006 fdb3 	bl	80141ac <iprintf>
 800d646:	e00e      	b.n	800d666 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d103      	bne.n	800d658 <tcp_write_checks+0xc8>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d654:	2b00      	cmp	r3, #0
 800d656:	d006      	beq.n	800d666 <tcp_write_checks+0xd6>
 800d658:	4b05      	ldr	r3, [pc, #20]	; (800d670 <tcp_write_checks+0xe0>)
 800d65a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800d65e:	4908      	ldr	r1, [pc, #32]	; (800d680 <tcp_write_checks+0xf0>)
 800d660:	4805      	ldr	r0, [pc, #20]	; (800d678 <tcp_write_checks+0xe8>)
 800d662:	f006 fda3 	bl	80141ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	080170fc 	.word	0x080170fc
 800d674:	0801720c 	.word	0x0801720c
 800d678:	08017150 	.word	0x08017150
 800d67c:	0801722c 	.word	0x0801722c
 800d680:	08017268 	.word	0x08017268

0800d684 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b09b      	sub	sp, #108	; 0x6c
 800d688:	af04      	add	r7, sp, #16
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	4611      	mov	r1, r2
 800d690:	461a      	mov	r2, r3
 800d692:	460b      	mov	r3, r1
 800d694:	80fb      	strh	r3, [r7, #6]
 800d696:	4613      	mov	r3, r2
 800d698:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	653b      	str	r3, [r7, #80]	; 0x50
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d109      	bne.n	800d6e0 <tcp_write+0x5c>
 800d6cc:	4ba4      	ldr	r3, [pc, #656]	; (800d960 <tcp_write+0x2dc>)
 800d6ce:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d6d2:	49a4      	ldr	r1, [pc, #656]	; (800d964 <tcp_write+0x2e0>)
 800d6d4:	48a4      	ldr	r0, [pc, #656]	; (800d968 <tcp_write+0x2e4>)
 800d6d6:	f006 fd69 	bl	80141ac <iprintf>
 800d6da:	f06f 030f 	mvn.w	r3, #15
 800d6de:	e32a      	b.n	800dd36 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6e6:	085b      	lsrs	r3, r3, #1
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	bf28      	it	cs
 800d6f2:	4613      	movcs	r3, r2
 800d6f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d6f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d102      	bne.n	800d702 <tcp_write+0x7e>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d700:	e000      	b.n	800d704 <tcp_write+0x80>
 800d702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d704:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d109      	bne.n	800d720 <tcp_write+0x9c>
 800d70c:	4b94      	ldr	r3, [pc, #592]	; (800d960 <tcp_write+0x2dc>)
 800d70e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800d712:	4996      	ldr	r1, [pc, #600]	; (800d96c <tcp_write+0x2e8>)
 800d714:	4894      	ldr	r0, [pc, #592]	; (800d968 <tcp_write+0x2e4>)
 800d716:	f006 fd49 	bl	80141ac <iprintf>
 800d71a:	f06f 030f 	mvn.w	r3, #15
 800d71e:	e30a      	b.n	800dd36 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d720:	88fb      	ldrh	r3, [r7, #6]
 800d722:	4619      	mov	r1, r3
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7ff ff33 	bl	800d590 <tcp_write_checks>
 800d72a:	4603      	mov	r3, r0
 800d72c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d730:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <tcp_write+0xba>
    return err;
 800d738:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d73c:	e2fb      	b.n	800dd36 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d744:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d748:	2300      	movs	r3, #0
 800d74a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 80f6 	beq.w	800d944 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d75c:	653b      	str	r3, [r7, #80]	; 0x50
 800d75e:	e002      	b.n	800d766 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1f8      	bne.n	800d760 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d770:	7a9b      	ldrb	r3, [r3, #10]
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	b29b      	uxth	r3, r3
 800d776:	f003 0304 	and.w	r3, r3, #4
 800d77a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d77c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d780:	891b      	ldrh	r3, [r3, #8]
 800d782:	4619      	mov	r1, r3
 800d784:	8c3b      	ldrh	r3, [r7, #32]
 800d786:	440b      	add	r3, r1
 800d788:	429a      	cmp	r2, r3
 800d78a:	da06      	bge.n	800d79a <tcp_write+0x116>
 800d78c:	4b74      	ldr	r3, [pc, #464]	; (800d960 <tcp_write+0x2dc>)
 800d78e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d792:	4977      	ldr	r1, [pc, #476]	; (800d970 <tcp_write+0x2ec>)
 800d794:	4874      	ldr	r0, [pc, #464]	; (800d968 <tcp_write+0x2e4>)
 800d796:	f006 fd09 	bl	80141ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d79c:	891a      	ldrh	r2, [r3, #8]
 800d79e:	8c3b      	ldrh	r3, [r7, #32]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d7b0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d7b2:	8a7b      	ldrh	r3, [r7, #18]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d026      	beq.n	800d806 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d7b8:	8a7b      	ldrh	r3, [r7, #18]
 800d7ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d206      	bcs.n	800d7ce <tcp_write+0x14a>
 800d7c0:	4b67      	ldr	r3, [pc, #412]	; (800d960 <tcp_write+0x2dc>)
 800d7c2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800d7c6:	496b      	ldr	r1, [pc, #428]	; (800d974 <tcp_write+0x2f0>)
 800d7c8:	4867      	ldr	r0, [pc, #412]	; (800d968 <tcp_write+0x2e4>)
 800d7ca:	f006 fcef 	bl	80141ac <iprintf>
      seg = last_unsent;
 800d7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d7d2:	8a7b      	ldrh	r3, [r7, #18]
 800d7d4:	88fa      	ldrh	r2, [r7, #6]
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	bf28      	it	cs
 800d7da:	4613      	movcs	r3, r2
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	bf28      	it	cs
 800d7e4:	4613      	movcs	r3, r2
 800d7e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d7e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d7ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d7f4:	8a7a      	ldrh	r2, [r7, #18]
 800d7f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d7fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d800:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d802:	1ad3      	subs	r3, r2, r3
 800d804:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d806:	8a7b      	ldrh	r3, [r7, #18]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00b      	beq.n	800d824 <tcp_write+0x1a0>
 800d80c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d810:	88fb      	ldrh	r3, [r7, #6]
 800d812:	429a      	cmp	r2, r3
 800d814:	d006      	beq.n	800d824 <tcp_write+0x1a0>
 800d816:	4b52      	ldr	r3, [pc, #328]	; (800d960 <tcp_write+0x2dc>)
 800d818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d81c:	4956      	ldr	r1, [pc, #344]	; (800d978 <tcp_write+0x2f4>)
 800d81e:	4852      	ldr	r0, [pc, #328]	; (800d968 <tcp_write+0x2e4>)
 800d820:	f006 fcc4 	bl	80141ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d824:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d828:	88fb      	ldrh	r3, [r7, #6]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	f080 8167 	bcs.w	800dafe <tcp_write+0x47a>
 800d830:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 8163 	beq.w	800dafe <tcp_write+0x47a>
 800d838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d83a:	891b      	ldrh	r3, [r3, #8]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f000 815e 	beq.w	800dafe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d842:	88fa      	ldrh	r2, [r7, #6]
 800d844:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d848:	1ad2      	subs	r2, r2, r3
 800d84a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d84c:	4293      	cmp	r3, r2
 800d84e:	bfa8      	it	ge
 800d850:	4613      	movge	r3, r2
 800d852:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d856:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d858:	797b      	ldrb	r3, [r7, #5]
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d027      	beq.n	800d8b2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d862:	f107 0012 	add.w	r0, r7, #18
 800d866:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d868:	8bf9      	ldrh	r1, [r7, #30]
 800d86a:	2301      	movs	r3, #1
 800d86c:	9302      	str	r3, [sp, #8]
 800d86e:	797b      	ldrb	r3, [r7, #5]
 800d870:	9301      	str	r3, [sp, #4]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	4603      	mov	r3, r0
 800d878:	2000      	movs	r0, #0
 800d87a:	f7ff fe0f 	bl	800d49c <tcp_pbuf_prealloc>
 800d87e:	6578      	str	r0, [r7, #84]	; 0x54
 800d880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 8225 	beq.w	800dcd2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d88a:	6858      	ldr	r0, [r3, #4]
 800d88c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	4413      	add	r3, r2
 800d894:	8bfa      	ldrh	r2, [r7, #30]
 800d896:	4619      	mov	r1, r3
 800d898:	f006 fc58 	bl	801414c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d89c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d89e:	f7fb f9e5 	bl	8008c6c <pbuf_clen>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d8b0:	e041      	b.n	800d936 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d8b8:	e002      	b.n	800d8c0 <tcp_write+0x23c>
 800d8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	637b      	str	r3, [r7, #52]	; 0x34
 800d8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1f8      	bne.n	800d8ba <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ca:	7b1b      	ldrb	r3, [r3, #12]
 800d8cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d115      	bne.n	800d900 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8da:	8952      	ldrh	r2, [r2, #10]
 800d8dc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d10d      	bne.n	800d900 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d8e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d006      	beq.n	800d8fa <tcp_write+0x276>
 800d8ec:	4b1c      	ldr	r3, [pc, #112]	; (800d960 <tcp_write+0x2dc>)
 800d8ee:	f240 2231 	movw	r2, #561	; 0x231
 800d8f2:	4922      	ldr	r1, [pc, #136]	; (800d97c <tcp_write+0x2f8>)
 800d8f4:	481c      	ldr	r0, [pc, #112]	; (800d968 <tcp_write+0x2e4>)
 800d8f6:	f006 fc59 	bl	80141ac <iprintf>
          extendlen = seglen;
 800d8fa:	8bfb      	ldrh	r3, [r7, #30]
 800d8fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d8fe:	e01a      	b.n	800d936 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d900:	8bfb      	ldrh	r3, [r7, #30]
 800d902:	2201      	movs	r2, #1
 800d904:	4619      	mov	r1, r3
 800d906:	2000      	movs	r0, #0
 800d908:	f7fa fe44 	bl	8008594 <pbuf_alloc>
 800d90c:	6578      	str	r0, [r7, #84]	; 0x54
 800d90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 81e0 	beq.w	800dcd6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d916:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	441a      	add	r2, r3
 800d91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d920:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d922:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d924:	f7fb f9a2 	bl	8008c6c <pbuf_clen>
 800d928:	4603      	mov	r3, r0
 800d92a:	461a      	mov	r2, r3
 800d92c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d930:	4413      	add	r3, r2
 800d932:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d936:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d93a:	8bfb      	ldrh	r3, [r7, #30]
 800d93c:	4413      	add	r3, r2
 800d93e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d942:	e0dc      	b.n	800dafe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	f000 80d7 	beq.w	800dafe <tcp_write+0x47a>
 800d950:	4b03      	ldr	r3, [pc, #12]	; (800d960 <tcp_write+0x2dc>)
 800d952:	f240 224a 	movw	r2, #586	; 0x24a
 800d956:	490a      	ldr	r1, [pc, #40]	; (800d980 <tcp_write+0x2fc>)
 800d958:	4803      	ldr	r0, [pc, #12]	; (800d968 <tcp_write+0x2e4>)
 800d95a:	f006 fc27 	bl	80141ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d95e:	e0ce      	b.n	800dafe <tcp_write+0x47a>
 800d960:	080170fc 	.word	0x080170fc
 800d964:	0801729c 	.word	0x0801729c
 800d968:	08017150 	.word	0x08017150
 800d96c:	080172b4 	.word	0x080172b4
 800d970:	080172e8 	.word	0x080172e8
 800d974:	08017300 	.word	0x08017300
 800d978:	08017320 	.word	0x08017320
 800d97c:	08017340 	.word	0x08017340
 800d980:	0801736c 	.word	0x0801736c
    struct pbuf *p;
    u16_t left = len - pos;
 800d984:	88fa      	ldrh	r2, [r7, #6]
 800d986:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d98e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d992:	b29b      	uxth	r3, r3
 800d994:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d99a:	8b7a      	ldrh	r2, [r7, #26]
 800d99c:	8bbb      	ldrh	r3, [r7, #28]
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	bf28      	it	cs
 800d9a2:	4613      	movcs	r3, r2
 800d9a4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d9a6:	797b      	ldrb	r3, [r7, #5]
 800d9a8:	f003 0301 	and.w	r3, r3, #1
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d036      	beq.n	800da1e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d9b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	8b3b      	ldrh	r3, [r7, #24]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	b299      	uxth	r1, r3
 800d9bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bf0c      	ite	eq
 800d9c2:	2301      	moveq	r3, #1
 800d9c4:	2300      	movne	r3, #0
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	f107 0012 	add.w	r0, r7, #18
 800d9cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9ce:	9302      	str	r3, [sp, #8]
 800d9d0:	797b      	ldrb	r3, [r7, #5]
 800d9d2:	9301      	str	r3, [sp, #4]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2036      	movs	r0, #54	; 0x36
 800d9dc:	f7ff fd5e 	bl	800d49c <tcp_pbuf_prealloc>
 800d9e0:	6338      	str	r0, [r7, #48]	; 0x30
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 8178 	beq.w	800dcda <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	895b      	ldrh	r3, [r3, #10]
 800d9ee:	8b3a      	ldrh	r2, [r7, #24]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d906      	bls.n	800da02 <tcp_write+0x37e>
 800d9f4:	4b8c      	ldr	r3, [pc, #560]	; (800dc28 <tcp_write+0x5a4>)
 800d9f6:	f240 2266 	movw	r2, #614	; 0x266
 800d9fa:	498c      	ldr	r1, [pc, #560]	; (800dc2c <tcp_write+0x5a8>)
 800d9fc:	488c      	ldr	r0, [pc, #560]	; (800dc30 <tcp_write+0x5ac>)
 800d9fe:	f006 fbd5 	bl	80141ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800da02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da04:	685a      	ldr	r2, [r3, #4]
 800da06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da0a:	18d0      	adds	r0, r2, r3
 800da0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	4413      	add	r3, r2
 800da14:	8b3a      	ldrh	r2, [r7, #24]
 800da16:	4619      	mov	r1, r3
 800da18:	f006 fb98 	bl	801414c <memcpy>
 800da1c:	e02f      	b.n	800da7e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800da1e:	8a7b      	ldrh	r3, [r7, #18]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d006      	beq.n	800da32 <tcp_write+0x3ae>
 800da24:	4b80      	ldr	r3, [pc, #512]	; (800dc28 <tcp_write+0x5a4>)
 800da26:	f240 2271 	movw	r2, #625	; 0x271
 800da2a:	4982      	ldr	r1, [pc, #520]	; (800dc34 <tcp_write+0x5b0>)
 800da2c:	4880      	ldr	r0, [pc, #512]	; (800dc30 <tcp_write+0x5ac>)
 800da2e:	f006 fbbd 	bl	80141ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800da32:	8b3b      	ldrh	r3, [r7, #24]
 800da34:	2201      	movs	r2, #1
 800da36:	4619      	mov	r1, r3
 800da38:	2036      	movs	r0, #54	; 0x36
 800da3a:	f7fa fdab 	bl	8008594 <pbuf_alloc>
 800da3e:	6178      	str	r0, [r7, #20]
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	f000 814b 	beq.w	800dcde <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800da48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da4c:	68ba      	ldr	r2, [r7, #8]
 800da4e:	441a      	add	r2, r3
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800da54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da58:	b29b      	uxth	r3, r3
 800da5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da5e:	4619      	mov	r1, r3
 800da60:	2036      	movs	r0, #54	; 0x36
 800da62:	f7fa fd97 	bl	8008594 <pbuf_alloc>
 800da66:	6338      	str	r0, [r7, #48]	; 0x30
 800da68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800da6e:	6978      	ldr	r0, [r7, #20]
 800da70:	f7fb f874 	bl	8008b5c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800da74:	e136      	b.n	800dce4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800da76:	6979      	ldr	r1, [r7, #20]
 800da78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da7a:	f7fb f931 	bl	8008ce0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800da7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da80:	f7fb f8f4 	bl	8008c6c <pbuf_clen>
 800da84:	4603      	mov	r3, r0
 800da86:	461a      	mov	r2, r3
 800da88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da8c:	4413      	add	r3, r2
 800da8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800da92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da96:	2b09      	cmp	r3, #9
 800da98:	d903      	bls.n	800daa2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800da9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da9c:	f7fb f85e 	bl	8008b5c <pbuf_free>
      goto memerr;
 800daa0:	e120      	b.n	800dce4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800daa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800daaa:	441a      	add	r2, r3
 800daac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	4613      	mov	r3, r2
 800dab4:	2200      	movs	r2, #0
 800dab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f7ff fc51 	bl	800d360 <tcp_create_segment>
 800dabe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f000 810d 	beq.w	800dce2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800dac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <tcp_write+0x450>
      queue = seg;
 800dace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad0:	647b      	str	r3, [r7, #68]	; 0x44
 800dad2:	e00c      	b.n	800daee <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d106      	bne.n	800dae8 <tcp_write+0x464>
 800dada:	4b53      	ldr	r3, [pc, #332]	; (800dc28 <tcp_write+0x5a4>)
 800dadc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dae0:	4955      	ldr	r1, [pc, #340]	; (800dc38 <tcp_write+0x5b4>)
 800dae2:	4853      	ldr	r0, [pc, #332]	; (800dc30 <tcp_write+0x5ac>)
 800dae4:	f006 fb62 	bl	80141ac <iprintf>
      prev_seg->next = seg;
 800dae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800daec:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800daee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800daf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800daf6:	8b3b      	ldrh	r3, [r7, #24]
 800daf8:	4413      	add	r3, r2
 800dafa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800dafe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800db02:	88fb      	ldrh	r3, [r7, #6]
 800db04:	429a      	cmp	r2, r3
 800db06:	f4ff af3d 	bcc.w	800d984 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800db0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d02c      	beq.n	800db6a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800db10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db16:	e01e      	b.n	800db56 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	891a      	ldrh	r2, [r3, #8]
 800db1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db1e:	4413      	add	r3, r2
 800db20:	b29a      	uxth	r2, r3
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800db26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d110      	bne.n	800db50 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db34:	8952      	ldrh	r2, [r2, #10]
 800db36:	4413      	add	r3, r2
 800db38:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800db3a:	68b9      	ldr	r1, [r7, #8]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f006 fb05 	bl	801414c <memcpy>
        p->len += oversize_used;
 800db42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db44:	895a      	ldrh	r2, [r3, #10]
 800db46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db48:	4413      	add	r3, r2
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1dd      	bne.n	800db18 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800db5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db5e:	891a      	ldrh	r2, [r3, #8]
 800db60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db62:	4413      	add	r3, r2
 800db64:	b29a      	uxth	r2, r3
 800db66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db68:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800db6a:	8a7a      	ldrh	r2, [r7, #18]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800db72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db74:	2b00      	cmp	r3, #0
 800db76:	d018      	beq.n	800dbaa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800db78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d106      	bne.n	800db8c <tcp_write+0x508>
 800db7e:	4b2a      	ldr	r3, [pc, #168]	; (800dc28 <tcp_write+0x5a4>)
 800db80:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800db84:	492d      	ldr	r1, [pc, #180]	; (800dc3c <tcp_write+0x5b8>)
 800db86:	482a      	ldr	r0, [pc, #168]	; (800dc30 <tcp_write+0x5ac>)
 800db88:	f006 fb10 	bl	80141ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800db8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db92:	4618      	mov	r0, r3
 800db94:	f7fb f8a4 	bl	8008ce0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800db98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db9a:	891a      	ldrh	r2, [r3, #8]
 800db9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db9e:	891b      	ldrh	r3, [r3, #8]
 800dba0:	4413      	add	r3, r2
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba6:	811a      	strh	r2, [r3, #8]
 800dba8:	e037      	b.n	800dc1a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800dbaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d034      	beq.n	800dc1a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d003      	beq.n	800dbbe <tcp_write+0x53a>
 800dbb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <tcp_write+0x548>
 800dbbe:	4b1a      	ldr	r3, [pc, #104]	; (800dc28 <tcp_write+0x5a4>)
 800dbc0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800dbc4:	491e      	ldr	r1, [pc, #120]	; (800dc40 <tcp_write+0x5bc>)
 800dbc6:	481a      	ldr	r0, [pc, #104]	; (800dc30 <tcp_write+0x5ac>)
 800dbc8:	f006 faf0 	bl	80141ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbd2:	e009      	b.n	800dbe8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	891a      	ldrh	r2, [r3, #8]
 800dbd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbda:	4413      	add	r3, r2
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d1f1      	bne.n	800dbd4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	891a      	ldrh	r2, [r3, #8]
 800dbf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbf6:	4413      	add	r3, r2
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	895a      	ldrh	r2, [r3, #10]
 800dc02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc04:	4413      	add	r3, r2
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800dc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc0e:	891a      	ldrh	r2, [r3, #8]
 800dc10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc12:	4413      	add	r3, r2
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc18:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800dc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d111      	bne.n	800dc44 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc24:	66da      	str	r2, [r3, #108]	; 0x6c
 800dc26:	e010      	b.n	800dc4a <tcp_write+0x5c6>
 800dc28:	080170fc 	.word	0x080170fc
 800dc2c:	0801739c 	.word	0x0801739c
 800dc30:	08017150 	.word	0x08017150
 800dc34:	080173dc 	.word	0x080173dc
 800dc38:	080173ec 	.word	0x080173ec
 800dc3c:	08017400 	.word	0x08017400
 800dc40:	08017438 	.word	0x08017438
  } else {
    last_unsent->next = queue;
 800dc44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc48:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc4e:	88fb      	ldrh	r3, [r7, #6]
 800dc50:	441a      	add	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dc5c:	88fb      	ldrh	r3, [r7, #6]
 800dc5e:	1ad3      	subs	r3, r2, r3
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dc6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00e      	beq.n	800dc9a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d10a      	bne.n	800dc9a <tcp_write+0x616>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d106      	bne.n	800dc9a <tcp_write+0x616>
 800dc8c:	4b2c      	ldr	r3, [pc, #176]	; (800dd40 <tcp_write+0x6bc>)
 800dc8e:	f240 3212 	movw	r2, #786	; 0x312
 800dc92:	492c      	ldr	r1, [pc, #176]	; (800dd44 <tcp_write+0x6c0>)
 800dc94:	482c      	ldr	r0, [pc, #176]	; (800dd48 <tcp_write+0x6c4>)
 800dc96:	f006 fa89 	bl	80141ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800dc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d016      	beq.n	800dcce <tcp_write+0x64a>
 800dca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d012      	beq.n	800dcce <tcp_write+0x64a>
 800dca8:	797b      	ldrb	r3, [r7, #5]
 800dcaa:	f003 0302 	and.w	r3, r3, #2
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10d      	bne.n	800dcce <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dcb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	899b      	ldrh	r3, [r3, #12]
 800dcb8:	b29c      	uxth	r4, r3
 800dcba:	2008      	movs	r0, #8
 800dcbc:	f7f9 fc28 	bl	8007510 <lwip_htons>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	4322      	orrs	r2, r4
 800dcca:	b292      	uxth	r2, r2
 800dccc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e031      	b.n	800dd36 <tcp_write+0x6b2>
          goto memerr;
 800dcd2:	bf00      	nop
 800dcd4:	e006      	b.n	800dce4 <tcp_write+0x660>
            goto memerr;
 800dcd6:	bf00      	nop
 800dcd8:	e004      	b.n	800dce4 <tcp_write+0x660>
        goto memerr;
 800dcda:	bf00      	nop
 800dcdc:	e002      	b.n	800dce4 <tcp_write+0x660>
        goto memerr;
 800dcde:	bf00      	nop
 800dce0:	e000      	b.n	800dce4 <tcp_write+0x660>
      goto memerr;
 800dce2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	8b5b      	ldrh	r3, [r3, #26]
 800dce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800dcf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <tcp_write+0x67a>
    pbuf_free(concat_p);
 800dcf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dcfa:	f7fa ff2f 	bl	8008b5c <pbuf_free>
  }
  if (queue != NULL) {
 800dcfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d002      	beq.n	800dd0a <tcp_write+0x686>
    tcp_segs_free(queue);
 800dd04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dd06:	f7fc fb51 	bl	800a3ac <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00e      	beq.n	800dd32 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10a      	bne.n	800dd32 <tcp_write+0x6ae>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d106      	bne.n	800dd32 <tcp_write+0x6ae>
 800dd24:	4b06      	ldr	r3, [pc, #24]	; (800dd40 <tcp_write+0x6bc>)
 800dd26:	f240 3227 	movw	r2, #807	; 0x327
 800dd2a:	4906      	ldr	r1, [pc, #24]	; (800dd44 <tcp_write+0x6c0>)
 800dd2c:	4806      	ldr	r0, [pc, #24]	; (800dd48 <tcp_write+0x6c4>)
 800dd2e:	f006 fa3d 	bl	80141ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800dd32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	375c      	adds	r7, #92	; 0x5c
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd90      	pop	{r4, r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	080170fc 	.word	0x080170fc
 800dd44:	08017470 	.word	0x08017470
 800dd48:	08017150 	.word	0x08017150

0800dd4c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800dd4c:	b590      	push	{r4, r7, lr}
 800dd4e:	b08b      	sub	sp, #44	; 0x2c
 800dd50:	af02      	add	r7, sp, #8
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	61fb      	str	r3, [r7, #28]
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800dd60:	2300      	movs	r3, #0
 800dd62:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d106      	bne.n	800dd78 <tcp_split_unsent_seg+0x2c>
 800dd6a:	4b95      	ldr	r3, [pc, #596]	; (800dfc0 <tcp_split_unsent_seg+0x274>)
 800dd6c:	f240 324b 	movw	r2, #843	; 0x34b
 800dd70:	4994      	ldr	r1, [pc, #592]	; (800dfc4 <tcp_split_unsent_seg+0x278>)
 800dd72:	4895      	ldr	r0, [pc, #596]	; (800dfc8 <tcp_split_unsent_seg+0x27c>)
 800dd74:	f006 fa1a 	bl	80141ac <iprintf>

  useg = pcb->unsent;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd7c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d102      	bne.n	800dd8a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dd84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd88:	e116      	b.n	800dfb8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800dd8a:	887b      	ldrh	r3, [r7, #2]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d109      	bne.n	800dda4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dd90:	4b8b      	ldr	r3, [pc, #556]	; (800dfc0 <tcp_split_unsent_seg+0x274>)
 800dd92:	f240 3253 	movw	r2, #851	; 0x353
 800dd96:	498d      	ldr	r1, [pc, #564]	; (800dfcc <tcp_split_unsent_seg+0x280>)
 800dd98:	488b      	ldr	r0, [pc, #556]	; (800dfc8 <tcp_split_unsent_seg+0x27c>)
 800dd9a:	f006 fa07 	bl	80141ac <iprintf>
    return ERR_VAL;
 800dd9e:	f06f 0305 	mvn.w	r3, #5
 800dda2:	e109      	b.n	800dfb8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	891b      	ldrh	r3, [r3, #8]
 800dda8:	887a      	ldrh	r2, [r7, #2]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d301      	bcc.n	800ddb2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e102      	b.n	800dfb8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddb6:	887a      	ldrh	r2, [r7, #2]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d906      	bls.n	800ddca <tcp_split_unsent_seg+0x7e>
 800ddbc:	4b80      	ldr	r3, [pc, #512]	; (800dfc0 <tcp_split_unsent_seg+0x274>)
 800ddbe:	f240 325b 	movw	r2, #859	; 0x35b
 800ddc2:	4983      	ldr	r1, [pc, #524]	; (800dfd0 <tcp_split_unsent_seg+0x284>)
 800ddc4:	4880      	ldr	r0, [pc, #512]	; (800dfc8 <tcp_split_unsent_seg+0x27c>)
 800ddc6:	f006 f9f1 	bl	80141ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	891b      	ldrh	r3, [r3, #8]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d106      	bne.n	800dde0 <tcp_split_unsent_seg+0x94>
 800ddd2:	4b7b      	ldr	r3, [pc, #492]	; (800dfc0 <tcp_split_unsent_seg+0x274>)
 800ddd4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ddd8:	497e      	ldr	r1, [pc, #504]	; (800dfd4 <tcp_split_unsent_seg+0x288>)
 800ddda:	487b      	ldr	r0, [pc, #492]	; (800dfc8 <tcp_split_unsent_seg+0x27c>)
 800dddc:	f006 f9e6 	bl	80141ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	7a9b      	ldrb	r3, [r3, #10]
 800dde4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	891a      	ldrh	r2, [r3, #8]
 800ddf6:	887b      	ldrh	r3, [r7, #2]
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ddfc:	7bbb      	ldrb	r3, [r7, #14]
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	89bb      	ldrh	r3, [r7, #12]
 800de02:	4413      	add	r3, r2
 800de04:	b29b      	uxth	r3, r3
 800de06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de0a:	4619      	mov	r1, r3
 800de0c:	2036      	movs	r0, #54	; 0x36
 800de0e:	f7fa fbc1 	bl	8008594 <pbuf_alloc>
 800de12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 80b7 	beq.w	800df8a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	891a      	ldrh	r2, [r3, #8]
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	891b      	ldrh	r3, [r3, #8]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	b29a      	uxth	r2, r3
 800de2a:	887b      	ldrh	r3, [r7, #2]
 800de2c:	4413      	add	r3, r2
 800de2e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	6858      	ldr	r0, [r3, #4]
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	7bbb      	ldrb	r3, [r7, #14]
 800de3a:	18d1      	adds	r1, r2, r3
 800de3c:	897b      	ldrh	r3, [r7, #10]
 800de3e:	89ba      	ldrh	r2, [r7, #12]
 800de40:	f7fb f886 	bl	8008f50 <pbuf_copy_partial>
 800de44:	4603      	mov	r3, r0
 800de46:	461a      	mov	r2, r3
 800de48:	89bb      	ldrh	r3, [r7, #12]
 800de4a:	4293      	cmp	r3, r2
 800de4c:	f040 809f 	bne.w	800df8e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	899b      	ldrh	r3, [r3, #12]
 800de56:	b29b      	uxth	r3, r3
 800de58:	4618      	mov	r0, r3
 800de5a:	f7f9 fb59 	bl	8007510 <lwip_htons>
 800de5e:	4603      	mov	r3, r0
 800de60:	b2db      	uxtb	r3, r3
 800de62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de66:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800de68:	2300      	movs	r3, #0
 800de6a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800de6c:	7efb      	ldrb	r3, [r7, #27]
 800de6e:	f003 0308 	and.w	r3, r3, #8
 800de72:	2b00      	cmp	r3, #0
 800de74:	d007      	beq.n	800de86 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800de76:	7efb      	ldrb	r3, [r7, #27]
 800de78:	f023 0308 	bic.w	r3, r3, #8
 800de7c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800de7e:	7ebb      	ldrb	r3, [r7, #26]
 800de80:	f043 0308 	orr.w	r3, r3, #8
 800de84:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800de86:	7efb      	ldrb	r3, [r7, #27]
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d007      	beq.n	800dea0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800de90:	7efb      	ldrb	r3, [r7, #27]
 800de92:	f023 0301 	bic.w	r3, r3, #1
 800de96:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800de98:	7ebb      	ldrb	r3, [r7, #26]
 800de9a:	f043 0301 	orr.w	r3, r3, #1
 800de9e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7f9 fb47 	bl	800753a <lwip_htonl>
 800deac:	4602      	mov	r2, r0
 800deae:	887b      	ldrh	r3, [r7, #2]
 800deb0:	18d1      	adds	r1, r2, r3
 800deb2:	7eba      	ldrb	r2, [r7, #26]
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	460b      	mov	r3, r1
 800deba:	6939      	ldr	r1, [r7, #16]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7ff fa4f 	bl	800d360 <tcp_create_segment>
 800dec2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d063      	beq.n	800df92 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fa fecc 	bl	8008c6c <pbuf_clen>
 800ded4:	4603      	mov	r3, r0
 800ded6:	461a      	mov	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dede:	1a9b      	subs	r3, r3, r2
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	6858      	ldr	r0, [r3, #4]
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	891a      	ldrh	r2, [r3, #8]
 800def2:	89bb      	ldrh	r3, [r7, #12]
 800def4:	1ad3      	subs	r3, r2, r3
 800def6:	b29b      	uxth	r3, r3
 800def8:	4619      	mov	r1, r3
 800defa:	f7fa fca9 	bl	8008850 <pbuf_realloc>
  useg->len -= remainder;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	891a      	ldrh	r2, [r3, #8]
 800df02:	89bb      	ldrh	r3, [r7, #12]
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	b29a      	uxth	r2, r3
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	899b      	ldrh	r3, [r3, #12]
 800df12:	b29c      	uxth	r4, r3
 800df14:	7efb      	ldrb	r3, [r7, #27]
 800df16:	b29b      	uxth	r3, r3
 800df18:	4618      	mov	r0, r3
 800df1a:	f7f9 faf9 	bl	8007510 <lwip_htons>
 800df1e:	4603      	mov	r3, r0
 800df20:	461a      	mov	r2, r3
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	4322      	orrs	r2, r4
 800df28:	b292      	uxth	r2, r2
 800df2a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	4618      	mov	r0, r3
 800df32:	f7fa fe9b 	bl	8008c6c <pbuf_clen>
 800df36:	4603      	mov	r3, r0
 800df38:	461a      	mov	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df40:	4413      	add	r3, r2
 800df42:	b29a      	uxth	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fa fe8c 	bl	8008c6c <pbuf_clen>
 800df54:	4603      	mov	r3, r0
 800df56:	461a      	mov	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df5e:	4413      	add	r3, r2
 800df60:	b29a      	uxth	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d103      	bne.n	800df86 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	e016      	b.n	800dfb8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800df8a:	bf00      	nop
 800df8c:	e002      	b.n	800df94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800df8e:	bf00      	nop
 800df90:	e000      	b.n	800df94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800df92:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d006      	beq.n	800dfa8 <tcp_split_unsent_seg+0x25c>
 800df9a:	4b09      	ldr	r3, [pc, #36]	; (800dfc0 <tcp_split_unsent_seg+0x274>)
 800df9c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800dfa0:	490d      	ldr	r1, [pc, #52]	; (800dfd8 <tcp_split_unsent_seg+0x28c>)
 800dfa2:	4809      	ldr	r0, [pc, #36]	; (800dfc8 <tcp_split_unsent_seg+0x27c>)
 800dfa4:	f006 f902 	bl	80141ac <iprintf>
  if (p != NULL) {
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dfae:	6938      	ldr	r0, [r7, #16]
 800dfb0:	f7fa fdd4 	bl	8008b5c <pbuf_free>
  }

  return ERR_MEM;
 800dfb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3724      	adds	r7, #36	; 0x24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd90      	pop	{r4, r7, pc}
 800dfc0:	080170fc 	.word	0x080170fc
 800dfc4:	08017490 	.word	0x08017490
 800dfc8:	08017150 	.word	0x08017150
 800dfcc:	080174b4 	.word	0x080174b4
 800dfd0:	080174d8 	.word	0x080174d8
 800dfd4:	080174e8 	.word	0x080174e8
 800dfd8:	080174f8 	.word	0x080174f8

0800dfdc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d106      	bne.n	800dff8 <tcp_send_fin+0x1c>
 800dfea:	4b21      	ldr	r3, [pc, #132]	; (800e070 <tcp_send_fin+0x94>)
 800dfec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dff0:	4920      	ldr	r1, [pc, #128]	; (800e074 <tcp_send_fin+0x98>)
 800dff2:	4821      	ldr	r0, [pc, #132]	; (800e078 <tcp_send_fin+0x9c>)
 800dff4:	f006 f8da 	bl	80141ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d02e      	beq.n	800e05e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	e002      	b.n	800e00e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1f8      	bne.n	800e008 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	899b      	ldrh	r3, [r3, #12]
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f9 fa76 	bl	8007510 <lwip_htons>
 800e024:	4603      	mov	r3, r0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f003 0307 	and.w	r3, r3, #7
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d116      	bne.n	800e05e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	899b      	ldrh	r3, [r3, #12]
 800e036:	b29c      	uxth	r4, r3
 800e038:	2001      	movs	r0, #1
 800e03a:	f7f9 fa69 	bl	8007510 <lwip_htons>
 800e03e:	4603      	mov	r3, r0
 800e040:	461a      	mov	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	4322      	orrs	r2, r4
 800e048:	b292      	uxth	r2, r2
 800e04a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	8b5b      	ldrh	r3, [r3, #26]
 800e050:	f043 0320 	orr.w	r3, r3, #32
 800e054:	b29a      	uxth	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	e004      	b.n	800e068 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e05e:	2101      	movs	r1, #1
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 f80b 	bl	800e07c <tcp_enqueue_flags>
 800e066:	4603      	mov	r3, r0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd90      	pop	{r4, r7, pc}
 800e070:	080170fc 	.word	0x080170fc
 800e074:	08017504 	.word	0x08017504
 800e078:	08017150 	.word	0x08017150

0800e07c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b08a      	sub	sp, #40	; 0x28
 800e080:	af02      	add	r7, sp, #8
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e090:	78fb      	ldrb	r3, [r7, #3]
 800e092:	f003 0303 	and.w	r3, r3, #3
 800e096:	2b00      	cmp	r3, #0
 800e098:	d106      	bne.n	800e0a8 <tcp_enqueue_flags+0x2c>
 800e09a:	4b67      	ldr	r3, [pc, #412]	; (800e238 <tcp_enqueue_flags+0x1bc>)
 800e09c:	f240 4211 	movw	r2, #1041	; 0x411
 800e0a0:	4966      	ldr	r1, [pc, #408]	; (800e23c <tcp_enqueue_flags+0x1c0>)
 800e0a2:	4867      	ldr	r0, [pc, #412]	; (800e240 <tcp_enqueue_flags+0x1c4>)
 800e0a4:	f006 f882 	bl	80141ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d106      	bne.n	800e0bc <tcp_enqueue_flags+0x40>
 800e0ae:	4b62      	ldr	r3, [pc, #392]	; (800e238 <tcp_enqueue_flags+0x1bc>)
 800e0b0:	f240 4213 	movw	r2, #1043	; 0x413
 800e0b4:	4963      	ldr	r1, [pc, #396]	; (800e244 <tcp_enqueue_flags+0x1c8>)
 800e0b6:	4862      	ldr	r0, [pc, #392]	; (800e240 <tcp_enqueue_flags+0x1c4>)
 800e0b8:	f006 f878 	bl	80141ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e0bc:	78fb      	ldrb	r3, [r7, #3]
 800e0be:	f003 0302 	and.w	r3, r3, #2
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e0ca:	7ffb      	ldrb	r3, [r7, #31]
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f003 0304 	and.w	r3, r3, #4
 800e0d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e0d6:	7dfb      	ldrb	r3, [r7, #23]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0de:	4619      	mov	r1, r3
 800e0e0:	2036      	movs	r0, #54	; 0x36
 800e0e2:	f7fa fa57 	bl	8008594 <pbuf_alloc>
 800e0e6:	6138      	str	r0, [r7, #16]
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d109      	bne.n	800e102 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	8b5b      	ldrh	r3, [r3, #26]
 800e0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e100:	e095      	b.n	800e22e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	895a      	ldrh	r2, [r3, #10]
 800e106:	7dfb      	ldrb	r3, [r7, #23]
 800e108:	b29b      	uxth	r3, r3
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d206      	bcs.n	800e11c <tcp_enqueue_flags+0xa0>
 800e10e:	4b4a      	ldr	r3, [pc, #296]	; (800e238 <tcp_enqueue_flags+0x1bc>)
 800e110:	f240 4239 	movw	r2, #1081	; 0x439
 800e114:	494c      	ldr	r1, [pc, #304]	; (800e248 <tcp_enqueue_flags+0x1cc>)
 800e116:	484a      	ldr	r0, [pc, #296]	; (800e240 <tcp_enqueue_flags+0x1c4>)
 800e118:	f006 f848 	bl	80141ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e120:	78fa      	ldrb	r2, [r7, #3]
 800e122:	7ffb      	ldrb	r3, [r7, #31]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	460b      	mov	r3, r1
 800e128:	6939      	ldr	r1, [r7, #16]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f7ff f918 	bl	800d360 <tcp_create_segment>
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d109      	bne.n	800e14c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	8b5b      	ldrh	r3, [r3, #26]
 800e13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e140:	b29a      	uxth	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e14a:	e070      	b.n	800e22e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f003 0303 	and.w	r3, r3, #3
 800e154:	2b00      	cmp	r3, #0
 800e156:	d006      	beq.n	800e166 <tcp_enqueue_flags+0xea>
 800e158:	4b37      	ldr	r3, [pc, #220]	; (800e238 <tcp_enqueue_flags+0x1bc>)
 800e15a:	f240 4242 	movw	r2, #1090	; 0x442
 800e15e:	493b      	ldr	r1, [pc, #236]	; (800e24c <tcp_enqueue_flags+0x1d0>)
 800e160:	4837      	ldr	r0, [pc, #220]	; (800e240 <tcp_enqueue_flags+0x1c4>)
 800e162:	f006 f823 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	891b      	ldrh	r3, [r3, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d006      	beq.n	800e17c <tcp_enqueue_flags+0x100>
 800e16e:	4b32      	ldr	r3, [pc, #200]	; (800e238 <tcp_enqueue_flags+0x1bc>)
 800e170:	f240 4243 	movw	r2, #1091	; 0x443
 800e174:	4936      	ldr	r1, [pc, #216]	; (800e250 <tcp_enqueue_flags+0x1d4>)
 800e176:	4832      	ldr	r0, [pc, #200]	; (800e240 <tcp_enqueue_flags+0x1c4>)
 800e178:	f006 f818 	bl	80141ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e180:	2b00      	cmp	r3, #0
 800e182:	d103      	bne.n	800e18c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	66da      	str	r2, [r3, #108]	; 0x6c
 800e18a:	e00d      	b.n	800e1a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e190:	61bb      	str	r3, [r7, #24]
 800e192:	e002      	b.n	800e19a <tcp_enqueue_flags+0x11e>
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	61bb      	str	r3, [r7, #24]
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1f8      	bne.n	800e194 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	68fa      	ldr	r2, [r7, #12]
 800e1a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	f003 0302 	and.w	r3, r3, #2
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d104      	bne.n	800e1c4 <tcp_enqueue_flags+0x148>
 800e1ba:	78fb      	ldrb	r3, [r7, #3]
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d004      	beq.n	800e1ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1c8:	1c5a      	adds	r2, r3, #1
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e1ce:	78fb      	ldrb	r3, [r7, #3]
 800e1d0:	f003 0301 	and.w	r3, r3, #1
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d006      	beq.n	800e1e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	8b5b      	ldrh	r3, [r3, #26]
 800e1dc:	f043 0320 	orr.w	r3, r3, #32
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fa fd3e 	bl	8008c6c <pbuf_clen>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e1fa:	4413      	add	r3, r2
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00e      	beq.n	800e22c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10a      	bne.n	800e22c <tcp_enqueue_flags+0x1b0>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d106      	bne.n	800e22c <tcp_enqueue_flags+0x1b0>
 800e21e:	4b06      	ldr	r3, [pc, #24]	; (800e238 <tcp_enqueue_flags+0x1bc>)
 800e220:	f240 4265 	movw	r2, #1125	; 0x465
 800e224:	490b      	ldr	r1, [pc, #44]	; (800e254 <tcp_enqueue_flags+0x1d8>)
 800e226:	4806      	ldr	r0, [pc, #24]	; (800e240 <tcp_enqueue_flags+0x1c4>)
 800e228:	f005 ffc0 	bl	80141ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3720      	adds	r7, #32
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	080170fc 	.word	0x080170fc
 800e23c:	08017520 	.word	0x08017520
 800e240:	08017150 	.word	0x08017150
 800e244:	08017578 	.word	0x08017578
 800e248:	08017598 	.word	0x08017598
 800e24c:	080175d4 	.word	0x080175d4
 800e250:	080175ec 	.word	0x080175ec
 800e254:	08017618 	.word	0x08017618

0800e258 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e258:	b5b0      	push	{r4, r5, r7, lr}
 800e25a:	b08a      	sub	sp, #40	; 0x28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d106      	bne.n	800e274 <tcp_output+0x1c>
 800e266:	4b9e      	ldr	r3, [pc, #632]	; (800e4e0 <tcp_output+0x288>)
 800e268:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e26c:	499d      	ldr	r1, [pc, #628]	; (800e4e4 <tcp_output+0x28c>)
 800e26e:	489e      	ldr	r0, [pc, #632]	; (800e4e8 <tcp_output+0x290>)
 800e270:	f005 ff9c 	bl	80141ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	7d1b      	ldrb	r3, [r3, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d106      	bne.n	800e28a <tcp_output+0x32>
 800e27c:	4b98      	ldr	r3, [pc, #608]	; (800e4e0 <tcp_output+0x288>)
 800e27e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e282:	499a      	ldr	r1, [pc, #616]	; (800e4ec <tcp_output+0x294>)
 800e284:	4898      	ldr	r0, [pc, #608]	; (800e4e8 <tcp_output+0x290>)
 800e286:	f005 ff91 	bl	80141ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e28a:	4b99      	ldr	r3, [pc, #612]	; (800e4f0 <tcp_output+0x298>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	429a      	cmp	r2, r3
 800e292:	d101      	bne.n	800e298 <tcp_output+0x40>
    return ERR_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	e1ce      	b.n	800e636 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	bf28      	it	cs
 800e2a8:	4613      	movcs	r3, r2
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d10b      	bne.n	800e2d2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	8b5b      	ldrh	r3, [r3, #26]
 800e2be:	f003 0302 	and.w	r3, r3, #2
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f000 81aa 	beq.w	800e61c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fdcb 	bl	800ee64 <tcp_send_empty_ack>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	e1b1      	b.n	800e636 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e2d2:	6879      	ldr	r1, [r7, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	461a      	mov	r2, r3
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff f824 	bl	800d328 <tcp_route>
 800e2e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <tcp_output+0x96>
    return ERR_RTE;
 800e2e8:	f06f 0303 	mvn.w	r3, #3
 800e2ec:	e1a3      	b.n	800e636 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d003      	beq.n	800e2fc <tcp_output+0xa4>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d111      	bne.n	800e320 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <tcp_output+0xb0>
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	3304      	adds	r3, #4
 800e306:	e000      	b.n	800e30a <tcp_output+0xb2>
 800e308:	2300      	movs	r3, #0
 800e30a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d102      	bne.n	800e318 <tcp_output+0xc0>
      return ERR_RTE;
 800e312:	f06f 0303 	mvn.w	r3, #3
 800e316:	e18e      	b.n	800e636 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	4618      	mov	r0, r3
 800e328:	f7f9 f907 	bl	800753a <lwip_htonl>
 800e32c:	4602      	mov	r2, r0
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e336:	8912      	ldrh	r2, [r2, #8]
 800e338:	4413      	add	r3, r2
 800e33a:	69ba      	ldr	r2, [r7, #24]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d227      	bcs.n	800e390 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e346:	461a      	mov	r2, r3
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d114      	bne.n	800e378 <tcp_output+0x120>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e352:	2b00      	cmp	r3, #0
 800e354:	d110      	bne.n	800e378 <tcp_output+0x120>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10b      	bne.n	800e378 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	8b5b      	ldrh	r3, [r3, #26]
 800e37c:	f003 0302 	and.w	r3, r3, #2
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 814d 	beq.w	800e620 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fd6c 	bl	800ee64 <tcp_send_empty_ack>
 800e38c:	4603      	mov	r3, r0
 800e38e:	e152      	b.n	800e636 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e39c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e39e:	6a3b      	ldr	r3, [r7, #32]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f000 811c 	beq.w	800e5de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e3a6:	e002      	b.n	800e3ae <tcp_output+0x156>
 800e3a8:	6a3b      	ldr	r3, [r7, #32]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	623b      	str	r3, [r7, #32]
 800e3ae:	6a3b      	ldr	r3, [r7, #32]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1f8      	bne.n	800e3a8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e3b6:	e112      	b.n	800e5de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	899b      	ldrh	r3, [r3, #12]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7f9 f8a5 	bl	8007510 <lwip_htons>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	f003 0304 	and.w	r3, r3, #4
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d006      	beq.n	800e3e0 <tcp_output+0x188>
 800e3d2:	4b43      	ldr	r3, [pc, #268]	; (800e4e0 <tcp_output+0x288>)
 800e3d4:	f240 5236 	movw	r2, #1334	; 0x536
 800e3d8:	4946      	ldr	r1, [pc, #280]	; (800e4f4 <tcp_output+0x29c>)
 800e3da:	4843      	ldr	r0, [pc, #268]	; (800e4e8 <tcp_output+0x290>)
 800e3dc:	f005 fee6 	bl	80141ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d01f      	beq.n	800e428 <tcp_output+0x1d0>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	8b5b      	ldrh	r3, [r3, #26]
 800e3ec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d119      	bne.n	800e428 <tcp_output+0x1d0>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00b      	beq.n	800e414 <tcp_output+0x1bc>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d110      	bne.n	800e428 <tcp_output+0x1d0>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e40a:	891a      	ldrh	r2, [r3, #8]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e410:	429a      	cmp	r2, r3
 800e412:	d209      	bcs.n	800e428 <tcp_output+0x1d0>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d004      	beq.n	800e428 <tcp_output+0x1d0>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e424:	2b08      	cmp	r3, #8
 800e426:	d901      	bls.n	800e42c <tcp_output+0x1d4>
 800e428:	2301      	movs	r3, #1
 800e42a:	e000      	b.n	800e42e <tcp_output+0x1d6>
 800e42c:	2300      	movs	r3, #0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	8b5b      	ldrh	r3, [r3, #26]
 800e436:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f000 80e4 	beq.w	800e608 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	7d1b      	ldrb	r3, [r3, #20]
 800e444:	2b02      	cmp	r3, #2
 800e446:	d00d      	beq.n	800e464 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	899b      	ldrh	r3, [r3, #12]
 800e44e:	b29c      	uxth	r4, r3
 800e450:	2010      	movs	r0, #16
 800e452:	f7f9 f85d 	bl	8007510 <lwip_htons>
 800e456:	4603      	mov	r3, r0
 800e458:	461a      	mov	r2, r3
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	4322      	orrs	r2, r4
 800e460:	b292      	uxth	r2, r2
 800e462:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e464:	697a      	ldr	r2, [r7, #20]
 800e466:	6879      	ldr	r1, [r7, #4]
 800e468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e46a:	f000 f909 	bl	800e680 <tcp_output_segment>
 800e46e:	4603      	mov	r3, r0
 800e470:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d009      	beq.n	800e48e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	8b5b      	ldrh	r3, [r3, #26]
 800e47e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e482:	b29a      	uxth	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	835a      	strh	r2, [r3, #26]
      return err;
 800e488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e48c:	e0d3      	b.n	800e636 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7d1b      	ldrb	r3, [r3, #20]
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d006      	beq.n	800e4ac <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	8b5b      	ldrh	r3, [r3, #26]
 800e4a2:	f023 0303 	bic.w	r3, r3, #3
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f9 f841 	bl	800753a <lwip_htonl>
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	891b      	ldrh	r3, [r3, #8]
 800e4be:	461d      	mov	r5, r3
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	899b      	ldrh	r3, [r3, #12]
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7f9 f821 	bl	8007510 <lwip_htons>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	f003 0303 	and.w	r3, r3, #3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00e      	beq.n	800e4f8 <tcp_output+0x2a0>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e00d      	b.n	800e4fa <tcp_output+0x2a2>
 800e4de:	bf00      	nop
 800e4e0:	080170fc 	.word	0x080170fc
 800e4e4:	08017640 	.word	0x08017640
 800e4e8:	08017150 	.word	0x08017150
 800e4ec:	08017658 	.word	0x08017658
 800e4f0:	20006e64 	.word	0x20006e64
 800e4f4:	08017680 	.word	0x08017680
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	442b      	add	r3, r5
 800e4fc:	4423      	add	r3, r4
 800e4fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	1ad3      	subs	r3, r2, r3
 800e508:	2b00      	cmp	r3, #0
 800e50a:	da02      	bge.n	800e512 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e514:	891b      	ldrh	r3, [r3, #8]
 800e516:	461c      	mov	r4, r3
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	899b      	ldrh	r3, [r3, #12]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	4618      	mov	r0, r3
 800e522:	f7f8 fff5 	bl	8007510 <lwip_htons>
 800e526:	4603      	mov	r3, r0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	f003 0303 	and.w	r3, r3, #3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <tcp_output+0x2de>
 800e532:	2301      	movs	r3, #1
 800e534:	e000      	b.n	800e538 <tcp_output+0x2e0>
 800e536:	2300      	movs	r3, #0
 800e538:	4423      	add	r3, r4
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d049      	beq.n	800e5d2 <tcp_output+0x37a>
      seg->next = NULL;
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	2200      	movs	r2, #0
 800e542:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d105      	bne.n	800e558 <tcp_output+0x300>
        pcb->unacked = seg;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e550:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	623b      	str	r3, [r7, #32]
 800e556:	e03f      	b.n	800e5d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f8 ffeb 	bl	800753a <lwip_htonl>
 800e564:	4604      	mov	r4, r0
 800e566:	6a3b      	ldr	r3, [r7, #32]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7f8 ffe4 	bl	800753a <lwip_htonl>
 800e572:	4603      	mov	r3, r0
 800e574:	1ae3      	subs	r3, r4, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	da24      	bge.n	800e5c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3370      	adds	r3, #112	; 0x70
 800e57e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e580:	e002      	b.n	800e588 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d011      	beq.n	800e5b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	4618      	mov	r0, r3
 800e59a:	f7f8 ffce 	bl	800753a <lwip_htonl>
 800e59e:	4604      	mov	r4, r0
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f8 ffc7 	bl	800753a <lwip_htonl>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	dbe6      	blt.n	800e582 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	e009      	b.n	800e5d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	623b      	str	r3, [r7, #32]
 800e5d0:	e002      	b.n	800e5d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e5d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5d4:	f7fb feff 	bl	800a3d6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d012      	beq.n	800e60a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7f8 ffa5 	bl	800753a <lwip_htonl>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5fa:	8912      	ldrh	r2, [r2, #8]
 800e5fc:	4413      	add	r3, r2
  while (seg != NULL &&
 800e5fe:	69ba      	ldr	r2, [r7, #24]
 800e600:	429a      	cmp	r2, r3
 800e602:	f4bf aed9 	bcs.w	800e3b8 <tcp_output+0x160>
 800e606:	e000      	b.n	800e60a <tcp_output+0x3b2>
      break;
 800e608:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d108      	bne.n	800e624 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e61a:	e004      	b.n	800e626 <tcp_output+0x3ce>
    goto output_done;
 800e61c:	bf00      	nop
 800e61e:	e002      	b.n	800e626 <tcp_output+0x3ce>
    goto output_done;
 800e620:	bf00      	nop
 800e622:	e000      	b.n	800e626 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e624:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	8b5b      	ldrh	r3, [r3, #26]
 800e62a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e62e:	b29a      	uxth	r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3728      	adds	r7, #40	; 0x28
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bdb0      	pop	{r4, r5, r7, pc}
 800e63e:	bf00      	nop

0800e640 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d106      	bne.n	800e65c <tcp_output_segment_busy+0x1c>
 800e64e:	4b09      	ldr	r3, [pc, #36]	; (800e674 <tcp_output_segment_busy+0x34>)
 800e650:	f240 529a 	movw	r2, #1434	; 0x59a
 800e654:	4908      	ldr	r1, [pc, #32]	; (800e678 <tcp_output_segment_busy+0x38>)
 800e656:	4809      	ldr	r0, [pc, #36]	; (800e67c <tcp_output_segment_busy+0x3c>)
 800e658:	f005 fda8 	bl	80141ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	7b9b      	ldrb	r3, [r3, #14]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d001      	beq.n	800e66a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	080170fc 	.word	0x080170fc
 800e678:	08017698 	.word	0x08017698
 800e67c:	08017150 	.word	0x08017150

0800e680 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e680:	b5b0      	push	{r4, r5, r7, lr}
 800e682:	b08c      	sub	sp, #48	; 0x30
 800e684:	af04      	add	r7, sp, #16
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d106      	bne.n	800e6a0 <tcp_output_segment+0x20>
 800e692:	4b63      	ldr	r3, [pc, #396]	; (800e820 <tcp_output_segment+0x1a0>)
 800e694:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e698:	4962      	ldr	r1, [pc, #392]	; (800e824 <tcp_output_segment+0x1a4>)
 800e69a:	4863      	ldr	r0, [pc, #396]	; (800e828 <tcp_output_segment+0x1a8>)
 800e69c:	f005 fd86 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <tcp_output_segment+0x34>
 800e6a6:	4b5e      	ldr	r3, [pc, #376]	; (800e820 <tcp_output_segment+0x1a0>)
 800e6a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e6ac:	495f      	ldr	r1, [pc, #380]	; (800e82c <tcp_output_segment+0x1ac>)
 800e6ae:	485e      	ldr	r0, [pc, #376]	; (800e828 <tcp_output_segment+0x1a8>)
 800e6b0:	f005 fd7c 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d106      	bne.n	800e6c8 <tcp_output_segment+0x48>
 800e6ba:	4b59      	ldr	r3, [pc, #356]	; (800e820 <tcp_output_segment+0x1a0>)
 800e6bc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e6c0:	495b      	ldr	r1, [pc, #364]	; (800e830 <tcp_output_segment+0x1b0>)
 800e6c2:	4859      	ldr	r0, [pc, #356]	; (800e828 <tcp_output_segment+0x1a8>)
 800e6c4:	f005 fd72 	bl	80141ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff ffb9 	bl	800e640 <tcp_output_segment_busy>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e09f      	b.n	800e818 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	68dc      	ldr	r4, [r3, #12]
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	f7f8 ff2a 	bl	800753a <lwip_htonl>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	68dc      	ldr	r4, [r3, #12]
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	f7f8 ff0c 	bl	8007510 <lwip_htons>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e704:	441a      	add	r2, r3
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	3314      	adds	r3, #20
 800e710:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	7a9b      	ldrb	r3, [r3, #10]
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d015      	beq.n	800e74a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	3304      	adds	r3, #4
 800e722:	461a      	mov	r2, r3
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e72a:	f7fc fa37 	bl	800ab9c <tcp_eff_send_mss_netif>
 800e72e:	4603      	mov	r3, r0
 800e730:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e732:	8b7b      	ldrh	r3, [r7, #26]
 800e734:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f8 fefe 	bl	800753a <lwip_htonl>
 800e73e:	4602      	mov	r2, r0
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	3304      	adds	r3, #4
 800e748:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e750:	2b00      	cmp	r3, #0
 800e752:	da02      	bge.n	800e75a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2200      	movs	r2, #0
 800e758:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10c      	bne.n	800e77c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e762:	4b34      	ldr	r3, [pc, #208]	; (800e834 <tcp_output_segment+0x1b4>)
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	4618      	mov	r0, r3
 800e772:	f7f8 fee2 	bl	800753a <lwip_htonl>
 800e776:	4602      	mov	r2, r0
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	68da      	ldr	r2, [r3, #12]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	1ad3      	subs	r3, r2, r3
 800e788:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	8959      	ldrh	r1, [r3, #10]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	8b3a      	ldrh	r2, [r7, #24]
 800e796:	1a8a      	subs	r2, r1, r2
 800e798:	b292      	uxth	r2, r2
 800e79a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	8919      	ldrh	r1, [r3, #8]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	8b3a      	ldrh	r2, [r7, #24]
 800e7a8:	1a8a      	subs	r2, r1, r2
 800e7aa:	b292      	uxth	r2, r2
 800e7ac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	68fa      	ldr	r2, [r7, #12]
 800e7b4:	68d2      	ldr	r2, [r2, #12]
 800e7b6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	741a      	strb	r2, [r3, #16]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	f103 0214 	add.w	r2, r3, #20
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	7a9b      	ldrb	r3, [r3, #10]
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	f003 0304 	and.w	r3, r3, #4
 800e7d6:	4413      	add	r3, r2
 800e7d8:	69fa      	ldr	r2, [r7, #28]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d006      	beq.n	800e7ec <tcp_output_segment+0x16c>
 800e7de:	4b10      	ldr	r3, [pc, #64]	; (800e820 <tcp_output_segment+0x1a0>)
 800e7e0:	f240 621c 	movw	r2, #1564	; 0x61c
 800e7e4:	4914      	ldr	r1, [pc, #80]	; (800e838 <tcp_output_segment+0x1b8>)
 800e7e6:	4810      	ldr	r0, [pc, #64]	; (800e828 <tcp_output_segment+0x1a8>)
 800e7e8:	f005 fce0 	bl	80141ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6858      	ldr	r0, [r3, #4]
 800e7f0:	68b9      	ldr	r1, [r7, #8]
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	1d1c      	adds	r4, r3, #4
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	7add      	ldrb	r5, [r3, #11]
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	7a9b      	ldrb	r3, [r3, #10]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	9202      	str	r2, [sp, #8]
 800e802:	2206      	movs	r2, #6
 800e804:	9201      	str	r2, [sp, #4]
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	462b      	mov	r3, r5
 800e80a:	4622      	mov	r2, r4
 800e80c:	f004 fbb2 	bl	8012f74 <ip4_output_if>
 800e810:	4603      	mov	r3, r0
 800e812:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3720      	adds	r7, #32
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bdb0      	pop	{r4, r5, r7, pc}
 800e820:	080170fc 	.word	0x080170fc
 800e824:	080176c0 	.word	0x080176c0
 800e828:	08017150 	.word	0x08017150
 800e82c:	080176e0 	.word	0x080176e0
 800e830:	08017700 	.word	0x08017700
 800e834:	20006e54 	.word	0x20006e54
 800e838:	08017724 	.word	0x08017724

0800e83c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e83c:	b5b0      	push	{r4, r5, r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d106      	bne.n	800e858 <tcp_rexmit_rto_prepare+0x1c>
 800e84a:	4b31      	ldr	r3, [pc, #196]	; (800e910 <tcp_rexmit_rto_prepare+0xd4>)
 800e84c:	f240 6263 	movw	r2, #1635	; 0x663
 800e850:	4930      	ldr	r1, [pc, #192]	; (800e914 <tcp_rexmit_rto_prepare+0xd8>)
 800e852:	4831      	ldr	r0, [pc, #196]	; (800e918 <tcp_rexmit_rto_prepare+0xdc>)
 800e854:	f005 fcaa 	bl	80141ac <iprintf>

  if (pcb->unacked == NULL) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d102      	bne.n	800e866 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e860:	f06f 0305 	mvn.w	r3, #5
 800e864:	e050      	b.n	800e908 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e86a:	60fb      	str	r3, [r7, #12]
 800e86c:	e00b      	b.n	800e886 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7ff fee6 	bl	800e640 <tcp_output_segment_busy>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d002      	beq.n	800e880 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e87a:	f06f 0305 	mvn.w	r3, #5
 800e87e:	e043      	b.n	800e908 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	60fb      	str	r3, [r7, #12]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1ef      	bne.n	800e86e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f7ff fed6 	bl	800e640 <tcp_output_segment_busy>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d002      	beq.n	800e8a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e89a:	f06f 0305 	mvn.w	r3, #5
 800e89e:	e033      	b.n	800e908 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	8b5b      	ldrh	r3, [r3, #26]
 800e8ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7f8 fe35 	bl	800753a <lwip_htonl>
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	891b      	ldrh	r3, [r3, #8]
 800e8d6:	461d      	mov	r5, r3
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	899b      	ldrh	r3, [r3, #12]
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7f8 fe15 	bl	8007510 <lwip_htons>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	f003 0303 	and.w	r3, r3, #3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <tcp_rexmit_rto_prepare+0xba>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e000      	b.n	800e8f8 <tcp_rexmit_rto_prepare+0xbc>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	442b      	add	r3, r5
 800e8fa:	18e2      	adds	r2, r4, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bdb0      	pop	{r4, r5, r7, pc}
 800e910:	080170fc 	.word	0x080170fc
 800e914:	08017738 	.word	0x08017738
 800e918:	08017150 	.word	0x08017150

0800e91c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <tcp_rexmit_rto_commit+0x1c>
 800e92a:	4b0d      	ldr	r3, [pc, #52]	; (800e960 <tcp_rexmit_rto_commit+0x44>)
 800e92c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e930:	490c      	ldr	r1, [pc, #48]	; (800e964 <tcp_rexmit_rto_commit+0x48>)
 800e932:	480d      	ldr	r0, [pc, #52]	; (800e968 <tcp_rexmit_rto_commit+0x4c>)
 800e934:	f005 fc3a 	bl	80141ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e93e:	2bff      	cmp	r3, #255	; 0xff
 800e940:	d007      	beq.n	800e952 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e948:	3301      	adds	r3, #1
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff fc80 	bl	800e258 <tcp_output>
}
 800e958:	bf00      	nop
 800e95a:	3708      	adds	r7, #8
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	080170fc 	.word	0x080170fc
 800e964:	0801775c 	.word	0x0801775c
 800e968:	08017150 	.word	0x08017150

0800e96c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d106      	bne.n	800e988 <tcp_rexmit_rto+0x1c>
 800e97a:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <tcp_rexmit_rto+0x38>)
 800e97c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e980:	4909      	ldr	r1, [pc, #36]	; (800e9a8 <tcp_rexmit_rto+0x3c>)
 800e982:	480a      	ldr	r0, [pc, #40]	; (800e9ac <tcp_rexmit_rto+0x40>)
 800e984:	f005 fc12 	bl	80141ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7ff ff57 	bl	800e83c <tcp_rexmit_rto_prepare>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7ff ffc1 	bl	800e91c <tcp_rexmit_rto_commit>
  }
}
 800e99a:	bf00      	nop
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	080170fc 	.word	0x080170fc
 800e9a8:	08017780 	.word	0x08017780
 800e9ac:	08017150 	.word	0x08017150

0800e9b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e9b0:	b590      	push	{r4, r7, lr}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d106      	bne.n	800e9cc <tcp_rexmit+0x1c>
 800e9be:	4b2f      	ldr	r3, [pc, #188]	; (800ea7c <tcp_rexmit+0xcc>)
 800e9c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e9c4:	492e      	ldr	r1, [pc, #184]	; (800ea80 <tcp_rexmit+0xd0>)
 800e9c6:	482f      	ldr	r0, [pc, #188]	; (800ea84 <tcp_rexmit+0xd4>)
 800e9c8:	f005 fbf0 	bl	80141ac <iprintf>

  if (pcb->unacked == NULL) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d102      	bne.n	800e9da <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e9d4:	f06f 0305 	mvn.w	r3, #5
 800e9d8:	e04c      	b.n	800ea74 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e9e0:	68b8      	ldr	r0, [r7, #8]
 800e9e2:	f7ff fe2d 	bl	800e640 <tcp_output_segment_busy>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d002      	beq.n	800e9f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e9ec:	f06f 0305 	mvn.w	r3, #5
 800e9f0:	e040      	b.n	800ea74 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	336c      	adds	r3, #108	; 0x6c
 800e9fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ea00:	e002      	b.n	800ea08 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d011      	beq.n	800ea34 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7f8 fd8e 	bl	800753a <lwip_htonl>
 800ea1e:	4604      	mov	r4, r0
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7f8 fd87 	bl	800753a <lwip_htonl>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dbe6      	blt.n	800ea02 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d103      	bne.n	800ea52 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea58:	2bff      	cmp	r3, #255	; 0xff
 800ea5a:	d007      	beq.n	800ea6c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea62:	3301      	adds	r3, #1
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd90      	pop	{r4, r7, pc}
 800ea7c:	080170fc 	.word	0x080170fc
 800ea80:	0801779c 	.word	0x0801779c
 800ea84:	08017150 	.word	0x08017150

0800ea88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d106      	bne.n	800eaa4 <tcp_rexmit_fast+0x1c>
 800ea96:	4b2a      	ldr	r3, [pc, #168]	; (800eb40 <tcp_rexmit_fast+0xb8>)
 800ea98:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ea9c:	4929      	ldr	r1, [pc, #164]	; (800eb44 <tcp_rexmit_fast+0xbc>)
 800ea9e:	482a      	ldr	r0, [pc, #168]	; (800eb48 <tcp_rexmit_fast+0xc0>)
 800eaa0:	f005 fb84 	bl	80141ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d045      	beq.n	800eb38 <tcp_rexmit_fast+0xb0>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	8b5b      	ldrh	r3, [r3, #26]
 800eab0:	f003 0304 	and.w	r3, r3, #4
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d13f      	bne.n	800eb38 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7ff ff79 	bl	800e9b0 <tcp_rexmit>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d139      	bne.n	800eb38 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ead0:	4293      	cmp	r3, r2
 800ead2:	bf28      	it	cs
 800ead4:	4613      	movcs	r3, r2
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	da00      	bge.n	800eade <tcp_rexmit_fast+0x56>
 800eadc:	3301      	adds	r3, #1
 800eade:	105b      	asrs	r3, r3, #1
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800eaee:	461a      	mov	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d206      	bcs.n	800eb08 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eafe:	005b      	lsls	r3, r3, #1
 800eb00:	b29a      	uxth	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb12:	4619      	mov	r1, r3
 800eb14:	0049      	lsls	r1, r1, #1
 800eb16:	440b      	add	r3, r1
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	4413      	add	r3, r2
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	8b5b      	ldrh	r3, [r3, #26]
 800eb28:	f043 0304 	orr.w	r3, r3, #4
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800eb38:	bf00      	nop
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	080170fc 	.word	0x080170fc
 800eb44:	080177b4 	.word	0x080177b4
 800eb48:	08017150 	.word	0x08017150

0800eb4c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	607b      	str	r3, [r7, #4]
 800eb56:	460b      	mov	r3, r1
 800eb58:	817b      	strh	r3, [r7, #10]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800eb5e:	897a      	ldrh	r2, [r7, #10]
 800eb60:	893b      	ldrh	r3, [r7, #8]
 800eb62:	4413      	add	r3, r2
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	3314      	adds	r3, #20
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb6e:	4619      	mov	r1, r3
 800eb70:	2022      	movs	r0, #34	; 0x22
 800eb72:	f7f9 fd0f 	bl	8008594 <pbuf_alloc>
 800eb76:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d04d      	beq.n	800ec1a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eb7e:	897b      	ldrh	r3, [r7, #10]
 800eb80:	3313      	adds	r3, #19
 800eb82:	697a      	ldr	r2, [r7, #20]
 800eb84:	8952      	ldrh	r2, [r2, #10]
 800eb86:	4293      	cmp	r3, r2
 800eb88:	db06      	blt.n	800eb98 <tcp_output_alloc_header_common+0x4c>
 800eb8a:	4b26      	ldr	r3, [pc, #152]	; (800ec24 <tcp_output_alloc_header_common+0xd8>)
 800eb8c:	f240 7223 	movw	r2, #1827	; 0x723
 800eb90:	4925      	ldr	r1, [pc, #148]	; (800ec28 <tcp_output_alloc_header_common+0xdc>)
 800eb92:	4826      	ldr	r0, [pc, #152]	; (800ec2c <tcp_output_alloc_header_common+0xe0>)
 800eb94:	f005 fb0a 	bl	80141ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eb9e:	8c3b      	ldrh	r3, [r7, #32]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7f8 fcb5 	bl	8007510 <lwip_htons>
 800eba6:	4603      	mov	r3, r0
 800eba8:	461a      	mov	r2, r3
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ebae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7f8 fcad 	bl	8007510 <lwip_htons>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	461a      	mov	r2, r3
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7f8 fcb8 	bl	800753a <lwip_htonl>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ebd0:	897b      	ldrh	r3, [r7, #10]
 800ebd2:	089b      	lsrs	r3, r3, #2
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	3305      	adds	r3, #5
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	031b      	lsls	r3, r3, #12
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7f8 fc91 	bl	8007510 <lwip_htons>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ebf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f8 fc89 	bl	8007510 <lwip_htons>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	461a      	mov	r2, r3
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	741a      	strb	r2, [r3, #16]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	2200      	movs	r2, #0
 800ec14:	749a      	strb	r2, [r3, #18]
 800ec16:	2200      	movs	r2, #0
 800ec18:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ec1a:	697b      	ldr	r3, [r7, #20]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	080170fc 	.word	0x080170fc
 800ec28:	080177d4 	.word	0x080177d4
 800ec2c:	08017150 	.word	0x08017150

0800ec30 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ec30:	b5b0      	push	{r4, r5, r7, lr}
 800ec32:	b08a      	sub	sp, #40	; 0x28
 800ec34:	af04      	add	r7, sp, #16
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	607b      	str	r3, [r7, #4]
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	817b      	strh	r3, [r7, #10]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d106      	bne.n	800ec56 <tcp_output_alloc_header+0x26>
 800ec48:	4b15      	ldr	r3, [pc, #84]	; (800eca0 <tcp_output_alloc_header+0x70>)
 800ec4a:	f240 7242 	movw	r2, #1858	; 0x742
 800ec4e:	4915      	ldr	r1, [pc, #84]	; (800eca4 <tcp_output_alloc_header+0x74>)
 800ec50:	4815      	ldr	r0, [pc, #84]	; (800eca8 <tcp_output_alloc_header+0x78>)
 800ec52:	f005 faab 	bl	80141ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	8adb      	ldrh	r3, [r3, #22]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	8b12      	ldrh	r2, [r2, #24]
 800ec62:	68f9      	ldr	r1, [r7, #12]
 800ec64:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ec66:	893d      	ldrh	r5, [r7, #8]
 800ec68:	897c      	ldrh	r4, [r7, #10]
 800ec6a:	9103      	str	r1, [sp, #12]
 800ec6c:	2110      	movs	r1, #16
 800ec6e:	9102      	str	r1, [sp, #8]
 800ec70:	9201      	str	r2, [sp, #4]
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	462a      	mov	r2, r5
 800ec78:	4621      	mov	r1, r4
 800ec7a:	f7ff ff67 	bl	800eb4c <tcp_output_alloc_header_common>
 800ec7e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d006      	beq.n	800ec94 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ec8e:	441a      	add	r2, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ec94:	697b      	ldr	r3, [r7, #20]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	080170fc 	.word	0x080170fc
 800eca4:	08017804 	.word	0x08017804
 800eca8:	08017150 	.word	0x08017150

0800ecac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b088      	sub	sp, #32
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	4611      	mov	r1, r2
 800ecb8:	461a      	mov	r2, r3
 800ecba:	460b      	mov	r3, r1
 800ecbc:	71fb      	strb	r3, [r7, #7]
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d106      	bne.n	800ecda <tcp_output_fill_options+0x2e>
 800eccc:	4b13      	ldr	r3, [pc, #76]	; (800ed1c <tcp_output_fill_options+0x70>)
 800ecce:	f240 7256 	movw	r2, #1878	; 0x756
 800ecd2:	4913      	ldr	r1, [pc, #76]	; (800ed20 <tcp_output_fill_options+0x74>)
 800ecd4:	4813      	ldr	r0, [pc, #76]	; (800ed24 <tcp_output_fill_options+0x78>)
 800ecd6:	f005 fa69 	bl	80141ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	3314      	adds	r3, #20
 800ece4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	f103 0214 	add.w	r2, r3, #20
 800ecec:	8bfb      	ldrh	r3, [r7, #30]
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	79fb      	ldrb	r3, [r7, #7]
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	f003 0304 	and.w	r3, r3, #4
 800ecfa:	440b      	add	r3, r1
 800ecfc:	4413      	add	r3, r2
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d006      	beq.n	800ed12 <tcp_output_fill_options+0x66>
 800ed04:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <tcp_output_fill_options+0x70>)
 800ed06:	f240 7275 	movw	r2, #1909	; 0x775
 800ed0a:	4907      	ldr	r1, [pc, #28]	; (800ed28 <tcp_output_fill_options+0x7c>)
 800ed0c:	4805      	ldr	r0, [pc, #20]	; (800ed24 <tcp_output_fill_options+0x78>)
 800ed0e:	f005 fa4d 	bl	80141ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ed12:	bf00      	nop
 800ed14:	3720      	adds	r7, #32
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	080170fc 	.word	0x080170fc
 800ed20:	0801782c 	.word	0x0801782c
 800ed24:	08017150 	.word	0x08017150
 800ed28:	08017724 	.word	0x08017724

0800ed2c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b08a      	sub	sp, #40	; 0x28
 800ed30:	af04      	add	r7, sp, #16
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d106      	bne.n	800ed4e <tcp_output_control_segment+0x22>
 800ed40:	4b1c      	ldr	r3, [pc, #112]	; (800edb4 <tcp_output_control_segment+0x88>)
 800ed42:	f240 7287 	movw	r2, #1927	; 0x787
 800ed46:	491c      	ldr	r1, [pc, #112]	; (800edb8 <tcp_output_control_segment+0x8c>)
 800ed48:	481c      	ldr	r0, [pc, #112]	; (800edbc <tcp_output_control_segment+0x90>)
 800ed4a:	f005 fa2f 	bl	80141ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ed4e:	683a      	ldr	r2, [r7, #0]
 800ed50:	6879      	ldr	r1, [r7, #4]
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7fe fae8 	bl	800d328 <tcp_route>
 800ed58:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d102      	bne.n	800ed66 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ed60:	23fc      	movs	r3, #252	; 0xfc
 800ed62:	75fb      	strb	r3, [r7, #23]
 800ed64:	e01c      	b.n	800eda0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d006      	beq.n	800ed7a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	7adb      	ldrb	r3, [r3, #11]
 800ed70:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	7a9b      	ldrb	r3, [r3, #10]
 800ed76:	757b      	strb	r3, [r7, #21]
 800ed78:	e003      	b.n	800ed82 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ed7a:	23ff      	movs	r3, #255	; 0xff
 800ed7c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ed82:	7dba      	ldrb	r2, [r7, #22]
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	9302      	str	r3, [sp, #8]
 800ed88:	2306      	movs	r3, #6
 800ed8a:	9301      	str	r3, [sp, #4]
 800ed8c:	7d7b      	ldrb	r3, [r7, #21]
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	4613      	mov	r3, r2
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	68b8      	ldr	r0, [r7, #8]
 800ed98:	f004 f8ec 	bl	8012f74 <ip4_output_if>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800eda0:	68b8      	ldr	r0, [r7, #8]
 800eda2:	f7f9 fedb 	bl	8008b5c <pbuf_free>
  return err;
 800eda6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	080170fc 	.word	0x080170fc
 800edb8:	08017854 	.word	0x08017854
 800edbc:	08017150 	.word	0x08017150

0800edc0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800edc0:	b590      	push	{r4, r7, lr}
 800edc2:	b08b      	sub	sp, #44	; 0x2c
 800edc4:	af04      	add	r7, sp, #16
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
 800edcc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d106      	bne.n	800ede2 <tcp_rst+0x22>
 800edd4:	4b1f      	ldr	r3, [pc, #124]	; (800ee54 <tcp_rst+0x94>)
 800edd6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800edda:	491f      	ldr	r1, [pc, #124]	; (800ee58 <tcp_rst+0x98>)
 800eddc:	481f      	ldr	r0, [pc, #124]	; (800ee5c <tcp_rst+0x9c>)
 800edde:	f005 f9e5 	bl	80141ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d106      	bne.n	800edf6 <tcp_rst+0x36>
 800ede8:	4b1a      	ldr	r3, [pc, #104]	; (800ee54 <tcp_rst+0x94>)
 800edea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800edee:	491c      	ldr	r1, [pc, #112]	; (800ee60 <tcp_rst+0xa0>)
 800edf0:	481a      	ldr	r0, [pc, #104]	; (800ee5c <tcp_rst+0x9c>)
 800edf2:	f005 f9db 	bl	80141ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800edf6:	2300      	movs	r3, #0
 800edf8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800edfa:	f246 0308 	movw	r3, #24584	; 0x6008
 800edfe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
 800ee02:	b29c      	uxth	r4, r3
 800ee04:	68b8      	ldr	r0, [r7, #8]
 800ee06:	f7f8 fb98 	bl	800753a <lwip_htonl>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	8abb      	ldrh	r3, [r7, #20]
 800ee0e:	9303      	str	r3, [sp, #12]
 800ee10:	2314      	movs	r3, #20
 800ee12:	9302      	str	r3, [sp, #8]
 800ee14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	2200      	movs	r2, #0
 800ee20:	4621      	mov	r1, r4
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff fe92 	bl	800eb4c <tcp_output_alloc_header_common>
 800ee28:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00c      	beq.n	800ee4a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ee30:	7dfb      	ldrb	r3, [r7, #23]
 800ee32:	2200      	movs	r2, #0
 800ee34:	6939      	ldr	r1, [r7, #16]
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7ff ff38 	bl	800ecac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ee3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	6939      	ldr	r1, [r7, #16]
 800ee42:	68f8      	ldr	r0, [r7, #12]
 800ee44:	f7ff ff72 	bl	800ed2c <tcp_output_control_segment>
 800ee48:	e000      	b.n	800ee4c <tcp_rst+0x8c>
    return;
 800ee4a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ee4c:	371c      	adds	r7, #28
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd90      	pop	{r4, r7, pc}
 800ee52:	bf00      	nop
 800ee54:	080170fc 	.word	0x080170fc
 800ee58:	08017880 	.word	0x08017880
 800ee5c:	08017150 	.word	0x08017150
 800ee60:	0801789c 	.word	0x0801789c

0800ee64 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ee64:	b590      	push	{r4, r7, lr}
 800ee66:	b087      	sub	sp, #28
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ee70:	2300      	movs	r3, #0
 800ee72:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d106      	bne.n	800ee88 <tcp_send_empty_ack+0x24>
 800ee7a:	4b28      	ldr	r3, [pc, #160]	; (800ef1c <tcp_send_empty_ack+0xb8>)
 800ee7c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ee80:	4927      	ldr	r1, [pc, #156]	; (800ef20 <tcp_send_empty_ack+0xbc>)
 800ee82:	4828      	ldr	r0, [pc, #160]	; (800ef24 <tcp_send_empty_ack+0xc0>)
 800ee84:	f005 f992 	bl	80141ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	f003 0304 	and.w	r3, r3, #4
 800ee92:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ee94:	7d7b      	ldrb	r3, [r7, #21]
 800ee96:	b29c      	uxth	r4, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7f8 fb4c 	bl	800753a <lwip_htonl>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2200      	movs	r2, #0
 800eea6:	4621      	mov	r1, r4
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7ff fec1 	bl	800ec30 <tcp_output_alloc_header>
 800eeae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d109      	bne.n	800eeca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	8b5b      	ldrh	r3, [r3, #26]
 800eeba:	f043 0303 	orr.w	r3, r3, #3
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800eec4:	f06f 0301 	mvn.w	r3, #1
 800eec8:	e023      	b.n	800ef12 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800eeca:	7dbb      	ldrb	r3, [r7, #22]
 800eecc:	7dfa      	ldrb	r2, [r7, #23]
 800eece:	6939      	ldr	r1, [r7, #16]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7ff feeb 	bl	800ecac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3304      	adds	r3, #4
 800eedc:	6939      	ldr	r1, [r7, #16]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ff24 	bl	800ed2c <tcp_output_control_segment>
 800eee4:	4603      	mov	r3, r0
 800eee6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d007      	beq.n	800ef00 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	8b5b      	ldrh	r3, [r3, #26]
 800eef4:	f043 0303 	orr.w	r3, r3, #3
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	835a      	strh	r2, [r3, #26]
 800eefe:	e006      	b.n	800ef0e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	8b5b      	ldrh	r3, [r3, #26]
 800ef04:	f023 0303 	bic.w	r3, r3, #3
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ef0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	371c      	adds	r7, #28
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd90      	pop	{r4, r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	080170fc 	.word	0x080170fc
 800ef20:	080178b8 	.word	0x080178b8
 800ef24:	08017150 	.word	0x08017150

0800ef28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ef28:	b590      	push	{r4, r7, lr}
 800ef2a:	b087      	sub	sp, #28
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ef30:	2300      	movs	r3, #0
 800ef32:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d106      	bne.n	800ef48 <tcp_keepalive+0x20>
 800ef3a:	4b18      	ldr	r3, [pc, #96]	; (800ef9c <tcp_keepalive+0x74>)
 800ef3c:	f640 0224 	movw	r2, #2084	; 0x824
 800ef40:	4917      	ldr	r1, [pc, #92]	; (800efa0 <tcp_keepalive+0x78>)
 800ef42:	4818      	ldr	r0, [pc, #96]	; (800efa4 <tcp_keepalive+0x7c>)
 800ef44:	f005 f932 	bl	80141ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ef48:	7dfb      	ldrb	r3, [r7, #23]
 800ef4a:	b29c      	uxth	r4, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef50:	3b01      	subs	r3, #1
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f8 faf1 	bl	800753a <lwip_htonl>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff fe66 	bl	800ec30 <tcp_output_alloc_header>
 800ef64:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d102      	bne.n	800ef72 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ef6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef70:	e010      	b.n	800ef94 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ef72:	7dfb      	ldrb	r3, [r7, #23]
 800ef74:	2200      	movs	r2, #0
 800ef76:	6939      	ldr	r1, [r7, #16]
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff fe97 	bl	800ecac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3304      	adds	r3, #4
 800ef84:	6939      	ldr	r1, [r7, #16]
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7ff fed0 	bl	800ed2c <tcp_output_control_segment>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ef90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	371c      	adds	r7, #28
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd90      	pop	{r4, r7, pc}
 800ef9c:	080170fc 	.word	0x080170fc
 800efa0:	080178d8 	.word	0x080178d8
 800efa4:	08017150 	.word	0x08017150

0800efa8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800efa8:	b590      	push	{r4, r7, lr}
 800efaa:	b08b      	sub	sp, #44	; 0x2c
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800efb0:	2300      	movs	r3, #0
 800efb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d106      	bne.n	800efca <tcp_zero_window_probe+0x22>
 800efbc:	4b4c      	ldr	r3, [pc, #304]	; (800f0f0 <tcp_zero_window_probe+0x148>)
 800efbe:	f640 024f 	movw	r2, #2127	; 0x84f
 800efc2:	494c      	ldr	r1, [pc, #304]	; (800f0f4 <tcp_zero_window_probe+0x14c>)
 800efc4:	484c      	ldr	r0, [pc, #304]	; (800f0f8 <tcp_zero_window_probe+0x150>)
 800efc6:	f005 f8f1 	bl	80141ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800efd0:	6a3b      	ldr	r3, [r7, #32]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	e086      	b.n	800f0e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800efe0:	2bff      	cmp	r3, #255	; 0xff
 800efe2:	d007      	beq.n	800eff4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800efea:	3301      	adds	r3, #1
 800efec:	b2da      	uxtb	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	899b      	ldrh	r3, [r3, #12]
 800effa:	b29b      	uxth	r3, r3
 800effc:	4618      	mov	r0, r3
 800effe:	f7f8 fa87 	bl	8007510 <lwip_htons>
 800f002:	4603      	mov	r3, r0
 800f004:	b2db      	uxtb	r3, r3
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d005      	beq.n	800f01a <tcp_zero_window_probe+0x72>
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	891b      	ldrh	r3, [r3, #8]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d101      	bne.n	800f01a <tcp_zero_window_probe+0x72>
 800f016:	2301      	movs	r3, #1
 800f018:	e000      	b.n	800f01c <tcp_zero_window_probe+0x74>
 800f01a:	2300      	movs	r3, #0
 800f01c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f01e:	7ffb      	ldrb	r3, [r7, #31]
 800f020:	2b00      	cmp	r3, #0
 800f022:	bf0c      	ite	eq
 800f024:	2301      	moveq	r3, #1
 800f026:	2300      	movne	r3, #0
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f030:	b299      	uxth	r1, r3
 800f032:	6a3b      	ldr	r3, [r7, #32]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	8bba      	ldrh	r2, [r7, #28]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff fdf8 	bl	800ec30 <tcp_output_alloc_header>
 800f040:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d102      	bne.n	800f04e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f04c:	e04c      	b.n	800f0e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f054:	7ffb      	ldrb	r3, [r7, #31]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d011      	beq.n	800f07e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	899b      	ldrh	r3, [r3, #12]
 800f05e:	b29b      	uxth	r3, r3
 800f060:	b21b      	sxth	r3, r3
 800f062:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f066:	b21c      	sxth	r4, r3
 800f068:	2011      	movs	r0, #17
 800f06a:	f7f8 fa51 	bl	8007510 <lwip_htons>
 800f06e:	4603      	mov	r3, r0
 800f070:	b21b      	sxth	r3, r3
 800f072:	4323      	orrs	r3, r4
 800f074:	b21b      	sxth	r3, r3
 800f076:	b29a      	uxth	r2, r3
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	819a      	strh	r2, [r3, #12]
 800f07c:	e010      	b.n	800f0a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	3314      	adds	r3, #20
 800f084:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	6858      	ldr	r0, [r3, #4]
 800f08a:	6a3b      	ldr	r3, [r7, #32]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	891a      	ldrh	r2, [r3, #8]
 800f090:	6a3b      	ldr	r3, [r7, #32]
 800f092:	891b      	ldrh	r3, [r3, #8]
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	b29b      	uxth	r3, r3
 800f098:	2201      	movs	r2, #1
 800f09a:	6939      	ldr	r1, [r7, #16]
 800f09c:	f7f9 ff58 	bl	8008f50 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f0a0:	6a3b      	ldr	r3, [r7, #32]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7f8 fa47 	bl	800753a <lwip_htonl>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	da02      	bge.n	800f0c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	69b9      	ldr	r1, [r7, #24]
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7ff fded 	bl	800ecac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	69b9      	ldr	r1, [r7, #24]
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f7ff fe26 	bl	800ed2c <tcp_output_control_segment>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f0e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	372c      	adds	r7, #44	; 0x2c
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd90      	pop	{r4, r7, pc}
 800f0f0:	080170fc 	.word	0x080170fc
 800f0f4:	080178f4 	.word	0x080178f4
 800f0f8:	08017150 	.word	0x08017150

0800f0fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f104:	f7fa f812 	bl	800912c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f108:	4b0a      	ldr	r3, [pc, #40]	; (800f134 <tcpip_tcp_timer+0x38>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <tcpip_tcp_timer+0x1c>
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <tcpip_tcp_timer+0x3c>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d005      	beq.n	800f124 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f118:	2200      	movs	r2, #0
 800f11a:	4908      	ldr	r1, [pc, #32]	; (800f13c <tcpip_tcp_timer+0x40>)
 800f11c:	20fa      	movs	r0, #250	; 0xfa
 800f11e:	f000 f8f3 	bl	800f308 <sys_timeout>
 800f122:	e003      	b.n	800f12c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f124:	4b06      	ldr	r3, [pc, #24]	; (800f140 <tcpip_tcp_timer+0x44>)
 800f126:	2200      	movs	r2, #0
 800f128:	601a      	str	r2, [r3, #0]
  }
}
 800f12a:	bf00      	nop
 800f12c:	bf00      	nop
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	20006e50 	.word	0x20006e50
 800f138:	20006e60 	.word	0x20006e60
 800f13c:	0800f0fd 	.word	0x0800f0fd
 800f140:	20000570 	.word	0x20000570

0800f144 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f148:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <tcp_timer_needed+0x30>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10f      	bne.n	800f170 <tcp_timer_needed+0x2c>
 800f150:	4b09      	ldr	r3, [pc, #36]	; (800f178 <tcp_timer_needed+0x34>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d103      	bne.n	800f160 <tcp_timer_needed+0x1c>
 800f158:	4b08      	ldr	r3, [pc, #32]	; (800f17c <tcp_timer_needed+0x38>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d007      	beq.n	800f170 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f160:	4b04      	ldr	r3, [pc, #16]	; (800f174 <tcp_timer_needed+0x30>)
 800f162:	2201      	movs	r2, #1
 800f164:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f166:	2200      	movs	r2, #0
 800f168:	4905      	ldr	r1, [pc, #20]	; (800f180 <tcp_timer_needed+0x3c>)
 800f16a:	20fa      	movs	r0, #250	; 0xfa
 800f16c:	f000 f8cc 	bl	800f308 <sys_timeout>
  }
}
 800f170:	bf00      	nop
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20000570 	.word	0x20000570
 800f178:	20006e50 	.word	0x20006e50
 800f17c:	20006e60 	.word	0x20006e60
 800f180:	0800f0fd 	.word	0x0800f0fd

0800f184 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b086      	sub	sp, #24
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f190:	2006      	movs	r0, #6
 800f192:	f7f8 fe7d 	bl	8007e90 <memp_malloc>
 800f196:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d109      	bne.n	800f1b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d151      	bne.n	800f248 <sys_timeout_abs+0xc4>
 800f1a4:	4b2a      	ldr	r3, [pc, #168]	; (800f250 <sys_timeout_abs+0xcc>)
 800f1a6:	22be      	movs	r2, #190	; 0xbe
 800f1a8:	492a      	ldr	r1, [pc, #168]	; (800f254 <sys_timeout_abs+0xd0>)
 800f1aa:	482b      	ldr	r0, [pc, #172]	; (800f258 <sys_timeout_abs+0xd4>)
 800f1ac:	f004 fffe 	bl	80141ac <iprintf>
    return;
 800f1b0:	e04a      	b.n	800f248 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f1ca:	4b24      	ldr	r3, [pc, #144]	; (800f25c <sys_timeout_abs+0xd8>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d103      	bne.n	800f1da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f1d2:	4a22      	ldr	r2, [pc, #136]	; (800f25c <sys_timeout_abs+0xd8>)
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	6013      	str	r3, [r2, #0]
    return;
 800f1d8:	e037      	b.n	800f24a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	685a      	ldr	r2, [r3, #4]
 800f1de:	4b1f      	ldr	r3, [pc, #124]	; (800f25c <sys_timeout_abs+0xd8>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	0fdb      	lsrs	r3, r3, #31
 800f1e8:	f003 0301 	and.w	r3, r3, #1
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d007      	beq.n	800f202 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f1f2:	4b1a      	ldr	r3, [pc, #104]	; (800f25c <sys_timeout_abs+0xd8>)
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f1fa:	4a18      	ldr	r2, [pc, #96]	; (800f25c <sys_timeout_abs+0xd8>)
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	6013      	str	r3, [r2, #0]
 800f200:	e023      	b.n	800f24a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f202:	4b16      	ldr	r3, [pc, #88]	; (800f25c <sys_timeout_abs+0xd8>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	617b      	str	r3, [r7, #20]
 800f208:	e01a      	b.n	800f240 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00b      	beq.n	800f22a <sys_timeout_abs+0xa6>
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	0fdb      	lsrs	r3, r3, #31
 800f220:	f003 0301 	and.w	r3, r3, #1
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	d007      	beq.n	800f23a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	693a      	ldr	r2, [r7, #16]
 800f236:	601a      	str	r2, [r3, #0]
        break;
 800f238:	e007      	b.n	800f24a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	617b      	str	r3, [r7, #20]
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1e1      	bne.n	800f20a <sys_timeout_abs+0x86>
 800f246:	e000      	b.n	800f24a <sys_timeout_abs+0xc6>
    return;
 800f248:	bf00      	nop
      }
    }
  }
}
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	08017918 	.word	0x08017918
 800f254:	0801794c 	.word	0x0801794c
 800f258:	0801798c 	.word	0x0801798c
 800f25c:	20000568 	.word	0x20000568

0800f260 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	4798      	blx	r3

  now = sys_now();
 800f272:	f7f6 fd3b 	bl	8005cec <sys_now>
 800f276:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <lwip_cyclic_timer+0x5c>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4413      	add	r3, r2
 800f282:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	0fdb      	lsrs	r3, r3, #31
 800f28c:	f003 0301 	and.w	r3, r3, #1
 800f290:	b2db      	uxtb	r3, r3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d009      	beq.n	800f2aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	4413      	add	r3, r2
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	4907      	ldr	r1, [pc, #28]	; (800f2c0 <lwip_cyclic_timer+0x60>)
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7ff ff6e 	bl	800f184 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f2a8:	e004      	b.n	800f2b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	4904      	ldr	r1, [pc, #16]	; (800f2c0 <lwip_cyclic_timer+0x60>)
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f7ff ff68 	bl	800f184 <sys_timeout_abs>
}
 800f2b4:	bf00      	nop
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	2000056c 	.word	0x2000056c
 800f2c0:	0800f261 	.word	0x0800f261

0800f2c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	607b      	str	r3, [r7, #4]
 800f2ce:	e00e      	b.n	800f2ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f2d0:	4a0b      	ldr	r2, [pc, #44]	; (800f300 <sys_timeouts_init+0x3c>)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	4a08      	ldr	r2, [pc, #32]	; (800f300 <sys_timeouts_init+0x3c>)
 800f2de:	4413      	add	r3, r2
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4908      	ldr	r1, [pc, #32]	; (800f304 <sys_timeouts_init+0x40>)
 800f2e4:	f000 f810 	bl	800f308 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	607b      	str	r3, [r7, #4]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b04      	cmp	r3, #4
 800f2f2:	d9ed      	bls.n	800f2d0 <sys_timeouts_init+0xc>
  }
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop
 800f2f8:	3708      	adds	r7, #8
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	08041a3c 	.word	0x08041a3c
 800f304:	0800f261 	.word	0x0800f261

0800f308 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f31a:	d306      	bcc.n	800f32a <sys_timeout+0x22>
 800f31c:	4b0a      	ldr	r3, [pc, #40]	; (800f348 <sys_timeout+0x40>)
 800f31e:	f240 1229 	movw	r2, #297	; 0x129
 800f322:	490a      	ldr	r1, [pc, #40]	; (800f34c <sys_timeout+0x44>)
 800f324:	480a      	ldr	r0, [pc, #40]	; (800f350 <sys_timeout+0x48>)
 800f326:	f004 ff41 	bl	80141ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f32a:	f7f6 fcdf 	bl	8005cec <sys_now>
 800f32e:	4602      	mov	r2, r0
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4413      	add	r3, r2
 800f334:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	68b9      	ldr	r1, [r7, #8]
 800f33a:	6978      	ldr	r0, [r7, #20]
 800f33c:	f7ff ff22 	bl	800f184 <sys_timeout_abs>
#endif
}
 800f340:	bf00      	nop
 800f342:	3718      	adds	r7, #24
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	08017918 	.word	0x08017918
 800f34c:	080179b4 	.word	0x080179b4
 800f350:	0801798c 	.word	0x0801798c

0800f354 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f35a:	f7f6 fcc7 	bl	8005cec <sys_now>
 800f35e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f360:	4b1a      	ldr	r3, [pc, #104]	; (800f3cc <sys_check_timeouts+0x78>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <sys_check_timeouts+0x1a>
 800f36a:	f7f9 f8bd 	bl	80084e8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f36e:	4b18      	ldr	r3, [pc, #96]	; (800f3d0 <sys_check_timeouts+0x7c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d022      	beq.n	800f3c0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	0fdb      	lsrs	r3, r3, #31
 800f384:	f003 0301 	and.w	r3, r3, #1
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d11a      	bne.n	800f3c4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a0f      	ldr	r2, [pc, #60]	; (800f3d0 <sys_check_timeouts+0x7c>)
 800f394:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	4a0b      	ldr	r2, [pc, #44]	; (800f3d4 <sys_check_timeouts+0x80>)
 800f3a8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	2006      	movs	r0, #6
 800f3ae:	f7f8 fdbb 	bl	8007f28 <memp_free>
    if (handler != NULL) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0d3      	beq.n	800f360 <sys_check_timeouts+0xc>
      handler(arg);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6838      	ldr	r0, [r7, #0]
 800f3bc:	4798      	blx	r3
  do {
 800f3be:	e7cf      	b.n	800f360 <sys_check_timeouts+0xc>
      return;
 800f3c0:	bf00      	nop
 800f3c2:	e000      	b.n	800f3c6 <sys_check_timeouts+0x72>
      return;
 800f3c4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	20006e48 	.word	0x20006e48
 800f3d0:	20000568 	.word	0x20000568
 800f3d4:	2000056c 	.word	0x2000056c

0800f3d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f3dc:	f004 ff74 	bl	80142c8 <rand>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	4b01      	ldr	r3, [pc, #4]	; (800f3f8 <udp_init+0x20>)
 800f3f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f3f4:	bf00      	nop
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	2000001c 	.word	0x2000001c

0800f3fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f406:	4b17      	ldr	r3, [pc, #92]	; (800f464 <udp_new_port+0x68>)
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	1c5a      	adds	r2, r3, #1
 800f40c:	b291      	uxth	r1, r2
 800f40e:	4a15      	ldr	r2, [pc, #84]	; (800f464 <udp_new_port+0x68>)
 800f410:	8011      	strh	r1, [r2, #0]
 800f412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f416:	4293      	cmp	r3, r2
 800f418:	d103      	bne.n	800f422 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f41a:	4b12      	ldr	r3, [pc, #72]	; (800f464 <udp_new_port+0x68>)
 800f41c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f420:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f422:	4b11      	ldr	r3, [pc, #68]	; (800f468 <udp_new_port+0x6c>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	603b      	str	r3, [r7, #0]
 800f428:	e011      	b.n	800f44e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	8a5a      	ldrh	r2, [r3, #18]
 800f42e:	4b0d      	ldr	r3, [pc, #52]	; (800f464 <udp_new_port+0x68>)
 800f430:	881b      	ldrh	r3, [r3, #0]
 800f432:	429a      	cmp	r2, r3
 800f434:	d108      	bne.n	800f448 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f436:	88fb      	ldrh	r3, [r7, #6]
 800f438:	3301      	adds	r3, #1
 800f43a:	80fb      	strh	r3, [r7, #6]
 800f43c:	88fb      	ldrh	r3, [r7, #6]
 800f43e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f442:	d3e0      	bcc.n	800f406 <udp_new_port+0xa>
        return 0;
 800f444:	2300      	movs	r3, #0
 800f446:	e007      	b.n	800f458 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	603b      	str	r3, [r7, #0]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1ea      	bne.n	800f42a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f454:	4b03      	ldr	r3, [pc, #12]	; (800f464 <udp_new_port+0x68>)
 800f456:	881b      	ldrh	r3, [r3, #0]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	2000001c 	.word	0x2000001c
 800f468:	20006e68 	.word	0x20006e68

0800f46c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	4613      	mov	r3, r2
 800f478:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d105      	bne.n	800f48c <udp_input_local_match+0x20>
 800f480:	4b27      	ldr	r3, [pc, #156]	; (800f520 <udp_input_local_match+0xb4>)
 800f482:	2287      	movs	r2, #135	; 0x87
 800f484:	4927      	ldr	r1, [pc, #156]	; (800f524 <udp_input_local_match+0xb8>)
 800f486:	4828      	ldr	r0, [pc, #160]	; (800f528 <udp_input_local_match+0xbc>)
 800f488:	f004 fe90 	bl	80141ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d105      	bne.n	800f49e <udp_input_local_match+0x32>
 800f492:	4b23      	ldr	r3, [pc, #140]	; (800f520 <udp_input_local_match+0xb4>)
 800f494:	2288      	movs	r2, #136	; 0x88
 800f496:	4925      	ldr	r1, [pc, #148]	; (800f52c <udp_input_local_match+0xc0>)
 800f498:	4823      	ldr	r0, [pc, #140]	; (800f528 <udp_input_local_match+0xbc>)
 800f49a:	f004 fe87 	bl	80141ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	7a1b      	ldrb	r3, [r3, #8]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00b      	beq.n	800f4be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	7a1a      	ldrb	r2, [r3, #8]
 800f4aa:	4b21      	ldr	r3, [pc, #132]	; (800f530 <udp_input_local_match+0xc4>)
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d001      	beq.n	800f4be <udp_input_local_match+0x52>
    return 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e02b      	b.n	800f516 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d018      	beq.n	800f4f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d013      	beq.n	800f4f2 <udp_input_local_match+0x86>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00f      	beq.n	800f4f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f4d2:	4b17      	ldr	r3, [pc, #92]	; (800f530 <udp_input_local_match+0xc4>)
 800f4d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4da:	d00a      	beq.n	800f4f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	4b13      	ldr	r3, [pc, #76]	; (800f530 <udp_input_local_match+0xc4>)
 800f4e2:	695b      	ldr	r3, [r3, #20]
 800f4e4:	405a      	eors	r2, r3
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	3308      	adds	r3, #8
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d110      	bne.n	800f514 <udp_input_local_match+0xa8>
          return 1;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e00f      	b.n	800f516 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d009      	beq.n	800f510 <udp_input_local_match+0xa4>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d005      	beq.n	800f510 <udp_input_local_match+0xa4>
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	4b09      	ldr	r3, [pc, #36]	; (800f530 <udp_input_local_match+0xc4>)
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d101      	bne.n	800f514 <udp_input_local_match+0xa8>
        return 1;
 800f510:	2301      	movs	r3, #1
 800f512:	e000      	b.n	800f516 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	08017a00 	.word	0x08017a00
 800f524:	08017a30 	.word	0x08017a30
 800f528:	08017a54 	.word	0x08017a54
 800f52c:	08017a7c 	.word	0x08017a7c
 800f530:	200038ec 	.word	0x200038ec

0800f534 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f534:	b590      	push	{r4, r7, lr}
 800f536:	b08d      	sub	sp, #52	; 0x34
 800f538:	af02      	add	r7, sp, #8
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d105      	bne.n	800f554 <udp_input+0x20>
 800f548:	4b7c      	ldr	r3, [pc, #496]	; (800f73c <udp_input+0x208>)
 800f54a:	22cf      	movs	r2, #207	; 0xcf
 800f54c:	497c      	ldr	r1, [pc, #496]	; (800f740 <udp_input+0x20c>)
 800f54e:	487d      	ldr	r0, [pc, #500]	; (800f744 <udp_input+0x210>)
 800f550:	f004 fe2c 	bl	80141ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d105      	bne.n	800f566 <udp_input+0x32>
 800f55a:	4b78      	ldr	r3, [pc, #480]	; (800f73c <udp_input+0x208>)
 800f55c:	22d0      	movs	r2, #208	; 0xd0
 800f55e:	497a      	ldr	r1, [pc, #488]	; (800f748 <udp_input+0x214>)
 800f560:	4878      	ldr	r0, [pc, #480]	; (800f744 <udp_input+0x210>)
 800f562:	f004 fe23 	bl	80141ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	895b      	ldrh	r3, [r3, #10]
 800f56a:	2b07      	cmp	r3, #7
 800f56c:	d803      	bhi.n	800f576 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f7f9 faf4 	bl	8008b5c <pbuf_free>
    goto end;
 800f574:	e0de      	b.n	800f734 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f57c:	4b73      	ldr	r3, [pc, #460]	; (800f74c <udp_input+0x218>)
 800f57e:	695b      	ldr	r3, [r3, #20]
 800f580:	4a72      	ldr	r2, [pc, #456]	; (800f74c <udp_input+0x218>)
 800f582:	6812      	ldr	r2, [r2, #0]
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f003 fdcc 	bl	8013124 <ip4_addr_isbroadcast_u32>
 800f58c:	4603      	mov	r3, r0
 800f58e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	b29b      	uxth	r3, r3
 800f596:	4618      	mov	r0, r3
 800f598:	f7f7 ffba 	bl	8007510 <lwip_htons>
 800f59c:	4603      	mov	r3, r0
 800f59e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	885b      	ldrh	r3, [r3, #2]
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7f7 ffb2 	bl	8007510 <lwip_htons>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5bc:	4b64      	ldr	r3, [pc, #400]	; (800f750 <udp_input+0x21c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	627b      	str	r3, [r7, #36]	; 0x24
 800f5c2:	e054      	b.n	800f66e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	8a5b      	ldrh	r3, [r3, #18]
 800f5c8:	89fa      	ldrh	r2, [r7, #14]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d14a      	bne.n	800f664 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f5ce:	7cfb      	ldrb	r3, [r7, #19]
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	6839      	ldr	r1, [r7, #0]
 800f5d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5d6:	f7ff ff49 	bl	800f46c <udp_input_local_match>
 800f5da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d041      	beq.n	800f664 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	7c1b      	ldrb	r3, [r3, #16]
 800f5e4:	f003 0304 	and.w	r3, r3, #4
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d11d      	bne.n	800f628 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d102      	bne.n	800f5f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f4:	61fb      	str	r3, [r7, #28]
 800f5f6:	e017      	b.n	800f628 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f5f8:	7cfb      	ldrb	r3, [r7, #19]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d014      	beq.n	800f628 <udp_input+0xf4>
 800f5fe:	4b53      	ldr	r3, [pc, #332]	; (800f74c <udp_input+0x218>)
 800f600:	695b      	ldr	r3, [r3, #20]
 800f602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f606:	d10f      	bne.n	800f628 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	3304      	adds	r3, #4
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	429a      	cmp	r2, r3
 800f614:	d008      	beq.n	800f628 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	3304      	adds	r3, #4
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	429a      	cmp	r2, r3
 800f622:	d101      	bne.n	800f628 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	8a9b      	ldrh	r3, [r3, #20]
 800f62c:	8a3a      	ldrh	r2, [r7, #16]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d118      	bne.n	800f664 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f634:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f636:	2b00      	cmp	r3, #0
 800f638:	d005      	beq.n	800f646 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	4b43      	ldr	r3, [pc, #268]	; (800f74c <udp_input+0x218>)
 800f640:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f642:	429a      	cmp	r2, r3
 800f644:	d10e      	bne.n	800f664 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f646:	6a3b      	ldr	r3, [r7, #32]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d014      	beq.n	800f676 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64e:	68da      	ldr	r2, [r3, #12]
 800f650:	6a3b      	ldr	r3, [r7, #32]
 800f652:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f654:	4b3e      	ldr	r3, [pc, #248]	; (800f750 <udp_input+0x21c>)
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f65c:	4a3c      	ldr	r2, [pc, #240]	; (800f750 <udp_input+0x21c>)
 800f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f660:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f662:	e008      	b.n	800f676 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f666:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	627b      	str	r3, [r7, #36]	; 0x24
 800f66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1a7      	bne.n	800f5c4 <udp_input+0x90>
 800f674:	e000      	b.n	800f678 <udp_input+0x144>
        break;
 800f676:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d101      	bne.n	800f682 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f684:	2b00      	cmp	r3, #0
 800f686:	d002      	beq.n	800f68e <udp_input+0x15a>
    for_us = 1;
 800f688:	2301      	movs	r3, #1
 800f68a:	76fb      	strb	r3, [r7, #27]
 800f68c:	e00a      	b.n	800f6a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	3304      	adds	r3, #4
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	4b2d      	ldr	r3, [pc, #180]	; (800f74c <udp_input+0x218>)
 800f696:	695b      	ldr	r3, [r3, #20]
 800f698:	429a      	cmp	r2, r3
 800f69a:	bf0c      	ite	eq
 800f69c:	2301      	moveq	r3, #1
 800f69e:	2300      	movne	r3, #0
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f6a4:	7efb      	ldrb	r3, [r7, #27]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d041      	beq.n	800f72e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f6aa:	2108      	movs	r1, #8
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7f9 f9cf 	bl	8008a50 <pbuf_remove_header>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00a      	beq.n	800f6ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f6b8:	4b20      	ldr	r3, [pc, #128]	; (800f73c <udp_input+0x208>)
 800f6ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f6be:	4925      	ldr	r1, [pc, #148]	; (800f754 <udp_input+0x220>)
 800f6c0:	4820      	ldr	r0, [pc, #128]	; (800f744 <udp_input+0x210>)
 800f6c2:	f004 fd73 	bl	80141ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7f9 fa48 	bl	8008b5c <pbuf_free>
      goto end;
 800f6cc:	e032      	b.n	800f734 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d012      	beq.n	800f6fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d6:	699b      	ldr	r3, [r3, #24]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00a      	beq.n	800f6f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6de:	699c      	ldr	r4, [r3, #24]
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e2:	69d8      	ldr	r0, [r3, #28]
 800f6e4:	8a3b      	ldrh	r3, [r7, #16]
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	4b1b      	ldr	r3, [pc, #108]	; (800f758 <udp_input+0x224>)
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f6f0:	e021      	b.n	800f736 <udp_input+0x202>
        pbuf_free(p);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7f9 fa32 	bl	8008b5c <pbuf_free>
        goto end;
 800f6f8:	e01c      	b.n	800f734 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f6fa:	7cfb      	ldrb	r3, [r7, #19]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d112      	bne.n	800f726 <udp_input+0x1f2>
 800f700:	4b12      	ldr	r3, [pc, #72]	; (800f74c <udp_input+0x218>)
 800f702:	695b      	ldr	r3, [r3, #20]
 800f704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f708:	2be0      	cmp	r3, #224	; 0xe0
 800f70a:	d00c      	beq.n	800f726 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f70c:	4b0f      	ldr	r3, [pc, #60]	; (800f74c <udp_input+0x218>)
 800f70e:	899b      	ldrh	r3, [r3, #12]
 800f710:	3308      	adds	r3, #8
 800f712:	b29b      	uxth	r3, r3
 800f714:	b21b      	sxth	r3, r3
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7f9 fa0c 	bl	8008b36 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f71e:	2103      	movs	r1, #3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f003 f9c1 	bl	8012aa8 <icmp_dest_unreach>
      pbuf_free(p);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7f9 fa18 	bl	8008b5c <pbuf_free>
  return;
 800f72c:	e003      	b.n	800f736 <udp_input+0x202>
    pbuf_free(p);
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f7f9 fa14 	bl	8008b5c <pbuf_free>
  return;
 800f734:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f736:	372c      	adds	r7, #44	; 0x2c
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd90      	pop	{r4, r7, pc}
 800f73c:	08017a00 	.word	0x08017a00
 800f740:	08017aa4 	.word	0x08017aa4
 800f744:	08017a54 	.word	0x08017a54
 800f748:	08017abc 	.word	0x08017abc
 800f74c:	200038ec 	.word	0x200038ec
 800f750:	20006e68 	.word	0x20006e68
 800f754:	08017ad8 	.word	0x08017ad8
 800f758:	200038fc 	.word	0x200038fc

0800f75c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b088      	sub	sp, #32
 800f760:	af02      	add	r7, sp, #8
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
 800f768:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d109      	bne.n	800f784 <udp_sendto_if+0x28>
 800f770:	4b2e      	ldr	r3, [pc, #184]	; (800f82c <udp_sendto_if+0xd0>)
 800f772:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f776:	492e      	ldr	r1, [pc, #184]	; (800f830 <udp_sendto_if+0xd4>)
 800f778:	482e      	ldr	r0, [pc, #184]	; (800f834 <udp_sendto_if+0xd8>)
 800f77a:	f004 fd17 	bl	80141ac <iprintf>
 800f77e:	f06f 030f 	mvn.w	r3, #15
 800f782:	e04f      	b.n	800f824 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d109      	bne.n	800f79e <udp_sendto_if+0x42>
 800f78a:	4b28      	ldr	r3, [pc, #160]	; (800f82c <udp_sendto_if+0xd0>)
 800f78c:	f240 2281 	movw	r2, #641	; 0x281
 800f790:	4929      	ldr	r1, [pc, #164]	; (800f838 <udp_sendto_if+0xdc>)
 800f792:	4828      	ldr	r0, [pc, #160]	; (800f834 <udp_sendto_if+0xd8>)
 800f794:	f004 fd0a 	bl	80141ac <iprintf>
 800f798:	f06f 030f 	mvn.w	r3, #15
 800f79c:	e042      	b.n	800f824 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d109      	bne.n	800f7b8 <udp_sendto_if+0x5c>
 800f7a4:	4b21      	ldr	r3, [pc, #132]	; (800f82c <udp_sendto_if+0xd0>)
 800f7a6:	f240 2282 	movw	r2, #642	; 0x282
 800f7aa:	4924      	ldr	r1, [pc, #144]	; (800f83c <udp_sendto_if+0xe0>)
 800f7ac:	4821      	ldr	r0, [pc, #132]	; (800f834 <udp_sendto_if+0xd8>)
 800f7ae:	f004 fcfd 	bl	80141ac <iprintf>
 800f7b2:	f06f 030f 	mvn.w	r3, #15
 800f7b6:	e035      	b.n	800f824 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f7b8:	6a3b      	ldr	r3, [r7, #32]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d109      	bne.n	800f7d2 <udp_sendto_if+0x76>
 800f7be:	4b1b      	ldr	r3, [pc, #108]	; (800f82c <udp_sendto_if+0xd0>)
 800f7c0:	f240 2283 	movw	r2, #643	; 0x283
 800f7c4:	491e      	ldr	r1, [pc, #120]	; (800f840 <udp_sendto_if+0xe4>)
 800f7c6:	481b      	ldr	r0, [pc, #108]	; (800f834 <udp_sendto_if+0xd8>)
 800f7c8:	f004 fcf0 	bl	80141ac <iprintf>
 800f7cc:	f06f 030f 	mvn.w	r3, #15
 800f7d0:	e028      	b.n	800f824 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d009      	beq.n	800f7ec <udp_sendto_if+0x90>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d005      	beq.n	800f7ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7e8:	2be0      	cmp	r3, #224	; 0xe0
 800f7ea:	d103      	bne.n	800f7f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f7ec:	6a3b      	ldr	r3, [r7, #32]
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	617b      	str	r3, [r7, #20]
 800f7f2:	e00b      	b.n	800f80c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	6a3b      	ldr	r3, [r7, #32]
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d002      	beq.n	800f808 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f802:	f06f 0303 	mvn.w	r3, #3
 800f806:	e00d      	b.n	800f824 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f80c:	887a      	ldrh	r2, [r7, #2]
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	9301      	str	r3, [sp, #4]
 800f812:	6a3b      	ldr	r3, [r7, #32]
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	4613      	mov	r3, r2
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	68b9      	ldr	r1, [r7, #8]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f000 f811 	bl	800f844 <udp_sendto_if_src>
 800f822:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f824:	4618      	mov	r0, r3
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	08017a00 	.word	0x08017a00
 800f830:	08017b74 	.word	0x08017b74
 800f834:	08017a54 	.word	0x08017a54
 800f838:	08017b90 	.word	0x08017b90
 800f83c:	08017bac 	.word	0x08017bac
 800f840:	08017bcc 	.word	0x08017bcc

0800f844 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b08c      	sub	sp, #48	; 0x30
 800f848:	af04      	add	r7, sp, #16
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d109      	bne.n	800f86c <udp_sendto_if_src+0x28>
 800f858:	4b65      	ldr	r3, [pc, #404]	; (800f9f0 <udp_sendto_if_src+0x1ac>)
 800f85a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f85e:	4965      	ldr	r1, [pc, #404]	; (800f9f4 <udp_sendto_if_src+0x1b0>)
 800f860:	4865      	ldr	r0, [pc, #404]	; (800f9f8 <udp_sendto_if_src+0x1b4>)
 800f862:	f004 fca3 	bl	80141ac <iprintf>
 800f866:	f06f 030f 	mvn.w	r3, #15
 800f86a:	e0bc      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d109      	bne.n	800f886 <udp_sendto_if_src+0x42>
 800f872:	4b5f      	ldr	r3, [pc, #380]	; (800f9f0 <udp_sendto_if_src+0x1ac>)
 800f874:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f878:	4960      	ldr	r1, [pc, #384]	; (800f9fc <udp_sendto_if_src+0x1b8>)
 800f87a:	485f      	ldr	r0, [pc, #380]	; (800f9f8 <udp_sendto_if_src+0x1b4>)
 800f87c:	f004 fc96 	bl	80141ac <iprintf>
 800f880:	f06f 030f 	mvn.w	r3, #15
 800f884:	e0af      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d109      	bne.n	800f8a0 <udp_sendto_if_src+0x5c>
 800f88c:	4b58      	ldr	r3, [pc, #352]	; (800f9f0 <udp_sendto_if_src+0x1ac>)
 800f88e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f892:	495b      	ldr	r1, [pc, #364]	; (800fa00 <udp_sendto_if_src+0x1bc>)
 800f894:	4858      	ldr	r0, [pc, #352]	; (800f9f8 <udp_sendto_if_src+0x1b4>)
 800f896:	f004 fc89 	bl	80141ac <iprintf>
 800f89a:	f06f 030f 	mvn.w	r3, #15
 800f89e:	e0a2      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d109      	bne.n	800f8ba <udp_sendto_if_src+0x76>
 800f8a6:	4b52      	ldr	r3, [pc, #328]	; (800f9f0 <udp_sendto_if_src+0x1ac>)
 800f8a8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f8ac:	4955      	ldr	r1, [pc, #340]	; (800fa04 <udp_sendto_if_src+0x1c0>)
 800f8ae:	4852      	ldr	r0, [pc, #328]	; (800f9f8 <udp_sendto_if_src+0x1b4>)
 800f8b0:	f004 fc7c 	bl	80141ac <iprintf>
 800f8b4:	f06f 030f 	mvn.w	r3, #15
 800f8b8:	e095      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d109      	bne.n	800f8d4 <udp_sendto_if_src+0x90>
 800f8c0:	4b4b      	ldr	r3, [pc, #300]	; (800f9f0 <udp_sendto_if_src+0x1ac>)
 800f8c2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f8c6:	4950      	ldr	r1, [pc, #320]	; (800fa08 <udp_sendto_if_src+0x1c4>)
 800f8c8:	484b      	ldr	r0, [pc, #300]	; (800f9f8 <udp_sendto_if_src+0x1b4>)
 800f8ca:	f004 fc6f 	bl	80141ac <iprintf>
 800f8ce:	f06f 030f 	mvn.w	r3, #15
 800f8d2:	e088      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	8a5b      	ldrh	r3, [r3, #18]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d10f      	bne.n	800f8fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f8dc:	68f9      	ldr	r1, [r7, #12]
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	8a5b      	ldrh	r3, [r3, #18]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f000 f893 	bl	800fa10 <udp_bind>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f8ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f8f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8fa:	e074      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	891b      	ldrh	r3, [r3, #8]
 800f900:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f904:	4293      	cmp	r3, r2
 800f906:	d902      	bls.n	800f90e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f90c:	e06b      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f90e:	2108      	movs	r1, #8
 800f910:	68b8      	ldr	r0, [r7, #8]
 800f912:	f7f9 f88d 	bl	8008a30 <pbuf_add_header>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d015      	beq.n	800f948 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f91c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f920:	2108      	movs	r1, #8
 800f922:	2022      	movs	r0, #34	; 0x22
 800f924:	f7f8 fe36 	bl	8008594 <pbuf_alloc>
 800f928:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d102      	bne.n	800f936 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f934:	e057      	b.n	800f9e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	891b      	ldrh	r3, [r3, #8]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d006      	beq.n	800f94c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f93e:	68b9      	ldr	r1, [r7, #8]
 800f940:	69f8      	ldr	r0, [r7, #28]
 800f942:	f7f9 fa23 	bl	8008d8c <pbuf_chain>
 800f946:	e001      	b.n	800f94c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	895b      	ldrh	r3, [r3, #10]
 800f950:	2b07      	cmp	r3, #7
 800f952:	d806      	bhi.n	800f962 <udp_sendto_if_src+0x11e>
 800f954:	4b26      	ldr	r3, [pc, #152]	; (800f9f0 <udp_sendto_if_src+0x1ac>)
 800f956:	f240 320d 	movw	r2, #781	; 0x30d
 800f95a:	492c      	ldr	r1, [pc, #176]	; (800fa0c <udp_sendto_if_src+0x1c8>)
 800f95c:	4826      	ldr	r0, [pc, #152]	; (800f9f8 <udp_sendto_if_src+0x1b4>)
 800f95e:	f004 fc25 	bl	80141ac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	8a5b      	ldrh	r3, [r3, #18]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7f7 fdcf 	bl	8007510 <lwip_htons>
 800f972:	4603      	mov	r3, r0
 800f974:	461a      	mov	r2, r3
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f97a:	887b      	ldrh	r3, [r7, #2]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7f7 fdc7 	bl	8007510 <lwip_htons>
 800f982:	4603      	mov	r3, r0
 800f984:	461a      	mov	r2, r3
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	2200      	movs	r2, #0
 800f98e:	719a      	strb	r2, [r3, #6]
 800f990:	2200      	movs	r2, #0
 800f992:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	891b      	ldrh	r3, [r3, #8]
 800f998:	4618      	mov	r0, r3
 800f99a:	f7f7 fdb9 	bl	8007510 <lwip_htons>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f9a6:	2311      	movs	r3, #17
 800f9a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	7adb      	ldrb	r3, [r3, #11]
 800f9ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	7a9b      	ldrb	r3, [r3, #10]
 800f9b4:	7cb9      	ldrb	r1, [r7, #18]
 800f9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9b8:	9202      	str	r2, [sp, #8]
 800f9ba:	7cfa      	ldrb	r2, [r7, #19]
 800f9bc:	9201      	str	r2, [sp, #4]
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9c6:	69f8      	ldr	r0, [r7, #28]
 800f9c8:	f003 fafe 	bl	8012fc8 <ip4_output_if_src>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f9d0:	69fa      	ldr	r2, [r7, #28]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d004      	beq.n	800f9e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f9d8:	69f8      	ldr	r0, [r7, #28]
 800f9da:	f7f9 f8bf 	bl	8008b5c <pbuf_free>
    q = NULL;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f9e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3720      	adds	r7, #32
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	08017a00 	.word	0x08017a00
 800f9f4:	08017bec 	.word	0x08017bec
 800f9f8:	08017a54 	.word	0x08017a54
 800f9fc:	08017c0c 	.word	0x08017c0c
 800fa00:	08017c2c 	.word	0x08017c2c
 800fa04:	08017c50 	.word	0x08017c50
 800fa08:	08017c74 	.word	0x08017c74
 800fa0c:	08017c98 	.word	0x08017c98

0800fa10 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fa24:	4b39      	ldr	r3, [pc, #228]	; (800fb0c <udp_bind+0xfc>)
 800fa26:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d109      	bne.n	800fa42 <udp_bind+0x32>
 800fa2e:	4b38      	ldr	r3, [pc, #224]	; (800fb10 <udp_bind+0x100>)
 800fa30:	f240 32b7 	movw	r2, #951	; 0x3b7
 800fa34:	4937      	ldr	r1, [pc, #220]	; (800fb14 <udp_bind+0x104>)
 800fa36:	4838      	ldr	r0, [pc, #224]	; (800fb18 <udp_bind+0x108>)
 800fa38:	f004 fbb8 	bl	80141ac <iprintf>
 800fa3c:	f06f 030f 	mvn.w	r3, #15
 800fa40:	e060      	b.n	800fb04 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa46:	4b35      	ldr	r3, [pc, #212]	; (800fb1c <udp_bind+0x10c>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	e009      	b.n	800fa62 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d102      	bne.n	800fa5c <udp_bind+0x4c>
      rebind = 1;
 800fa56:	2301      	movs	r3, #1
 800fa58:	74fb      	strb	r3, [r7, #19]
      break;
 800fa5a:	e005      	b.n	800fa68 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	617b      	str	r3, [r7, #20]
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d1f2      	bne.n	800fa4e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800fa68:	88fb      	ldrh	r3, [r7, #6]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d109      	bne.n	800fa82 <udp_bind+0x72>
    port = udp_new_port();
 800fa6e:	f7ff fcc5 	bl	800f3fc <udp_new_port>
 800fa72:	4603      	mov	r3, r0
 800fa74:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fa76:	88fb      	ldrh	r3, [r7, #6]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d12c      	bne.n	800fad6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800fa7c:	f06f 0307 	mvn.w	r3, #7
 800fa80:	e040      	b.n	800fb04 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa82:	4b26      	ldr	r3, [pc, #152]	; (800fb1c <udp_bind+0x10c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	617b      	str	r3, [r7, #20]
 800fa88:	e022      	b.n	800fad0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d01b      	beq.n	800faca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	8a5b      	ldrh	r3, [r3, #18]
 800fa96:	88fa      	ldrh	r2, [r7, #6]
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d116      	bne.n	800faca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d00d      	beq.n	800fac4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00a      	beq.n	800fac4 <udp_bind+0xb4>
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d006      	beq.n	800fac4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800fab6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d003      	beq.n	800fac4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d102      	bne.n	800faca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800fac4:	f06f 0307 	mvn.w	r3, #7
 800fac8:	e01c      	b.n	800fb04 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	617b      	str	r3, [r7, #20]
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1d9      	bne.n	800fa8a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <udp_bind+0xd2>
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	e000      	b.n	800fae4 <udp_bind+0xd4>
 800fae2:	2300      	movs	r3, #0
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	88fa      	ldrh	r2, [r7, #6]
 800faec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800faee:	7cfb      	ldrb	r3, [r7, #19]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d106      	bne.n	800fb02 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800faf4:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <udp_bind+0x10c>)
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800fafc:	4a07      	ldr	r2, [pc, #28]	; (800fb1c <udp_bind+0x10c>)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	08041a64 	.word	0x08041a64
 800fb10:	08017a00 	.word	0x08017a00
 800fb14:	08017cc8 	.word	0x08017cc8
 800fb18:	08017a54 	.word	0x08017a54
 800fb1c:	20006e68 	.word	0x20006e68

0800fb20 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d109      	bne.n	800fb48 <udp_connect+0x28>
 800fb34:	4b2c      	ldr	r3, [pc, #176]	; (800fbe8 <udp_connect+0xc8>)
 800fb36:	f240 4235 	movw	r2, #1077	; 0x435
 800fb3a:	492c      	ldr	r1, [pc, #176]	; (800fbec <udp_connect+0xcc>)
 800fb3c:	482c      	ldr	r0, [pc, #176]	; (800fbf0 <udp_connect+0xd0>)
 800fb3e:	f004 fb35 	bl	80141ac <iprintf>
 800fb42:	f06f 030f 	mvn.w	r3, #15
 800fb46:	e04b      	b.n	800fbe0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d109      	bne.n	800fb62 <udp_connect+0x42>
 800fb4e:	4b26      	ldr	r3, [pc, #152]	; (800fbe8 <udp_connect+0xc8>)
 800fb50:	f240 4236 	movw	r2, #1078	; 0x436
 800fb54:	4927      	ldr	r1, [pc, #156]	; (800fbf4 <udp_connect+0xd4>)
 800fb56:	4826      	ldr	r0, [pc, #152]	; (800fbf0 <udp_connect+0xd0>)
 800fb58:	f004 fb28 	bl	80141ac <iprintf>
 800fb5c:	f06f 030f 	mvn.w	r3, #15
 800fb60:	e03e      	b.n	800fbe0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	8a5b      	ldrh	r3, [r3, #18]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d10f      	bne.n	800fb8a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fb6a:	68f9      	ldr	r1, [r7, #12]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	8a5b      	ldrh	r3, [r3, #18]
 800fb70:	461a      	mov	r2, r3
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7ff ff4c 	bl	800fa10 <udp_bind>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800fb7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <udp_connect+0x6a>
      return err;
 800fb84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb88:	e02a      	b.n	800fbe0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <udp_connect+0x76>
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	e000      	b.n	800fb98 <udp_connect+0x78>
 800fb96:	2300      	movs	r3, #0
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	88fa      	ldrh	r2, [r7, #6]
 800fba0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	7c1b      	ldrb	r3, [r3, #16]
 800fba6:	f043 0304 	orr.w	r3, r3, #4
 800fbaa:	b2da      	uxtb	r2, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fbb0:	4b11      	ldr	r3, [pc, #68]	; (800fbf8 <udp_connect+0xd8>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	617b      	str	r3, [r7, #20]
 800fbb6:	e008      	b.n	800fbca <udp_connect+0xaa>
    if (pcb == ipcb) {
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d101      	bne.n	800fbc4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	e00d      	b.n	800fbe0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	617b      	str	r3, [r7, #20]
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1f3      	bne.n	800fbb8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800fbd0:	4b09      	ldr	r3, [pc, #36]	; (800fbf8 <udp_connect+0xd8>)
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800fbd8:	4a07      	ldr	r2, [pc, #28]	; (800fbf8 <udp_connect+0xd8>)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3718      	adds	r7, #24
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	08017a00 	.word	0x08017a00
 800fbec:	08017ce0 	.word	0x08017ce0
 800fbf0:	08017a54 	.word	0x08017a54
 800fbf4:	08017cfc 	.word	0x08017cfc
 800fbf8:	20006e68 	.word	0x20006e68

0800fbfc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d107      	bne.n	800fc1e <udp_recv+0x22>
 800fc0e:	4b08      	ldr	r3, [pc, #32]	; (800fc30 <udp_recv+0x34>)
 800fc10:	f240 428a 	movw	r2, #1162	; 0x48a
 800fc14:	4907      	ldr	r1, [pc, #28]	; (800fc34 <udp_recv+0x38>)
 800fc16:	4808      	ldr	r0, [pc, #32]	; (800fc38 <udp_recv+0x3c>)
 800fc18:	f004 fac8 	bl	80141ac <iprintf>
 800fc1c:	e005      	b.n	800fc2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	61da      	str	r2, [r3, #28]
}
 800fc2a:	3710      	adds	r7, #16
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	08017a00 	.word	0x08017a00
 800fc34:	08017d34 	.word	0x08017d34
 800fc38:	08017a54 	.word	0x08017a54

0800fc3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d107      	bne.n	800fc5a <udp_remove+0x1e>
 800fc4a:	4b19      	ldr	r3, [pc, #100]	; (800fcb0 <udp_remove+0x74>)
 800fc4c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800fc50:	4918      	ldr	r1, [pc, #96]	; (800fcb4 <udp_remove+0x78>)
 800fc52:	4819      	ldr	r0, [pc, #100]	; (800fcb8 <udp_remove+0x7c>)
 800fc54:	f004 faaa 	bl	80141ac <iprintf>
 800fc58:	e026      	b.n	800fca8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800fc5a:	4b18      	ldr	r3, [pc, #96]	; (800fcbc <udp_remove+0x80>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d105      	bne.n	800fc70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800fc64:	4b15      	ldr	r3, [pc, #84]	; (800fcbc <udp_remove+0x80>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	4a14      	ldr	r2, [pc, #80]	; (800fcbc <udp_remove+0x80>)
 800fc6c:	6013      	str	r3, [r2, #0]
 800fc6e:	e017      	b.n	800fca0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fc70:	4b12      	ldr	r3, [pc, #72]	; (800fcbc <udp_remove+0x80>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	60fb      	str	r3, [r7, #12]
 800fc76:	e010      	b.n	800fc9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d009      	beq.n	800fc94 <udp_remove+0x58>
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d104      	bne.n	800fc94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	68da      	ldr	r2, [r3, #12]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	60da      	str	r2, [r3, #12]
        break;
 800fc92:	e005      	b.n	800fca0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	60fb      	str	r3, [r7, #12]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1eb      	bne.n	800fc78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800fca0:	6879      	ldr	r1, [r7, #4]
 800fca2:	2000      	movs	r0, #0
 800fca4:	f7f8 f940 	bl	8007f28 <memp_free>
}
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	08017a00 	.word	0x08017a00
 800fcb4:	08017d4c 	.word	0x08017d4c
 800fcb8:	08017a54 	.word	0x08017a54
 800fcbc:	20006e68 	.word	0x20006e68

0800fcc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	f7f8 f8e2 	bl	8007e90 <memp_malloc>
 800fccc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d007      	beq.n	800fce4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800fcd4:	2220      	movs	r2, #32
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f004 fa5f 	bl	801419c <memset>
    pcb->ttl = UDP_TTL;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	22ff      	movs	r2, #255	; 0xff
 800fce2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800fce4:	687b      	ldr	r3, [r7, #4]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
	...

0800fcf0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d01e      	beq.n	800fd3e <udp_netif_ip_addr_changed+0x4e>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d01a      	beq.n	800fd3e <udp_netif_ip_addr_changed+0x4e>
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d017      	beq.n	800fd3e <udp_netif_ip_addr_changed+0x4e>
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d013      	beq.n	800fd3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fd16:	4b0d      	ldr	r3, [pc, #52]	; (800fd4c <udp_netif_ip_addr_changed+0x5c>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	e00c      	b.n	800fd38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d103      	bne.n	800fd32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	60fb      	str	r3, [r7, #12]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1ef      	bne.n	800fd1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fd3e:	bf00      	nop
 800fd40:	3714      	adds	r7, #20
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	20006e68 	.word	0x20006e68

0800fd50 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fd54:	4b20      	ldr	r3, [pc, #128]	; (800fdd8 <dhcp_inc_pcb_refcount+0x88>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d133      	bne.n	800fdc4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fd5c:	4b1f      	ldr	r3, [pc, #124]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d005      	beq.n	800fd70 <dhcp_inc_pcb_refcount+0x20>
 800fd64:	4b1e      	ldr	r3, [pc, #120]	; (800fde0 <dhcp_inc_pcb_refcount+0x90>)
 800fd66:	22e5      	movs	r2, #229	; 0xe5
 800fd68:	491e      	ldr	r1, [pc, #120]	; (800fde4 <dhcp_inc_pcb_refcount+0x94>)
 800fd6a:	481f      	ldr	r0, [pc, #124]	; (800fde8 <dhcp_inc_pcb_refcount+0x98>)
 800fd6c:	f004 fa1e 	bl	80141ac <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fd70:	f7ff ffa6 	bl	800fcc0 <udp_new>
 800fd74:	4603      	mov	r3, r0
 800fd76:	4a19      	ldr	r2, [pc, #100]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fd78:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800fd7a:	4b18      	ldr	r3, [pc, #96]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d102      	bne.n	800fd88 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fd82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd86:	e024      	b.n	800fdd2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fd88:	4b14      	ldr	r3, [pc, #80]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	7a5a      	ldrb	r2, [r3, #9]
 800fd8e:	4b13      	ldr	r3, [pc, #76]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f042 0220 	orr.w	r2, r2, #32
 800fd96:	b2d2      	uxtb	r2, r2
 800fd98:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800fd9a:	4b10      	ldr	r3, [pc, #64]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2244      	movs	r2, #68	; 0x44
 800fda0:	4912      	ldr	r1, [pc, #72]	; (800fdec <dhcp_inc_pcb_refcount+0x9c>)
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7ff fe34 	bl	800fa10 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800fda8:	4b0c      	ldr	r3, [pc, #48]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2243      	movs	r2, #67	; 0x43
 800fdae:	490f      	ldr	r1, [pc, #60]	; (800fdec <dhcp_inc_pcb_refcount+0x9c>)
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff feb5 	bl	800fb20 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800fdb6:	4b09      	ldr	r3, [pc, #36]	; (800fddc <dhcp_inc_pcb_refcount+0x8c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	490c      	ldr	r1, [pc, #48]	; (800fdf0 <dhcp_inc_pcb_refcount+0xa0>)
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff ff1c 	bl	800fbfc <udp_recv>
  }

  dhcp_pcb_refcount++;
 800fdc4:	4b04      	ldr	r3, [pc, #16]	; (800fdd8 <dhcp_inc_pcb_refcount+0x88>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	3301      	adds	r3, #1
 800fdca:	b2da      	uxtb	r2, r3
 800fdcc:	4b02      	ldr	r3, [pc, #8]	; (800fdd8 <dhcp_inc_pcb_refcount+0x88>)
 800fdce:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	bd80      	pop	{r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	20000578 	.word	0x20000578
 800fddc:	20000574 	.word	0x20000574
 800fde0:	08017d64 	.word	0x08017d64
 800fde4:	08017d9c 	.word	0x08017d9c
 800fde8:	08017dc4 	.word	0x08017dc4
 800fdec:	08041a64 	.word	0x08041a64
 800fdf0:	08011611 	.word	0x08011611

0800fdf4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fdf8:	4b0e      	ldr	r3, [pc, #56]	; (800fe34 <dhcp_dec_pcb_refcount+0x40>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d105      	bne.n	800fe0c <dhcp_dec_pcb_refcount+0x18>
 800fe00:	4b0d      	ldr	r3, [pc, #52]	; (800fe38 <dhcp_dec_pcb_refcount+0x44>)
 800fe02:	22ff      	movs	r2, #255	; 0xff
 800fe04:	490d      	ldr	r1, [pc, #52]	; (800fe3c <dhcp_dec_pcb_refcount+0x48>)
 800fe06:	480e      	ldr	r0, [pc, #56]	; (800fe40 <dhcp_dec_pcb_refcount+0x4c>)
 800fe08:	f004 f9d0 	bl	80141ac <iprintf>
  dhcp_pcb_refcount--;
 800fe0c:	4b09      	ldr	r3, [pc, #36]	; (800fe34 <dhcp_dec_pcb_refcount+0x40>)
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	3b01      	subs	r3, #1
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	4b07      	ldr	r3, [pc, #28]	; (800fe34 <dhcp_dec_pcb_refcount+0x40>)
 800fe16:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fe18:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <dhcp_dec_pcb_refcount+0x40>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d107      	bne.n	800fe30 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fe20:	4b08      	ldr	r3, [pc, #32]	; (800fe44 <dhcp_dec_pcb_refcount+0x50>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff ff09 	bl	800fc3c <udp_remove>
    dhcp_pcb = NULL;
 800fe2a:	4b06      	ldr	r3, [pc, #24]	; (800fe44 <dhcp_dec_pcb_refcount+0x50>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	601a      	str	r2, [r3, #0]
  }
}
 800fe30:	bf00      	nop
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	20000578 	.word	0x20000578
 800fe38:	08017d64 	.word	0x08017d64
 800fe3c:	08017dec 	.word	0x08017dec
 800fe40:	08017dc4 	.word	0x08017dc4
 800fe44:	20000574 	.word	0x20000574

0800fe48 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe54:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fe56:	210c      	movs	r1, #12
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f001 f81b 	bl	8010e94 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fe5e:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <dhcp_handle_nak+0x30>)
 800fe60:	4a05      	ldr	r2, [pc, #20]	; (800fe78 <dhcp_handle_nak+0x30>)
 800fe62:	4905      	ldr	r1, [pc, #20]	; (800fe78 <dhcp_handle_nak+0x30>)
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7f8 fa01 	bl	800826c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 fc0e 	bl	801068c <dhcp_discover>
}
 800fe70:	bf00      	nop
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	08041a64 	.word	0x08041a64

0800fe7c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe88:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fe8a:	2108      	movs	r1, #8
 800fe8c:	68f8      	ldr	r0, [r7, #12]
 800fe8e:	f001 f801 	bl	8010e94 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	331c      	adds	r3, #28
 800fe96:	2200      	movs	r2, #0
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f002 fb02 	bl	80124a4 <etharp_query>
 800fea0:	4603      	mov	r3, r0
 800fea2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	799b      	ldrb	r3, [r3, #6]
 800fea8:	2bff      	cmp	r3, #255	; 0xff
 800feaa:	d005      	beq.n	800feb8 <dhcp_check+0x3c>
    dhcp->tries++;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	799b      	ldrb	r3, [r3, #6]
 800feb0:	3301      	adds	r3, #1
 800feb2:	b2da      	uxtb	r2, r3
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800feb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800febc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800febe:	893b      	ldrh	r3, [r7, #8]
 800fec0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fec4:	4a06      	ldr	r2, [pc, #24]	; (800fee0 <dhcp_check+0x64>)
 800fec6:	fb82 1203 	smull	r1, r2, r2, r3
 800feca:	1152      	asrs	r2, r2, #5
 800fecc:	17db      	asrs	r3, r3, #31
 800fece:	1ad3      	subs	r3, r2, r3
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fed6:	bf00      	nop
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	10624dd3 	.word	0x10624dd3

0800fee4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fef4:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <dhcp_handle_offer+0x44>)
 800fef6:	789b      	ldrb	r3, [r3, #2]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d011      	beq.n	800ff20 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2200      	movs	r2, #0
 800ff00:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800ff02:	4b0a      	ldr	r3, [pc, #40]	; (800ff2c <dhcp_handle_offer+0x48>)
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7f7 fb17 	bl	800753a <lwip_htonl>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	691a      	ldr	r2, [r3, #16]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f808 	bl	800ff30 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800ff20:	bf00      	nop
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20006e6c 	.word	0x20006e6c
 800ff2c:	20006e74 	.word	0x20006e74

0800ff30 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800ff30:	b5b0      	push	{r4, r5, r7, lr}
 800ff32:	b08a      	sub	sp, #40	; 0x28
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d109      	bne.n	800ff52 <dhcp_select+0x22>
 800ff3e:	4b71      	ldr	r3, [pc, #452]	; (8010104 <dhcp_select+0x1d4>)
 800ff40:	f240 1277 	movw	r2, #375	; 0x177
 800ff44:	4970      	ldr	r1, [pc, #448]	; (8010108 <dhcp_select+0x1d8>)
 800ff46:	4871      	ldr	r0, [pc, #452]	; (801010c <dhcp_select+0x1dc>)
 800ff48:	f004 f930 	bl	80141ac <iprintf>
 800ff4c:	f06f 030f 	mvn.w	r3, #15
 800ff50:	e0d3      	b.n	80100fa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff56:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d109      	bne.n	800ff72 <dhcp_select+0x42>
 800ff5e:	4b69      	ldr	r3, [pc, #420]	; (8010104 <dhcp_select+0x1d4>)
 800ff60:	f240 1279 	movw	r2, #377	; 0x179
 800ff64:	496a      	ldr	r1, [pc, #424]	; (8010110 <dhcp_select+0x1e0>)
 800ff66:	4869      	ldr	r0, [pc, #420]	; (801010c <dhcp_select+0x1dc>)
 800ff68:	f004 f920 	bl	80141ac <iprintf>
 800ff6c:	f06f 0305 	mvn.w	r3, #5
 800ff70:	e0c3      	b.n	80100fa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ff72:	2101      	movs	r1, #1
 800ff74:	69b8      	ldr	r0, [r7, #24]
 800ff76:	f000 ff8d 	bl	8010e94 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ff7a:	f107 030c 	add.w	r3, r7, #12
 800ff7e:	2203      	movs	r2, #3
 800ff80:	69b9      	ldr	r1, [r7, #24]
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f001 fc12 	bl	80117ac <dhcp_create_msg>
 800ff88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	f000 8085 	beq.w	801009c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ff98:	89b8      	ldrh	r0, [r7, #12]
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffa0:	2302      	movs	r3, #2
 800ffa2:	2239      	movs	r2, #57	; 0x39
 800ffa4:	f000 ff90 	bl	8010ec8 <dhcp_option>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ffac:	89b8      	ldrh	r0, [r7, #12]
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffb8:	461a      	mov	r2, r3
 800ffba:	f000 ffdf 	bl	8010f7c <dhcp_option_short>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ffc2:	89b8      	ldrh	r0, [r7, #12]
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffca:	2304      	movs	r3, #4
 800ffcc:	2232      	movs	r2, #50	; 0x32
 800ffce:	f000 ff7b 	bl	8010ec8 <dhcp_option>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ffd6:	89bc      	ldrh	r4, [r7, #12]
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	69db      	ldr	r3, [r3, #28]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7f7 faa9 	bl	800753a <lwip_htonl>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	461a      	mov	r2, r3
 800ffec:	4629      	mov	r1, r5
 800ffee:	4620      	mov	r0, r4
 800fff0:	f000 fff6 	bl	8010fe0 <dhcp_option_long>
 800fff4:	4603      	mov	r3, r0
 800fff6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fff8:	89b8      	ldrh	r0, [r7, #12]
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010000:	2304      	movs	r3, #4
 8010002:	2236      	movs	r2, #54	; 0x36
 8010004:	f000 ff60 	bl	8010ec8 <dhcp_option>
 8010008:	4603      	mov	r3, r0
 801000a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801000c:	89bc      	ldrh	r4, [r7, #12]
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	699b      	ldr	r3, [r3, #24]
 8010018:	4618      	mov	r0, r3
 801001a:	f7f7 fa8e 	bl	800753a <lwip_htonl>
 801001e:	4603      	mov	r3, r0
 8010020:	461a      	mov	r2, r3
 8010022:	4629      	mov	r1, r5
 8010024:	4620      	mov	r0, r4
 8010026:	f000 ffdb 	bl	8010fe0 <dhcp_option_long>
 801002a:	4603      	mov	r3, r0
 801002c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801002e:	89b8      	ldrh	r0, [r7, #12]
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010036:	2303      	movs	r3, #3
 8010038:	2237      	movs	r2, #55	; 0x37
 801003a:	f000 ff45 	bl	8010ec8 <dhcp_option>
 801003e:	4603      	mov	r3, r0
 8010040:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010042:	2300      	movs	r3, #0
 8010044:	77bb      	strb	r3, [r7, #30]
 8010046:	e00e      	b.n	8010066 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010048:	89b8      	ldrh	r0, [r7, #12]
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010050:	7fbb      	ldrb	r3, [r7, #30]
 8010052:	4a30      	ldr	r2, [pc, #192]	; (8010114 <dhcp_select+0x1e4>)
 8010054:	5cd3      	ldrb	r3, [r2, r3]
 8010056:	461a      	mov	r2, r3
 8010058:	f000 ff6a 	bl	8010f30 <dhcp_option_byte>
 801005c:	4603      	mov	r3, r0
 801005e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010060:	7fbb      	ldrb	r3, [r7, #30]
 8010062:	3301      	adds	r3, #1
 8010064:	77bb      	strb	r3, [r7, #30]
 8010066:	7fbb      	ldrb	r3, [r7, #30]
 8010068:	2b02      	cmp	r3, #2
 801006a:	d9ed      	bls.n	8010048 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801006c:	89b8      	ldrh	r0, [r7, #12]
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	33f0      	adds	r3, #240	; 0xf0
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	4619      	mov	r1, r3
 8010076:	f001 fc6f 	bl	8011958 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801007a:	4b27      	ldr	r3, [pc, #156]	; (8010118 <dhcp_select+0x1e8>)
 801007c:	6818      	ldr	r0, [r3, #0]
 801007e:	4b27      	ldr	r3, [pc, #156]	; (801011c <dhcp_select+0x1ec>)
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	2343      	movs	r3, #67	; 0x43
 8010088:	4a25      	ldr	r2, [pc, #148]	; (8010120 <dhcp_select+0x1f0>)
 801008a:	6979      	ldr	r1, [r7, #20]
 801008c:	f7ff fbda 	bl	800f844 <udp_sendto_if_src>
 8010090:	4603      	mov	r3, r0
 8010092:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010094:	6978      	ldr	r0, [r7, #20]
 8010096:	f7f8 fd61 	bl	8008b5c <pbuf_free>
 801009a:	e001      	b.n	80100a0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801009c:	23ff      	movs	r3, #255	; 0xff
 801009e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	799b      	ldrb	r3, [r3, #6]
 80100a4:	2bff      	cmp	r3, #255	; 0xff
 80100a6:	d005      	beq.n	80100b4 <dhcp_select+0x184>
    dhcp->tries++;
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	799b      	ldrb	r3, [r3, #6]
 80100ac:	3301      	adds	r3, #1
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	799b      	ldrb	r3, [r3, #6]
 80100b8:	2b05      	cmp	r3, #5
 80100ba:	d80d      	bhi.n	80100d8 <dhcp_select+0x1a8>
 80100bc:	69bb      	ldr	r3, [r7, #24]
 80100be:	799b      	ldrb	r3, [r3, #6]
 80100c0:	461a      	mov	r2, r3
 80100c2:	2301      	movs	r3, #1
 80100c4:	4093      	lsls	r3, r2
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	461a      	mov	r2, r3
 80100ca:	0152      	lsls	r2, r2, #5
 80100cc:	1ad2      	subs	r2, r2, r3
 80100ce:	0092      	lsls	r2, r2, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	00db      	lsls	r3, r3, #3
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	e001      	b.n	80100dc <dhcp_select+0x1ac>
 80100d8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80100dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80100de:	89fb      	ldrh	r3, [r7, #14]
 80100e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80100e4:	4a0f      	ldr	r2, [pc, #60]	; (8010124 <dhcp_select+0x1f4>)
 80100e6:	fb82 1203 	smull	r1, r2, r2, r3
 80100ea:	1152      	asrs	r2, r2, #5
 80100ec:	17db      	asrs	r3, r3, #31
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80100f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3720      	adds	r7, #32
 80100fe:	46bd      	mov	sp, r7
 8010100:	bdb0      	pop	{r4, r5, r7, pc}
 8010102:	bf00      	nop
 8010104:	08017d64 	.word	0x08017d64
 8010108:	08017e10 	.word	0x08017e10
 801010c:	08017dc4 	.word	0x08017dc4
 8010110:	08017e2c 	.word	0x08017e2c
 8010114:	20000020 	.word	0x20000020
 8010118:	20000574 	.word	0x20000574
 801011c:	08041a64 	.word	0x08041a64
 8010120:	08041a68 	.word	0x08041a68
 8010124:	10624dd3 	.word	0x10624dd3

08010128 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801012e:	4b27      	ldr	r3, [pc, #156]	; (80101cc <dhcp_coarse_tmr+0xa4>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	607b      	str	r3, [r7, #4]
 8010134:	e042      	b.n	80101bc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d039      	beq.n	80101b6 <dhcp_coarse_tmr+0x8e>
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	795b      	ldrb	r3, [r3, #5]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d035      	beq.n	80101b6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	8a9b      	ldrh	r3, [r3, #20]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d012      	beq.n	8010178 <dhcp_coarse_tmr+0x50>
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	8a5b      	ldrh	r3, [r3, #18]
 8010156:	3301      	adds	r3, #1
 8010158:	b29a      	uxth	r2, r3
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	825a      	strh	r2, [r3, #18]
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	8a5a      	ldrh	r2, [r3, #18]
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	8a9b      	ldrh	r3, [r3, #20]
 8010166:	429a      	cmp	r2, r3
 8010168:	d106      	bne.n	8010178 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fdf8 	bl	8010d60 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 f96b 	bl	801044c <dhcp_start>
 8010176:	e01e      	b.n	80101b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	8a1b      	ldrh	r3, [r3, #16]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00b      	beq.n	8010198 <dhcp_coarse_tmr+0x70>
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	8a1b      	ldrh	r3, [r3, #16]
 8010184:	1e5a      	subs	r2, r3, #1
 8010186:	b291      	uxth	r1, r2
 8010188:	683a      	ldr	r2, [r7, #0]
 801018a:	8211      	strh	r1, [r2, #16]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d103      	bne.n	8010198 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 f8c7 	bl	8010324 <dhcp_t2_timeout>
 8010196:	e00e      	b.n	80101b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	89db      	ldrh	r3, [r3, #14]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00a      	beq.n	80101b6 <dhcp_coarse_tmr+0x8e>
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	89db      	ldrh	r3, [r3, #14]
 80101a4:	1e5a      	subs	r2, r3, #1
 80101a6:	b291      	uxth	r1, r2
 80101a8:	683a      	ldr	r2, [r7, #0]
 80101aa:	81d1      	strh	r1, [r2, #14]
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d102      	bne.n	80101b6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f888 	bl	80102c6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	607b      	str	r3, [r7, #4]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1b9      	bne.n	8010136 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80101c2:	bf00      	nop
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	20006e40 	.word	0x20006e40

080101d0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80101d6:	4b16      	ldr	r3, [pc, #88]	; (8010230 <dhcp_fine_tmr+0x60>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	607b      	str	r3, [r7, #4]
 80101dc:	e020      	b.n	8010220 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d017      	beq.n	801021a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	891b      	ldrh	r3, [r3, #8]
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d906      	bls.n	8010200 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	891b      	ldrh	r3, [r3, #8]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	811a      	strh	r2, [r3, #8]
 80101fe:	e00c      	b.n	801021a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	891b      	ldrh	r3, [r3, #8]
 8010204:	2b01      	cmp	r3, #1
 8010206:	d108      	bne.n	801021a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	891b      	ldrh	r3, [r3, #8]
 801020c:	3b01      	subs	r3, #1
 801020e:	b29a      	uxth	r2, r3
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 f80d 	bl	8010234 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	607b      	str	r3, [r7, #4]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1db      	bne.n	80101de <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8010226:	bf00      	nop
 8010228:	bf00      	nop
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	20006e40 	.word	0x20006e40

08010234 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010240:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	795b      	ldrb	r3, [r3, #5]
 8010246:	2b0c      	cmp	r3, #12
 8010248:	d003      	beq.n	8010252 <dhcp_timeout+0x1e>
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	795b      	ldrb	r3, [r3, #5]
 801024e:	2b06      	cmp	r3, #6
 8010250:	d103      	bne.n	801025a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fa1a 	bl	801068c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010258:	e031      	b.n	80102be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	795b      	ldrb	r3, [r3, #5]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d10e      	bne.n	8010280 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	799b      	ldrb	r3, [r3, #6]
 8010266:	2b05      	cmp	r3, #5
 8010268:	d803      	bhi.n	8010272 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff fe60 	bl	800ff30 <dhcp_select>
}
 8010270:	e025      	b.n	80102be <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 fd74 	bl	8010d60 <dhcp_release_and_stop>
      dhcp_start(netif);
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 f8e7 	bl	801044c <dhcp_start>
}
 801027e:	e01e      	b.n	80102be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	795b      	ldrb	r3, [r3, #5]
 8010284:	2b08      	cmp	r3, #8
 8010286:	d10b      	bne.n	80102a0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	799b      	ldrb	r3, [r3, #6]
 801028c:	2b01      	cmp	r3, #1
 801028e:	d803      	bhi.n	8010298 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f7ff fdf3 	bl	800fe7c <dhcp_check>
}
 8010296:	e012      	b.n	80102be <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fa99 	bl	80107d0 <dhcp_bind>
}
 801029e:	e00e      	b.n	80102be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	795b      	ldrb	r3, [r3, #5]
 80102a4:	2b03      	cmp	r3, #3
 80102a6:	d10a      	bne.n	80102be <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	799b      	ldrb	r3, [r3, #6]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d803      	bhi.n	80102b8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fc9f 	bl	8010bf4 <dhcp_reboot>
}
 80102b6:	e002      	b.n	80102be <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f9e7 	bl	801068c <dhcp_discover>
}
 80102be:	bf00      	nop
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b084      	sub	sp, #16
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	795b      	ldrb	r3, [r3, #5]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d007      	beq.n	80102ec <dhcp_t1_timeout+0x26>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	795b      	ldrb	r3, [r3, #5]
 80102e0:	2b0a      	cmp	r3, #10
 80102e2:	d003      	beq.n	80102ec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80102e8:	2b05      	cmp	r3, #5
 80102ea:	d117      	bne.n	801031c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 fb49 	bl	8010984 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	899b      	ldrh	r3, [r3, #12]
 80102f6:	461a      	mov	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	8a5b      	ldrh	r3, [r3, #18]
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	2b01      	cmp	r3, #1
 8010300:	dd0c      	ble.n	801031c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	899b      	ldrh	r3, [r3, #12]
 8010306:	461a      	mov	r2, r3
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	8a5b      	ldrh	r3, [r3, #18]
 801030c:	1ad3      	subs	r3, r2, r3
 801030e:	2b00      	cmp	r3, #0
 8010310:	da00      	bge.n	8010314 <dhcp_t1_timeout+0x4e>
 8010312:	3301      	adds	r3, #1
 8010314:	105b      	asrs	r3, r3, #1
 8010316:	b29a      	uxth	r2, r3
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801031c:	bf00      	nop
 801031e:	3710      	adds	r7, #16
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010330:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	795b      	ldrb	r3, [r3, #5]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d00b      	beq.n	8010352 <dhcp_t2_timeout+0x2e>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	795b      	ldrb	r3, [r3, #5]
 801033e:	2b0a      	cmp	r3, #10
 8010340:	d007      	beq.n	8010352 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010346:	2b05      	cmp	r3, #5
 8010348:	d003      	beq.n	8010352 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	795b      	ldrb	r3, [r3, #5]
 801034e:	2b04      	cmp	r3, #4
 8010350:	d117      	bne.n	8010382 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 fbb2 	bl	8010abc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	8a9b      	ldrh	r3, [r3, #20]
 801035c:	461a      	mov	r2, r3
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	8a5b      	ldrh	r3, [r3, #18]
 8010362:	1ad3      	subs	r3, r2, r3
 8010364:	2b01      	cmp	r3, #1
 8010366:	dd0c      	ble.n	8010382 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	8a9b      	ldrh	r3, [r3, #20]
 801036c:	461a      	mov	r2, r3
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	8a5b      	ldrh	r3, [r3, #18]
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	2b00      	cmp	r3, #0
 8010376:	da00      	bge.n	801037a <dhcp_t2_timeout+0x56>
 8010378:	3301      	adds	r3, #1
 801037a:	105b      	asrs	r3, r3, #1
 801037c:	b29a      	uxth	r2, r3
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8010382:	bf00      	nop
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
	...

0801038c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2200      	movs	r2, #0
 80103a0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2200      	movs	r2, #0
 80103a6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80103a8:	4b26      	ldr	r3, [pc, #152]	; (8010444 <dhcp_handle_ack+0xb8>)
 80103aa:	78db      	ldrb	r3, [r3, #3]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d003      	beq.n	80103b8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80103b0:	4b25      	ldr	r3, [pc, #148]	; (8010448 <dhcp_handle_ack+0xbc>)
 80103b2:	68da      	ldr	r2, [r3, #12]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80103b8:	4b22      	ldr	r3, [pc, #136]	; (8010444 <dhcp_handle_ack+0xb8>)
 80103ba:	791b      	ldrb	r3, [r3, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d004      	beq.n	80103ca <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80103c0:	4b21      	ldr	r3, [pc, #132]	; (8010448 <dhcp_handle_ack+0xbc>)
 80103c2:	691a      	ldr	r2, [r3, #16]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80103c8:	e004      	b.n	80103d4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ce:	085a      	lsrs	r2, r3, #1
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80103d4:	4b1b      	ldr	r3, [pc, #108]	; (8010444 <dhcp_handle_ack+0xb8>)
 80103d6:	795b      	ldrb	r3, [r3, #5]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d004      	beq.n	80103e6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80103dc:	4b1a      	ldr	r3, [pc, #104]	; (8010448 <dhcp_handle_ack+0xbc>)
 80103de:	695a      	ldr	r2, [r3, #20]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	631a      	str	r2, [r3, #48]	; 0x30
 80103e4:	e007      	b.n	80103f6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80103ea:	4613      	mov	r3, r2
 80103ec:	00db      	lsls	r3, r3, #3
 80103ee:	1a9b      	subs	r3, r3, r2
 80103f0:	08da      	lsrs	r2, r3, #3
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	691a      	ldr	r2, [r3, #16]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80103fe:	4b11      	ldr	r3, [pc, #68]	; (8010444 <dhcp_handle_ack+0xb8>)
 8010400:	799b      	ldrb	r3, [r3, #6]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00b      	beq.n	801041e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8010406:	4b10      	ldr	r3, [pc, #64]	; (8010448 <dhcp_handle_ack+0xbc>)
 8010408:	699b      	ldr	r3, [r3, #24]
 801040a:	4618      	mov	r0, r3
 801040c:	f7f7 f895 	bl	800753a <lwip_htonl>
 8010410:	4602      	mov	r2, r0
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2201      	movs	r2, #1
 801041a:	71da      	strb	r2, [r3, #7]
 801041c:	e002      	b.n	8010424 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010424:	4b07      	ldr	r3, [pc, #28]	; (8010444 <dhcp_handle_ack+0xb8>)
 8010426:	79db      	ldrb	r3, [r3, #7]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d007      	beq.n	801043c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801042c:	4b06      	ldr	r3, [pc, #24]	; (8010448 <dhcp_handle_ack+0xbc>)
 801042e:	69db      	ldr	r3, [r3, #28]
 8010430:	4618      	mov	r0, r3
 8010432:	f7f7 f882 	bl	800753a <lwip_htonl>
 8010436:	4602      	mov	r2, r0
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801043c:	bf00      	nop
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	20006e6c 	.word	0x20006e6c
 8010448:	20006e74 	.word	0x20006e74

0801044c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d109      	bne.n	801046e <dhcp_start+0x22>
 801045a:	4b37      	ldr	r3, [pc, #220]	; (8010538 <dhcp_start+0xec>)
 801045c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010460:	4936      	ldr	r1, [pc, #216]	; (801053c <dhcp_start+0xf0>)
 8010462:	4837      	ldr	r0, [pc, #220]	; (8010540 <dhcp_start+0xf4>)
 8010464:	f003 fea2 	bl	80141ac <iprintf>
 8010468:	f06f 030f 	mvn.w	r3, #15
 801046c:	e060      	b.n	8010530 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	2b00      	cmp	r3, #0
 801047a:	d109      	bne.n	8010490 <dhcp_start+0x44>
 801047c:	4b2e      	ldr	r3, [pc, #184]	; (8010538 <dhcp_start+0xec>)
 801047e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8010482:	4930      	ldr	r1, [pc, #192]	; (8010544 <dhcp_start+0xf8>)
 8010484:	482e      	ldr	r0, [pc, #184]	; (8010540 <dhcp_start+0xf4>)
 8010486:	f003 fe91 	bl	80141ac <iprintf>
 801048a:	f06f 030f 	mvn.w	r3, #15
 801048e:	e04f      	b.n	8010530 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010494:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801049a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801049e:	d202      	bcs.n	80104a6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80104a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104a4:	e044      	b.n	8010530 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10d      	bne.n	80104c8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80104ac:	2034      	movs	r0, #52	; 0x34
 80104ae:	f7f7 fb81 	bl	8007bb4 <mem_malloc>
 80104b2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d102      	bne.n	80104c0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80104ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104be:	e037      	b.n	8010530 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	625a      	str	r2, [r3, #36]	; 0x24
 80104c6:	e005      	b.n	80104d4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	791b      	ldrb	r3, [r3, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80104d0:	f7ff fc90 	bl	800fdf4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80104d4:	2234      	movs	r2, #52	; 0x34
 80104d6:	2100      	movs	r1, #0
 80104d8:	68f8      	ldr	r0, [r7, #12]
 80104da:	f003 fe5f 	bl	801419c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80104de:	f7ff fc37 	bl	800fd50 <dhcp_inc_pcb_refcount>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <dhcp_start+0xa2>
    return ERR_MEM;
 80104e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104ec:	e020      	b.n	8010530 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2201      	movs	r2, #1
 80104f2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80104fa:	f003 0304 	and.w	r3, r3, #4
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d105      	bne.n	801050e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010502:	2102      	movs	r1, #2
 8010504:	68f8      	ldr	r0, [r7, #12]
 8010506:	f000 fcc5 	bl	8010e94 <dhcp_set_state>
    return ERR_OK;
 801050a:	2300      	movs	r3, #0
 801050c:	e010      	b.n	8010530 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 f8bc 	bl	801068c <dhcp_discover>
 8010514:	4603      	mov	r3, r0
 8010516:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010518:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d005      	beq.n	801052c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 fc1d 	bl	8010d60 <dhcp_release_and_stop>
    return ERR_MEM;
 8010526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801052a:	e001      	b.n	8010530 <dhcp_start+0xe4>
  }
  return result;
 801052c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3710      	adds	r7, #16
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	08017d64 	.word	0x08017d64
 801053c:	08017e48 	.word	0x08017e48
 8010540:	08017dc4 	.word	0x08017dc4
 8010544:	08017e8c 	.word	0x08017e8c

08010548 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d107      	bne.n	8010568 <dhcp_arp_reply+0x20>
 8010558:	4b0e      	ldr	r3, [pc, #56]	; (8010594 <dhcp_arp_reply+0x4c>)
 801055a:	f240 328b 	movw	r2, #907	; 0x38b
 801055e:	490e      	ldr	r1, [pc, #56]	; (8010598 <dhcp_arp_reply+0x50>)
 8010560:	480e      	ldr	r0, [pc, #56]	; (801059c <dhcp_arp_reply+0x54>)
 8010562:	f003 fe23 	bl	80141ac <iprintf>
 8010566:	e012      	b.n	801058e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00c      	beq.n	801058e <dhcp_arp_reply+0x46>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	795b      	ldrb	r3, [r3, #5]
 8010578:	2b08      	cmp	r3, #8
 801057a:	d108      	bne.n	801058e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	69db      	ldr	r3, [r3, #28]
 8010584:	429a      	cmp	r2, r3
 8010586:	d102      	bne.n	801058e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f809 	bl	80105a0 <dhcp_decline>
    }
  }
}
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	08017d64 	.word	0x08017d64
 8010598:	08017e48 	.word	0x08017e48
 801059c:	08017dc4 	.word	0x08017dc4

080105a0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80105a0:	b5b0      	push	{r4, r5, r7, lr}
 80105a2:	b08a      	sub	sp, #40	; 0x28
 80105a4:	af02      	add	r7, sp, #8
 80105a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ac:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80105ae:	210c      	movs	r1, #12
 80105b0:	69b8      	ldr	r0, [r7, #24]
 80105b2:	f000 fc6f 	bl	8010e94 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80105b6:	f107 030c 	add.w	r3, r7, #12
 80105ba:	2204      	movs	r2, #4
 80105bc:	69b9      	ldr	r1, [r7, #24]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f001 f8f4 	bl	80117ac <dhcp_create_msg>
 80105c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d035      	beq.n	8010638 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80105d2:	89b8      	ldrh	r0, [r7, #12]
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80105da:	2304      	movs	r3, #4
 80105dc:	2232      	movs	r2, #50	; 0x32
 80105de:	f000 fc73 	bl	8010ec8 <dhcp_option>
 80105e2:	4603      	mov	r3, r0
 80105e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80105e6:	89bc      	ldrh	r4, [r7, #12]
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	69db      	ldr	r3, [r3, #28]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f6 ffa1 	bl	800753a <lwip_htonl>
 80105f8:	4603      	mov	r3, r0
 80105fa:	461a      	mov	r2, r3
 80105fc:	4629      	mov	r1, r5
 80105fe:	4620      	mov	r0, r4
 8010600:	f000 fcee 	bl	8010fe0 <dhcp_option_long>
 8010604:	4603      	mov	r3, r0
 8010606:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010608:	89b8      	ldrh	r0, [r7, #12]
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	33f0      	adds	r3, #240	; 0xf0
 801060e:	697a      	ldr	r2, [r7, #20]
 8010610:	4619      	mov	r1, r3
 8010612:	f001 f9a1 	bl	8011958 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010616:	4b19      	ldr	r3, [pc, #100]	; (801067c <dhcp_decline+0xdc>)
 8010618:	6818      	ldr	r0, [r3, #0]
 801061a:	4b19      	ldr	r3, [pc, #100]	; (8010680 <dhcp_decline+0xe0>)
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	2343      	movs	r3, #67	; 0x43
 8010624:	4a17      	ldr	r2, [pc, #92]	; (8010684 <dhcp_decline+0xe4>)
 8010626:	6979      	ldr	r1, [r7, #20]
 8010628:	f7ff f90c 	bl	800f844 <udp_sendto_if_src>
 801062c:	4603      	mov	r3, r0
 801062e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010630:	6978      	ldr	r0, [r7, #20]
 8010632:	f7f8 fa93 	bl	8008b5c <pbuf_free>
 8010636:	e001      	b.n	801063c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010638:	23ff      	movs	r3, #255	; 0xff
 801063a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801063c:	69bb      	ldr	r3, [r7, #24]
 801063e:	799b      	ldrb	r3, [r3, #6]
 8010640:	2bff      	cmp	r3, #255	; 0xff
 8010642:	d005      	beq.n	8010650 <dhcp_decline+0xb0>
    dhcp->tries++;
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	799b      	ldrb	r3, [r3, #6]
 8010648:	3301      	adds	r3, #1
 801064a:	b2da      	uxtb	r2, r3
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010650:	f242 7310 	movw	r3, #10000	; 0x2710
 8010654:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010656:	89fb      	ldrh	r3, [r7, #14]
 8010658:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801065c:	4a0a      	ldr	r2, [pc, #40]	; (8010688 <dhcp_decline+0xe8>)
 801065e:	fb82 1203 	smull	r1, r2, r2, r3
 8010662:	1152      	asrs	r2, r2, #5
 8010664:	17db      	asrs	r3, r3, #31
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	b29a      	uxth	r2, r3
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801066e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3720      	adds	r7, #32
 8010676:	46bd      	mov	sp, r7
 8010678:	bdb0      	pop	{r4, r5, r7, pc}
 801067a:	bf00      	nop
 801067c:	20000574 	.word	0x20000574
 8010680:	08041a64 	.word	0x08041a64
 8010684:	08041a68 	.word	0x08041a68
 8010688:	10624dd3 	.word	0x10624dd3

0801068c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08a      	sub	sp, #40	; 0x28
 8010690:	af02      	add	r7, sp, #8
 8010692:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010698:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801069a:	2300      	movs	r3, #0
 801069c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	2200      	movs	r2, #0
 80106a2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80106a4:	2106      	movs	r1, #6
 80106a6:	69b8      	ldr	r0, [r7, #24]
 80106a8:	f000 fbf4 	bl	8010e94 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80106ac:	f107 0308 	add.w	r3, r7, #8
 80106b0:	2201      	movs	r2, #1
 80106b2:	69b9      	ldr	r1, [r7, #24]
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f001 f879 	bl	80117ac <dhcp_create_msg>
 80106ba:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d04b      	beq.n	801075a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80106c8:	8938      	ldrh	r0, [r7, #8]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106d0:	2302      	movs	r3, #2
 80106d2:	2239      	movs	r2, #57	; 0x39
 80106d4:	f000 fbf8 	bl	8010ec8 <dhcp_option>
 80106d8:	4603      	mov	r3, r0
 80106da:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80106dc:	8938      	ldrh	r0, [r7, #8]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106e8:	461a      	mov	r2, r3
 80106ea:	f000 fc47 	bl	8010f7c <dhcp_option_short>
 80106ee:	4603      	mov	r3, r0
 80106f0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80106f2:	8938      	ldrh	r0, [r7, #8]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106fa:	2303      	movs	r3, #3
 80106fc:	2237      	movs	r2, #55	; 0x37
 80106fe:	f000 fbe3 	bl	8010ec8 <dhcp_option>
 8010702:	4603      	mov	r3, r0
 8010704:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010706:	2300      	movs	r3, #0
 8010708:	77fb      	strb	r3, [r7, #31]
 801070a:	e00e      	b.n	801072a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801070c:	8938      	ldrh	r0, [r7, #8]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010714:	7ffb      	ldrb	r3, [r7, #31]
 8010716:	4a29      	ldr	r2, [pc, #164]	; (80107bc <dhcp_discover+0x130>)
 8010718:	5cd3      	ldrb	r3, [r2, r3]
 801071a:	461a      	mov	r2, r3
 801071c:	f000 fc08 	bl	8010f30 <dhcp_option_byte>
 8010720:	4603      	mov	r3, r0
 8010722:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010724:	7ffb      	ldrb	r3, [r7, #31]
 8010726:	3301      	adds	r3, #1
 8010728:	77fb      	strb	r3, [r7, #31]
 801072a:	7ffb      	ldrb	r3, [r7, #31]
 801072c:	2b02      	cmp	r3, #2
 801072e:	d9ed      	bls.n	801070c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010730:	8938      	ldrh	r0, [r7, #8]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	33f0      	adds	r3, #240	; 0xf0
 8010736:	693a      	ldr	r2, [r7, #16]
 8010738:	4619      	mov	r1, r3
 801073a:	f001 f90d 	bl	8011958 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801073e:	4b20      	ldr	r3, [pc, #128]	; (80107c0 <dhcp_discover+0x134>)
 8010740:	6818      	ldr	r0, [r3, #0]
 8010742:	4b20      	ldr	r3, [pc, #128]	; (80107c4 <dhcp_discover+0x138>)
 8010744:	9301      	str	r3, [sp, #4]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	2343      	movs	r3, #67	; 0x43
 801074c:	4a1e      	ldr	r2, [pc, #120]	; (80107c8 <dhcp_discover+0x13c>)
 801074e:	6939      	ldr	r1, [r7, #16]
 8010750:	f7ff f878 	bl	800f844 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8010754:	6938      	ldr	r0, [r7, #16]
 8010756:	f7f8 fa01 	bl	8008b5c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801075a:	69bb      	ldr	r3, [r7, #24]
 801075c:	799b      	ldrb	r3, [r3, #6]
 801075e:	2bff      	cmp	r3, #255	; 0xff
 8010760:	d005      	beq.n	801076e <dhcp_discover+0xe2>
    dhcp->tries++;
 8010762:	69bb      	ldr	r3, [r7, #24]
 8010764:	799b      	ldrb	r3, [r3, #6]
 8010766:	3301      	adds	r3, #1
 8010768:	b2da      	uxtb	r2, r3
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	799b      	ldrb	r3, [r3, #6]
 8010772:	2b05      	cmp	r3, #5
 8010774:	d80d      	bhi.n	8010792 <dhcp_discover+0x106>
 8010776:	69bb      	ldr	r3, [r7, #24]
 8010778:	799b      	ldrb	r3, [r3, #6]
 801077a:	461a      	mov	r2, r3
 801077c:	2301      	movs	r3, #1
 801077e:	4093      	lsls	r3, r2
 8010780:	b29b      	uxth	r3, r3
 8010782:	461a      	mov	r2, r3
 8010784:	0152      	lsls	r2, r2, #5
 8010786:	1ad2      	subs	r2, r2, r3
 8010788:	0092      	lsls	r2, r2, #2
 801078a:	4413      	add	r3, r2
 801078c:	00db      	lsls	r3, r3, #3
 801078e:	b29b      	uxth	r3, r3
 8010790:	e001      	b.n	8010796 <dhcp_discover+0x10a>
 8010792:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010796:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010798:	897b      	ldrh	r3, [r7, #10]
 801079a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801079e:	4a0b      	ldr	r2, [pc, #44]	; (80107cc <dhcp_discover+0x140>)
 80107a0:	fb82 1203 	smull	r1, r2, r2, r3
 80107a4:	1152      	asrs	r2, r2, #5
 80107a6:	17db      	asrs	r3, r3, #31
 80107a8:	1ad3      	subs	r3, r2, r3
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80107b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3720      	adds	r7, #32
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	20000020 	.word	0x20000020
 80107c0:	20000574 	.word	0x20000574
 80107c4:	08041a64 	.word	0x08041a64
 80107c8:	08041a68 	.word	0x08041a68
 80107cc:	10624dd3 	.word	0x10624dd3

080107d0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b088      	sub	sp, #32
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d107      	bne.n	80107ee <dhcp_bind+0x1e>
 80107de:	4b64      	ldr	r3, [pc, #400]	; (8010970 <dhcp_bind+0x1a0>)
 80107e0:	f240 4215 	movw	r2, #1045	; 0x415
 80107e4:	4963      	ldr	r1, [pc, #396]	; (8010974 <dhcp_bind+0x1a4>)
 80107e6:	4864      	ldr	r0, [pc, #400]	; (8010978 <dhcp_bind+0x1a8>)
 80107e8:	f003 fce0 	bl	80141ac <iprintf>
 80107ec:	e0bc      	b.n	8010968 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d107      	bne.n	801080a <dhcp_bind+0x3a>
 80107fa:	4b5d      	ldr	r3, [pc, #372]	; (8010970 <dhcp_bind+0x1a0>)
 80107fc:	f240 4217 	movw	r2, #1047	; 0x417
 8010800:	495e      	ldr	r1, [pc, #376]	; (801097c <dhcp_bind+0x1ac>)
 8010802:	485d      	ldr	r0, [pc, #372]	; (8010978 <dhcp_bind+0x1a8>)
 8010804:	f003 fcd2 	bl	80141ac <iprintf>
 8010808:	e0ae      	b.n	8010968 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	2200      	movs	r2, #0
 801080e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010818:	d019      	beq.n	801084e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801081e:	331e      	adds	r3, #30
 8010820:	4a57      	ldr	r2, [pc, #348]	; (8010980 <dhcp_bind+0x1b0>)
 8010822:	fba2 2303 	umull	r2, r3, r2, r3
 8010826:	095b      	lsrs	r3, r3, #5
 8010828:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010830:	d302      	bcc.n	8010838 <dhcp_bind+0x68>
      timeout = 0xffff;
 8010832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010836:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	b29a      	uxth	r2, r3
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	8a9b      	ldrh	r3, [r3, #20]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d102      	bne.n	801084e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	2201      	movs	r2, #1
 801084c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010856:	d01d      	beq.n	8010894 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801085c:	331e      	adds	r3, #30
 801085e:	4a48      	ldr	r2, [pc, #288]	; (8010980 <dhcp_bind+0x1b0>)
 8010860:	fba2 2303 	umull	r2, r3, r2, r3
 8010864:	095b      	lsrs	r3, r3, #5
 8010866:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801086e:	d302      	bcc.n	8010876 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010874:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010876:	69fb      	ldr	r3, [r7, #28]
 8010878:	b29a      	uxth	r2, r3
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	895b      	ldrh	r3, [r3, #10]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d102      	bne.n	801088c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	2201      	movs	r2, #1
 801088a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801088c:	69bb      	ldr	r3, [r7, #24]
 801088e:	895a      	ldrh	r2, [r3, #10]
 8010890:	69bb      	ldr	r3, [r7, #24]
 8010892:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801089c:	d01d      	beq.n	80108da <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a2:	331e      	adds	r3, #30
 80108a4:	4a36      	ldr	r2, [pc, #216]	; (8010980 <dhcp_bind+0x1b0>)
 80108a6:	fba2 2303 	umull	r2, r3, r2, r3
 80108aa:	095b      	lsrs	r3, r3, #5
 80108ac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108b4:	d302      	bcc.n	80108bc <dhcp_bind+0xec>
      timeout = 0xffff;
 80108b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108ba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	b29a      	uxth	r2, r3
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	899b      	ldrh	r3, [r3, #12]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d102      	bne.n	80108d2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	2201      	movs	r2, #1
 80108d0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	899a      	ldrh	r2, [r3, #12]
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	895a      	ldrh	r2, [r3, #10]
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	899b      	ldrh	r3, [r3, #12]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d306      	bcc.n	80108f4 <dhcp_bind+0x124>
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	899b      	ldrh	r3, [r3, #12]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d002      	beq.n	80108f4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	2200      	movs	r2, #0
 80108f2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	79db      	ldrb	r3, [r3, #7]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d003      	beq.n	8010904 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	6a1b      	ldr	r3, [r3, #32]
 8010900:	613b      	str	r3, [r7, #16]
 8010902:	e014      	b.n	801092e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010904:	69bb      	ldr	r3, [r7, #24]
 8010906:	331c      	adds	r3, #28
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801090c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010910:	2b00      	cmp	r3, #0
 8010912:	db02      	blt.n	801091a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010914:	23ff      	movs	r3, #255	; 0xff
 8010916:	613b      	str	r3, [r7, #16]
 8010918:	e009      	b.n	801092e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801091a:	7dfb      	ldrb	r3, [r7, #23]
 801091c:	2bbf      	cmp	r3, #191	; 0xbf
 801091e:	d903      	bls.n	8010928 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010920:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010924:	613b      	str	r3, [r7, #16]
 8010926:	e002      	b.n	801092e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801092c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010932:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d108      	bne.n	801094c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	69da      	ldr	r2, [r3, #28]
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	4013      	ands	r3, r2
 8010942:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801094a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801094c:	210a      	movs	r1, #10
 801094e:	69b8      	ldr	r0, [r7, #24]
 8010950:	f000 faa0 	bl	8010e94 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	f103 011c 	add.w	r1, r3, #28
 801095a:	f107 030c 	add.w	r3, r7, #12
 801095e:	f107 0210 	add.w	r2, r7, #16
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7f7 fc82 	bl	800826c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010968:	3720      	adds	r7, #32
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	08017d64 	.word	0x08017d64
 8010974:	08017ec4 	.word	0x08017ec4
 8010978:	08017dc4 	.word	0x08017dc4
 801097c:	08017ee0 	.word	0x08017ee0
 8010980:	88888889 	.word	0x88888889

08010984 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b08a      	sub	sp, #40	; 0x28
 8010988:	af02      	add	r7, sp, #8
 801098a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010990:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8010992:	2105      	movs	r1, #5
 8010994:	69b8      	ldr	r0, [r7, #24]
 8010996:	f000 fa7d 	bl	8010e94 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801099a:	f107 030c 	add.w	r3, r7, #12
 801099e:	2203      	movs	r2, #3
 80109a0:	69b9      	ldr	r1, [r7, #24]
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 ff02 	bl	80117ac <dhcp_create_msg>
 80109a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d04e      	beq.n	8010a4e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80109b6:	89b8      	ldrh	r0, [r7, #12]
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80109be:	2302      	movs	r3, #2
 80109c0:	2239      	movs	r2, #57	; 0x39
 80109c2:	f000 fa81 	bl	8010ec8 <dhcp_option>
 80109c6:	4603      	mov	r3, r0
 80109c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80109ca:	89b8      	ldrh	r0, [r7, #12]
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109d6:	461a      	mov	r2, r3
 80109d8:	f000 fad0 	bl	8010f7c <dhcp_option_short>
 80109dc:	4603      	mov	r3, r0
 80109de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80109e0:	89b8      	ldrh	r0, [r7, #12]
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80109e8:	2303      	movs	r3, #3
 80109ea:	2237      	movs	r2, #55	; 0x37
 80109ec:	f000 fa6c 	bl	8010ec8 <dhcp_option>
 80109f0:	4603      	mov	r3, r0
 80109f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80109f4:	2300      	movs	r3, #0
 80109f6:	77bb      	strb	r3, [r7, #30]
 80109f8:	e00e      	b.n	8010a18 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80109fa:	89b8      	ldrh	r0, [r7, #12]
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a02:	7fbb      	ldrb	r3, [r7, #30]
 8010a04:	4a2a      	ldr	r2, [pc, #168]	; (8010ab0 <dhcp_renew+0x12c>)
 8010a06:	5cd3      	ldrb	r3, [r2, r3]
 8010a08:	461a      	mov	r2, r3
 8010a0a:	f000 fa91 	bl	8010f30 <dhcp_option_byte>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a12:	7fbb      	ldrb	r3, [r7, #30]
 8010a14:	3301      	adds	r3, #1
 8010a16:	77bb      	strb	r3, [r7, #30]
 8010a18:	7fbb      	ldrb	r3, [r7, #30]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d9ed      	bls.n	80109fa <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a1e:	89b8      	ldrh	r0, [r7, #12]
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	33f0      	adds	r3, #240	; 0xf0
 8010a24:	697a      	ldr	r2, [r7, #20]
 8010a26:	4619      	mov	r1, r3
 8010a28:	f000 ff96 	bl	8011958 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a2c:	4b21      	ldr	r3, [pc, #132]	; (8010ab4 <dhcp_renew+0x130>)
 8010a2e:	6818      	ldr	r0, [r3, #0]
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	f103 0218 	add.w	r2, r3, #24
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	2343      	movs	r3, #67	; 0x43
 8010a3c:	6979      	ldr	r1, [r7, #20]
 8010a3e:	f7fe fe8d 	bl	800f75c <udp_sendto_if>
 8010a42:	4603      	mov	r3, r0
 8010a44:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010a46:	6978      	ldr	r0, [r7, #20]
 8010a48:	f7f8 f888 	bl	8008b5c <pbuf_free>
 8010a4c:	e001      	b.n	8010a52 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010a4e:	23ff      	movs	r3, #255	; 0xff
 8010a50:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	799b      	ldrb	r3, [r3, #6]
 8010a56:	2bff      	cmp	r3, #255	; 0xff
 8010a58:	d005      	beq.n	8010a66 <dhcp_renew+0xe2>
    dhcp->tries++;
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	799b      	ldrb	r3, [r3, #6]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	b2da      	uxtb	r2, r3
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8010a66:	69bb      	ldr	r3, [r7, #24]
 8010a68:	799b      	ldrb	r3, [r3, #6]
 8010a6a:	2b09      	cmp	r3, #9
 8010a6c:	d80a      	bhi.n	8010a84 <dhcp_renew+0x100>
 8010a6e:	69bb      	ldr	r3, [r7, #24]
 8010a70:	799b      	ldrb	r3, [r3, #6]
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	461a      	mov	r2, r3
 8010a76:	0152      	lsls	r2, r2, #5
 8010a78:	1ad2      	subs	r2, r2, r3
 8010a7a:	0092      	lsls	r2, r2, #2
 8010a7c:	4413      	add	r3, r2
 8010a7e:	011b      	lsls	r3, r3, #4
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	e001      	b.n	8010a88 <dhcp_renew+0x104>
 8010a84:	f644 6320 	movw	r3, #20000	; 0x4e20
 8010a88:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010a8a:	89fb      	ldrh	r3, [r7, #14]
 8010a8c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010a90:	4a09      	ldr	r2, [pc, #36]	; (8010ab8 <dhcp_renew+0x134>)
 8010a92:	fb82 1203 	smull	r1, r2, r2, r3
 8010a96:	1152      	asrs	r2, r2, #5
 8010a98:	17db      	asrs	r3, r3, #31
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	69bb      	ldr	r3, [r7, #24]
 8010aa0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010aa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3720      	adds	r7, #32
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000020 	.word	0x20000020
 8010ab4:	20000574 	.word	0x20000574
 8010ab8:	10624dd3 	.word	0x10624dd3

08010abc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b08a      	sub	sp, #40	; 0x28
 8010ac0:	af02      	add	r7, sp, #8
 8010ac2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8010aca:	2104      	movs	r1, #4
 8010acc:	69b8      	ldr	r0, [r7, #24]
 8010ace:	f000 f9e1 	bl	8010e94 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010ad2:	f107 030c 	add.w	r3, r7, #12
 8010ad6:	2203      	movs	r2, #3
 8010ad8:	69b9      	ldr	r1, [r7, #24]
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 fe66 	bl	80117ac <dhcp_create_msg>
 8010ae0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d04c      	beq.n	8010b82 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010aee:	89b8      	ldrh	r0, [r7, #12]
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010af6:	2302      	movs	r3, #2
 8010af8:	2239      	movs	r2, #57	; 0x39
 8010afa:	f000 f9e5 	bl	8010ec8 <dhcp_option>
 8010afe:	4603      	mov	r3, r0
 8010b00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010b02:	89b8      	ldrh	r0, [r7, #12]
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b0e:	461a      	mov	r2, r3
 8010b10:	f000 fa34 	bl	8010f7c <dhcp_option_short>
 8010b14:	4603      	mov	r3, r0
 8010b16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010b18:	89b8      	ldrh	r0, [r7, #12]
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010b20:	2303      	movs	r3, #3
 8010b22:	2237      	movs	r2, #55	; 0x37
 8010b24:	f000 f9d0 	bl	8010ec8 <dhcp_option>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	77bb      	strb	r3, [r7, #30]
 8010b30:	e00e      	b.n	8010b50 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010b32:	89b8      	ldrh	r0, [r7, #12]
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010b3a:	7fbb      	ldrb	r3, [r7, #30]
 8010b3c:	4a29      	ldr	r2, [pc, #164]	; (8010be4 <dhcp_rebind+0x128>)
 8010b3e:	5cd3      	ldrb	r3, [r2, r3]
 8010b40:	461a      	mov	r2, r3
 8010b42:	f000 f9f5 	bl	8010f30 <dhcp_option_byte>
 8010b46:	4603      	mov	r3, r0
 8010b48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b4a:	7fbb      	ldrb	r3, [r7, #30]
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	77bb      	strb	r3, [r7, #30]
 8010b50:	7fbb      	ldrb	r3, [r7, #30]
 8010b52:	2b02      	cmp	r3, #2
 8010b54:	d9ed      	bls.n	8010b32 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010b56:	89b8      	ldrh	r0, [r7, #12]
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	33f0      	adds	r3, #240	; 0xf0
 8010b5c:	697a      	ldr	r2, [r7, #20]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	f000 fefa 	bl	8011958 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010b64:	4b20      	ldr	r3, [pc, #128]	; (8010be8 <dhcp_rebind+0x12c>)
 8010b66:	6818      	ldr	r0, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	2343      	movs	r3, #67	; 0x43
 8010b6e:	4a1f      	ldr	r2, [pc, #124]	; (8010bec <dhcp_rebind+0x130>)
 8010b70:	6979      	ldr	r1, [r7, #20]
 8010b72:	f7fe fdf3 	bl	800f75c <udp_sendto_if>
 8010b76:	4603      	mov	r3, r0
 8010b78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010b7a:	6978      	ldr	r0, [r7, #20]
 8010b7c:	f7f7 ffee 	bl	8008b5c <pbuf_free>
 8010b80:	e001      	b.n	8010b86 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010b82:	23ff      	movs	r3, #255	; 0xff
 8010b84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	799b      	ldrb	r3, [r3, #6]
 8010b8a:	2bff      	cmp	r3, #255	; 0xff
 8010b8c:	d005      	beq.n	8010b9a <dhcp_rebind+0xde>
    dhcp->tries++;
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	799b      	ldrb	r3, [r3, #6]
 8010b92:	3301      	adds	r3, #1
 8010b94:	b2da      	uxtb	r2, r3
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010b9a:	69bb      	ldr	r3, [r7, #24]
 8010b9c:	799b      	ldrb	r3, [r3, #6]
 8010b9e:	2b09      	cmp	r3, #9
 8010ba0:	d80a      	bhi.n	8010bb8 <dhcp_rebind+0xfc>
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	799b      	ldrb	r3, [r3, #6]
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	461a      	mov	r2, r3
 8010baa:	0152      	lsls	r2, r2, #5
 8010bac:	1ad2      	subs	r2, r2, r3
 8010bae:	0092      	lsls	r2, r2, #2
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	e001      	b.n	8010bbc <dhcp_rebind+0x100>
 8010bb8:	f242 7310 	movw	r3, #10000	; 0x2710
 8010bbc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010bbe:	89fb      	ldrh	r3, [r7, #14]
 8010bc0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010bc4:	4a0a      	ldr	r2, [pc, #40]	; (8010bf0 <dhcp_rebind+0x134>)
 8010bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8010bca:	1152      	asrs	r2, r2, #5
 8010bcc:	17db      	asrs	r3, r3, #31
 8010bce:	1ad3      	subs	r3, r2, r3
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010bd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3720      	adds	r7, #32
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	20000020 	.word	0x20000020
 8010be8:	20000574 	.word	0x20000574
 8010bec:	08041a68 	.word	0x08041a68
 8010bf0:	10624dd3 	.word	0x10624dd3

08010bf4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010bf4:	b5b0      	push	{r4, r5, r7, lr}
 8010bf6:	b08a      	sub	sp, #40	; 0x28
 8010bf8:	af02      	add	r7, sp, #8
 8010bfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c00:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010c02:	2103      	movs	r1, #3
 8010c04:	69b8      	ldr	r0, [r7, #24]
 8010c06:	f000 f945 	bl	8010e94 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010c0a:	f107 030c 	add.w	r3, r7, #12
 8010c0e:	2203      	movs	r2, #3
 8010c10:	69b9      	ldr	r1, [r7, #24]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fdca 	bl	80117ac <dhcp_create_msg>
 8010c18:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d066      	beq.n	8010cee <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010c26:	89b8      	ldrh	r0, [r7, #12]
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c2e:	2302      	movs	r3, #2
 8010c30:	2239      	movs	r2, #57	; 0x39
 8010c32:	f000 f949 	bl	8010ec8 <dhcp_option>
 8010c36:	4603      	mov	r3, r0
 8010c38:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010c3a:	89b8      	ldrh	r0, [r7, #12]
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	33f0      	adds	r3, #240	; 0xf0
 8010c40:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010c44:	4619      	mov	r1, r3
 8010c46:	f000 f999 	bl	8010f7c <dhcp_option_short>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010c4e:	89b8      	ldrh	r0, [r7, #12]
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c56:	2304      	movs	r3, #4
 8010c58:	2232      	movs	r2, #50	; 0x32
 8010c5a:	f000 f935 	bl	8010ec8 <dhcp_option>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010c62:	89bc      	ldrh	r4, [r7, #12]
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010c6a:	69bb      	ldr	r3, [r7, #24]
 8010c6c:	69db      	ldr	r3, [r3, #28]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f6 fc63 	bl	800753a <lwip_htonl>
 8010c74:	4603      	mov	r3, r0
 8010c76:	461a      	mov	r2, r3
 8010c78:	4629      	mov	r1, r5
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	f000 f9b0 	bl	8010fe0 <dhcp_option_long>
 8010c80:	4603      	mov	r3, r0
 8010c82:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010c84:	89b8      	ldrh	r0, [r7, #12]
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c8c:	2303      	movs	r3, #3
 8010c8e:	2237      	movs	r2, #55	; 0x37
 8010c90:	f000 f91a 	bl	8010ec8 <dhcp_option>
 8010c94:	4603      	mov	r3, r0
 8010c96:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010c98:	2300      	movs	r3, #0
 8010c9a:	77bb      	strb	r3, [r7, #30]
 8010c9c:	e00e      	b.n	8010cbc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010c9e:	89b8      	ldrh	r0, [r7, #12]
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010ca6:	7fbb      	ldrb	r3, [r7, #30]
 8010ca8:	4a29      	ldr	r2, [pc, #164]	; (8010d50 <dhcp_reboot+0x15c>)
 8010caa:	5cd3      	ldrb	r3, [r2, r3]
 8010cac:	461a      	mov	r2, r3
 8010cae:	f000 f93f 	bl	8010f30 <dhcp_option_byte>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010cb6:	7fbb      	ldrb	r3, [r7, #30]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	77bb      	strb	r3, [r7, #30]
 8010cbc:	7fbb      	ldrb	r3, [r7, #30]
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d9ed      	bls.n	8010c9e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010cc2:	89b8      	ldrh	r0, [r7, #12]
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	33f0      	adds	r3, #240	; 0xf0
 8010cc8:	697a      	ldr	r2, [r7, #20]
 8010cca:	4619      	mov	r1, r3
 8010ccc:	f000 fe44 	bl	8011958 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010cd0:	4b20      	ldr	r3, [pc, #128]	; (8010d54 <dhcp_reboot+0x160>)
 8010cd2:	6818      	ldr	r0, [r3, #0]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	2343      	movs	r3, #67	; 0x43
 8010cda:	4a1f      	ldr	r2, [pc, #124]	; (8010d58 <dhcp_reboot+0x164>)
 8010cdc:	6979      	ldr	r1, [r7, #20]
 8010cde:	f7fe fd3d 	bl	800f75c <udp_sendto_if>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010ce6:	6978      	ldr	r0, [r7, #20]
 8010ce8:	f7f7 ff38 	bl	8008b5c <pbuf_free>
 8010cec:	e001      	b.n	8010cf2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010cee:	23ff      	movs	r3, #255	; 0xff
 8010cf0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	799b      	ldrb	r3, [r3, #6]
 8010cf6:	2bff      	cmp	r3, #255	; 0xff
 8010cf8:	d005      	beq.n	8010d06 <dhcp_reboot+0x112>
    dhcp->tries++;
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	799b      	ldrb	r3, [r3, #6]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	69bb      	ldr	r3, [r7, #24]
 8010d04:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	799b      	ldrb	r3, [r3, #6]
 8010d0a:	2b09      	cmp	r3, #9
 8010d0c:	d80a      	bhi.n	8010d24 <dhcp_reboot+0x130>
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	799b      	ldrb	r3, [r3, #6]
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	461a      	mov	r2, r3
 8010d16:	0152      	lsls	r2, r2, #5
 8010d18:	1ad2      	subs	r2, r2, r3
 8010d1a:	0092      	lsls	r2, r2, #2
 8010d1c:	4413      	add	r3, r2
 8010d1e:	00db      	lsls	r3, r3, #3
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	e001      	b.n	8010d28 <dhcp_reboot+0x134>
 8010d24:	f242 7310 	movw	r3, #10000	; 0x2710
 8010d28:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010d2a:	89fb      	ldrh	r3, [r7, #14]
 8010d2c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010d30:	4a0a      	ldr	r2, [pc, #40]	; (8010d5c <dhcp_reboot+0x168>)
 8010d32:	fb82 1203 	smull	r1, r2, r2, r3
 8010d36:	1152      	asrs	r2, r2, #5
 8010d38:	17db      	asrs	r3, r3, #31
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3720      	adds	r7, #32
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	20000020 	.word	0x20000020
 8010d54:	20000574 	.word	0x20000574
 8010d58:	08041a68 	.word	0x08041a68
 8010d5c:	10624dd3 	.word	0x10624dd3

08010d60 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010d60:	b5b0      	push	{r4, r5, r7, lr}
 8010d62:	b08a      	sub	sp, #40	; 0x28
 8010d64:	af02      	add	r7, sp, #8
 8010d66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d6c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	f000 8084 	beq.w	8010e7e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	795b      	ldrb	r3, [r3, #5]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f000 8081 	beq.w	8010e82 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	699b      	ldr	r3, [r3, #24]
 8010d84:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	2200      	movs	r2, #0
 8010d96:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	2200      	movs	r2, #0
 8010da2:	631a      	str	r2, [r3, #48]	; 0x30
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	62da      	str	r2, [r3, #44]	; 0x2c
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	2200      	movs	r2, #0
 8010db8:	829a      	strh	r2, [r3, #20]
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	8a9a      	ldrh	r2, [r3, #20]
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	825a      	strh	r2, [r3, #18]
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	8a5a      	ldrh	r2, [r3, #18]
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	821a      	strh	r2, [r3, #16]
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	8a1a      	ldrh	r2, [r3, #16]
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f000 fdee 	bl	80119b4 <dhcp_supplied_address>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d03b      	beq.n	8010e56 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010dde:	f107 030e 	add.w	r3, r7, #14
 8010de2:	2207      	movs	r2, #7
 8010de4:	69f9      	ldr	r1, [r7, #28]
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 fce0 	bl	80117ac <dhcp_create_msg>
 8010dec:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d030      	beq.n	8010e56 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010dfa:	89f8      	ldrh	r0, [r7, #14]
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010e02:	2304      	movs	r3, #4
 8010e04:	2236      	movs	r2, #54	; 0x36
 8010e06:	f000 f85f 	bl	8010ec8 <dhcp_option>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010e0e:	89fc      	ldrh	r4, [r7, #14]
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7f6 fb8e 	bl	800753a <lwip_htonl>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	461a      	mov	r2, r3
 8010e22:	4629      	mov	r1, r5
 8010e24:	4620      	mov	r0, r4
 8010e26:	f000 f8db 	bl	8010fe0 <dhcp_option_long>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010e2e:	89f8      	ldrh	r0, [r7, #14]
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	33f0      	adds	r3, #240	; 0xf0
 8010e34:	69ba      	ldr	r2, [r7, #24]
 8010e36:	4619      	mov	r1, r3
 8010e38:	f000 fd8e 	bl	8011958 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010e3c:	4b13      	ldr	r3, [pc, #76]	; (8010e8c <dhcp_release_and_stop+0x12c>)
 8010e3e:	6818      	ldr	r0, [r3, #0]
 8010e40:	f107 0210 	add.w	r2, r7, #16
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	9300      	str	r3, [sp, #0]
 8010e48:	2343      	movs	r3, #67	; 0x43
 8010e4a:	69b9      	ldr	r1, [r7, #24]
 8010e4c:	f7fe fc86 	bl	800f75c <udp_sendto_if>
      pbuf_free(p_out);
 8010e50:	69b8      	ldr	r0, [r7, #24]
 8010e52:	f7f7 fe83 	bl	8008b5c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010e56:	4b0e      	ldr	r3, [pc, #56]	; (8010e90 <dhcp_release_and_stop+0x130>)
 8010e58:	4a0d      	ldr	r2, [pc, #52]	; (8010e90 <dhcp_release_and_stop+0x130>)
 8010e5a:	490d      	ldr	r1, [pc, #52]	; (8010e90 <dhcp_release_and_stop+0x130>)
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7f7 fa05 	bl	800826c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010e62:	2100      	movs	r1, #0
 8010e64:	69f8      	ldr	r0, [r7, #28]
 8010e66:	f000 f815 	bl	8010e94 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	791b      	ldrb	r3, [r3, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d008      	beq.n	8010e84 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010e72:	f7fe ffbf 	bl	800fdf4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	711a      	strb	r2, [r3, #4]
 8010e7c:	e002      	b.n	8010e84 <dhcp_release_and_stop+0x124>
    return;
 8010e7e:	bf00      	nop
 8010e80:	e000      	b.n	8010e84 <dhcp_release_and_stop+0x124>
    return;
 8010e82:	bf00      	nop
  }
}
 8010e84:	3720      	adds	r7, #32
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bdb0      	pop	{r4, r5, r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	20000574 	.word	0x20000574
 8010e90:	08041a64 	.word	0x08041a64

08010e94 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	795b      	ldrb	r3, [r3, #5]
 8010ea4:	78fa      	ldrb	r2, [r7, #3]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d008      	beq.n	8010ebc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	78fa      	ldrb	r2, [r7, #3]
 8010eae:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	811a      	strh	r2, [r3, #8]
  }
}
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6039      	str	r1, [r7, #0]
 8010ed0:	4611      	mov	r1, r2
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	80fb      	strh	r3, [r7, #6]
 8010ed8:	460b      	mov	r3, r1
 8010eda:	717b      	strb	r3, [r7, #5]
 8010edc:	4613      	mov	r3, r2
 8010ede:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010ee0:	88fa      	ldrh	r2, [r7, #6]
 8010ee2:	793b      	ldrb	r3, [r7, #4]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	3302      	adds	r3, #2
 8010ee8:	2b44      	cmp	r3, #68	; 0x44
 8010eea:	d906      	bls.n	8010efa <dhcp_option+0x32>
 8010eec:	4b0d      	ldr	r3, [pc, #52]	; (8010f24 <dhcp_option+0x5c>)
 8010eee:	f240 529a 	movw	r2, #1434	; 0x59a
 8010ef2:	490d      	ldr	r1, [pc, #52]	; (8010f28 <dhcp_option+0x60>)
 8010ef4:	480d      	ldr	r0, [pc, #52]	; (8010f2c <dhcp_option+0x64>)
 8010ef6:	f003 f959 	bl	80141ac <iprintf>
  options[options_out_len++] = option_type;
 8010efa:	88fb      	ldrh	r3, [r7, #6]
 8010efc:	1c5a      	adds	r2, r3, #1
 8010efe:	80fa      	strh	r2, [r7, #6]
 8010f00:	461a      	mov	r2, r3
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	4413      	add	r3, r2
 8010f06:	797a      	ldrb	r2, [r7, #5]
 8010f08:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010f0a:	88fb      	ldrh	r3, [r7, #6]
 8010f0c:	1c5a      	adds	r2, r3, #1
 8010f0e:	80fa      	strh	r2, [r7, #6]
 8010f10:	461a      	mov	r2, r3
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	4413      	add	r3, r2
 8010f16:	793a      	ldrb	r2, [r7, #4]
 8010f18:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010f1a:	88fb      	ldrh	r3, [r7, #6]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	08017d64 	.word	0x08017d64
 8010f28:	08017ef8 	.word	0x08017ef8
 8010f2c:	08017dc4 	.word	0x08017dc4

08010f30 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	4603      	mov	r3, r0
 8010f38:	6039      	str	r1, [r7, #0]
 8010f3a:	80fb      	strh	r3, [r7, #6]
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010f40:	88fb      	ldrh	r3, [r7, #6]
 8010f42:	2b43      	cmp	r3, #67	; 0x43
 8010f44:	d906      	bls.n	8010f54 <dhcp_option_byte+0x24>
 8010f46:	4b0a      	ldr	r3, [pc, #40]	; (8010f70 <dhcp_option_byte+0x40>)
 8010f48:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010f4c:	4909      	ldr	r1, [pc, #36]	; (8010f74 <dhcp_option_byte+0x44>)
 8010f4e:	480a      	ldr	r0, [pc, #40]	; (8010f78 <dhcp_option_byte+0x48>)
 8010f50:	f003 f92c 	bl	80141ac <iprintf>
  options[options_out_len++] = value;
 8010f54:	88fb      	ldrh	r3, [r7, #6]
 8010f56:	1c5a      	adds	r2, r3, #1
 8010f58:	80fa      	strh	r2, [r7, #6]
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	4413      	add	r3, r2
 8010f60:	797a      	ldrb	r2, [r7, #5]
 8010f62:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010f64:	88fb      	ldrh	r3, [r7, #6]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3708      	adds	r7, #8
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	08017d64 	.word	0x08017d64
 8010f74:	08017f3c 	.word	0x08017f3c
 8010f78:	08017dc4 	.word	0x08017dc4

08010f7c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	4603      	mov	r3, r0
 8010f84:	6039      	str	r1, [r7, #0]
 8010f86:	80fb      	strh	r3, [r7, #6]
 8010f88:	4613      	mov	r3, r2
 8010f8a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010f8c:	88fb      	ldrh	r3, [r7, #6]
 8010f8e:	3302      	adds	r3, #2
 8010f90:	2b44      	cmp	r3, #68	; 0x44
 8010f92:	d906      	bls.n	8010fa2 <dhcp_option_short+0x26>
 8010f94:	4b0f      	ldr	r3, [pc, #60]	; (8010fd4 <dhcp_option_short+0x58>)
 8010f96:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010f9a:	490f      	ldr	r1, [pc, #60]	; (8010fd8 <dhcp_option_short+0x5c>)
 8010f9c:	480f      	ldr	r0, [pc, #60]	; (8010fdc <dhcp_option_short+0x60>)
 8010f9e:	f003 f905 	bl	80141ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010fa2:	88bb      	ldrh	r3, [r7, #4]
 8010fa4:	0a1b      	lsrs	r3, r3, #8
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	88fb      	ldrh	r3, [r7, #6]
 8010faa:	1c59      	adds	r1, r3, #1
 8010fac:	80f9      	strh	r1, [r7, #6]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	440b      	add	r3, r1
 8010fb4:	b2d2      	uxtb	r2, r2
 8010fb6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010fb8:	88fb      	ldrh	r3, [r7, #6]
 8010fba:	1c5a      	adds	r2, r3, #1
 8010fbc:	80fa      	strh	r2, [r7, #6]
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	4413      	add	r3, r2
 8010fc4:	88ba      	ldrh	r2, [r7, #4]
 8010fc6:	b2d2      	uxtb	r2, r2
 8010fc8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010fca:	88fb      	ldrh	r3, [r7, #6]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	08017d64 	.word	0x08017d64
 8010fd8:	08017f74 	.word	0x08017f74
 8010fdc:	08017dc4 	.word	0x08017dc4

08010fe0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
 8010fec:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010fee:	89fb      	ldrh	r3, [r7, #14]
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	2b44      	cmp	r3, #68	; 0x44
 8010ff4:	d906      	bls.n	8011004 <dhcp_option_long+0x24>
 8010ff6:	4b19      	ldr	r3, [pc, #100]	; (801105c <dhcp_option_long+0x7c>)
 8010ff8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010ffc:	4918      	ldr	r1, [pc, #96]	; (8011060 <dhcp_option_long+0x80>)
 8010ffe:	4819      	ldr	r0, [pc, #100]	; (8011064 <dhcp_option_long+0x84>)
 8011000:	f003 f8d4 	bl	80141ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	0e1a      	lsrs	r2, r3, #24
 8011008:	89fb      	ldrh	r3, [r7, #14]
 801100a:	1c59      	adds	r1, r3, #1
 801100c:	81f9      	strh	r1, [r7, #14]
 801100e:	4619      	mov	r1, r3
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	440b      	add	r3, r1
 8011014:	b2d2      	uxtb	r2, r2
 8011016:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	0c1a      	lsrs	r2, r3, #16
 801101c:	89fb      	ldrh	r3, [r7, #14]
 801101e:	1c59      	adds	r1, r3, #1
 8011020:	81f9      	strh	r1, [r7, #14]
 8011022:	4619      	mov	r1, r3
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	440b      	add	r3, r1
 8011028:	b2d2      	uxtb	r2, r2
 801102a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	0a1a      	lsrs	r2, r3, #8
 8011030:	89fb      	ldrh	r3, [r7, #14]
 8011032:	1c59      	adds	r1, r3, #1
 8011034:	81f9      	strh	r1, [r7, #14]
 8011036:	4619      	mov	r1, r3
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	440b      	add	r3, r1
 801103c:	b2d2      	uxtb	r2, r2
 801103e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011040:	89fb      	ldrh	r3, [r7, #14]
 8011042:	1c5a      	adds	r2, r3, #1
 8011044:	81fa      	strh	r2, [r7, #14]
 8011046:	461a      	mov	r2, r3
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	4413      	add	r3, r2
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	b2d2      	uxtb	r2, r2
 8011050:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011052:	89fb      	ldrh	r3, [r7, #14]
}
 8011054:	4618      	mov	r0, r3
 8011056:	3710      	adds	r7, #16
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	08017d64 	.word	0x08017d64
 8011060:	08017fb0 	.word	0x08017fb0
 8011064:	08017dc4 	.word	0x08017dc4

08011068 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b090      	sub	sp, #64	; 0x40
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011072:	2300      	movs	r3, #0
 8011074:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011076:	2300      	movs	r3, #0
 8011078:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801107a:	2208      	movs	r2, #8
 801107c:	2100      	movs	r1, #0
 801107e:	48be      	ldr	r0, [pc, #760]	; (8011378 <dhcp_parse_reply+0x310>)
 8011080:	f003 f88c 	bl	801419c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	895b      	ldrh	r3, [r3, #10]
 8011088:	2b2b      	cmp	r3, #43	; 0x2b
 801108a:	d802      	bhi.n	8011092 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801108c:	f06f 0301 	mvn.w	r3, #1
 8011090:	e2a8      	b.n	80115e4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011098:	23f0      	movs	r3, #240	; 0xf0
 801109a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	891b      	ldrh	r3, [r3, #8]
 80110a0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80110a6:	e00c      	b.n	80110c2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80110a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110aa:	895b      	ldrh	r3, [r3, #10]
 80110ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80110b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b4:	895b      	ldrh	r3, [r3, #10]
 80110b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80110b8:	1ad3      	subs	r3, r2, r3
 80110ba:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80110bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80110c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d004      	beq.n	80110d2 <dhcp_parse_reply+0x6a>
 80110c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ca:	895b      	ldrh	r3, [r3, #10]
 80110cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d2ea      	bcs.n	80110a8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80110d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d102      	bne.n	80110de <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80110d8:	f06f 0301 	mvn.w	r3, #1
 80110dc:	e282      	b.n	80115e4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80110de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80110e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80110e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80110e4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80110e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80110ec:	e23a      	b.n	8011564 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80110ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80110f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110f2:	4413      	add	r3, r2
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80110f8:	2300      	movs	r3, #0
 80110fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80110fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011102:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011104:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011106:	3302      	adds	r3, #2
 8011108:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801110a:	8bfa      	ldrh	r2, [r7, #30]
 801110c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801110e:	429a      	cmp	r2, r3
 8011110:	d202      	bcs.n	8011118 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011112:	f06f 0301 	mvn.w	r3, #1
 8011116:	e265      	b.n	80115e4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011118:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801111a:	3301      	adds	r3, #1
 801111c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801111e:	8952      	ldrh	r2, [r2, #10]
 8011120:	4293      	cmp	r3, r2
 8011122:	da07      	bge.n	8011134 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011124:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011126:	3301      	adds	r3, #1
 8011128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801112a:	4413      	add	r3, r2
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011132:	e00b      	b.n	801114c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d004      	beq.n	8011146 <dhcp_parse_reply+0xde>
 801113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	e000      	b.n	8011148 <dhcp_parse_reply+0xe0>
 8011146:	2300      	movs	r3, #0
 8011148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801114c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011150:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011154:	7dfb      	ldrb	r3, [r7, #23]
 8011156:	2b3b      	cmp	r3, #59	; 0x3b
 8011158:	f200 812d 	bhi.w	80113b6 <dhcp_parse_reply+0x34e>
 801115c:	a201      	add	r2, pc, #4	; (adr r2, 8011164 <dhcp_parse_reply+0xfc>)
 801115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011162:	bf00      	nop
 8011164:	08011255 	.word	0x08011255
 8011168:	08011265 	.word	0x08011265
 801116c:	080113b7 	.word	0x080113b7
 8011170:	08011287 	.word	0x08011287
 8011174:	080113b7 	.word	0x080113b7
 8011178:	080113b7 	.word	0x080113b7
 801117c:	080113b7 	.word	0x080113b7
 8011180:	080113b7 	.word	0x080113b7
 8011184:	080113b7 	.word	0x080113b7
 8011188:	080113b7 	.word	0x080113b7
 801118c:	080113b7 	.word	0x080113b7
 8011190:	080113b7 	.word	0x080113b7
 8011194:	080113b7 	.word	0x080113b7
 8011198:	080113b7 	.word	0x080113b7
 801119c:	080113b7 	.word	0x080113b7
 80111a0:	080113b7 	.word	0x080113b7
 80111a4:	080113b7 	.word	0x080113b7
 80111a8:	080113b7 	.word	0x080113b7
 80111ac:	080113b7 	.word	0x080113b7
 80111b0:	080113b7 	.word	0x080113b7
 80111b4:	080113b7 	.word	0x080113b7
 80111b8:	080113b7 	.word	0x080113b7
 80111bc:	080113b7 	.word	0x080113b7
 80111c0:	080113b7 	.word	0x080113b7
 80111c4:	080113b7 	.word	0x080113b7
 80111c8:	080113b7 	.word	0x080113b7
 80111cc:	080113b7 	.word	0x080113b7
 80111d0:	080113b7 	.word	0x080113b7
 80111d4:	080113b7 	.word	0x080113b7
 80111d8:	080113b7 	.word	0x080113b7
 80111dc:	080113b7 	.word	0x080113b7
 80111e0:	080113b7 	.word	0x080113b7
 80111e4:	080113b7 	.word	0x080113b7
 80111e8:	080113b7 	.word	0x080113b7
 80111ec:	080113b7 	.word	0x080113b7
 80111f0:	080113b7 	.word	0x080113b7
 80111f4:	080113b7 	.word	0x080113b7
 80111f8:	080113b7 	.word	0x080113b7
 80111fc:	080113b7 	.word	0x080113b7
 8011200:	080113b7 	.word	0x080113b7
 8011204:	080113b7 	.word	0x080113b7
 8011208:	080113b7 	.word	0x080113b7
 801120c:	080113b7 	.word	0x080113b7
 8011210:	080113b7 	.word	0x080113b7
 8011214:	080113b7 	.word	0x080113b7
 8011218:	080113b7 	.word	0x080113b7
 801121c:	080113b7 	.word	0x080113b7
 8011220:	080113b7 	.word	0x080113b7
 8011224:	080113b7 	.word	0x080113b7
 8011228:	080113b7 	.word	0x080113b7
 801122c:	080113b7 	.word	0x080113b7
 8011230:	080112b3 	.word	0x080112b3
 8011234:	080112d5 	.word	0x080112d5
 8011238:	08011311 	.word	0x08011311
 801123c:	08011333 	.word	0x08011333
 8011240:	080113b7 	.word	0x080113b7
 8011244:	080113b7 	.word	0x080113b7
 8011248:	080113b7 	.word	0x080113b7
 801124c:	08011355 	.word	0x08011355
 8011250:	08011395 	.word	0x08011395
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011254:	2300      	movs	r3, #0
 8011256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801125e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8011262:	e0ac      	b.n	80113be <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011268:	2b04      	cmp	r3, #4
 801126a:	d009      	beq.n	8011280 <dhcp_parse_reply+0x218>
 801126c:	4b43      	ldr	r3, [pc, #268]	; (801137c <dhcp_parse_reply+0x314>)
 801126e:	f240 622e 	movw	r2, #1582	; 0x62e
 8011272:	4943      	ldr	r1, [pc, #268]	; (8011380 <dhcp_parse_reply+0x318>)
 8011274:	4843      	ldr	r0, [pc, #268]	; (8011384 <dhcp_parse_reply+0x31c>)
 8011276:	f002 ff99 	bl	80141ac <iprintf>
 801127a:	f06f 0305 	mvn.w	r3, #5
 801127e:	e1b1      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011280:	2306      	movs	r3, #6
 8011282:	623b      	str	r3, [r7, #32]
        break;
 8011284:	e09b      	b.n	80113be <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011286:	2304      	movs	r3, #4
 8011288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801128c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011290:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011294:	429a      	cmp	r2, r3
 8011296:	d209      	bcs.n	80112ac <dhcp_parse_reply+0x244>
 8011298:	4b38      	ldr	r3, [pc, #224]	; (801137c <dhcp_parse_reply+0x314>)
 801129a:	f240 6233 	movw	r2, #1587	; 0x633
 801129e:	493a      	ldr	r1, [pc, #232]	; (8011388 <dhcp_parse_reply+0x320>)
 80112a0:	4838      	ldr	r0, [pc, #224]	; (8011384 <dhcp_parse_reply+0x31c>)
 80112a2:	f002 ff83 	bl	80141ac <iprintf>
 80112a6:	f06f 0305 	mvn.w	r3, #5
 80112aa:	e19b      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80112ac:	2307      	movs	r3, #7
 80112ae:	623b      	str	r3, [r7, #32]
        break;
 80112b0:	e085      	b.n	80113be <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80112b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112b6:	2b04      	cmp	r3, #4
 80112b8:	d009      	beq.n	80112ce <dhcp_parse_reply+0x266>
 80112ba:	4b30      	ldr	r3, [pc, #192]	; (801137c <dhcp_parse_reply+0x314>)
 80112bc:	f240 6241 	movw	r2, #1601	; 0x641
 80112c0:	492f      	ldr	r1, [pc, #188]	; (8011380 <dhcp_parse_reply+0x318>)
 80112c2:	4830      	ldr	r0, [pc, #192]	; (8011384 <dhcp_parse_reply+0x31c>)
 80112c4:	f002 ff72 	bl	80141ac <iprintf>
 80112c8:	f06f 0305 	mvn.w	r3, #5
 80112cc:	e18a      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80112ce:	2303      	movs	r3, #3
 80112d0:	623b      	str	r3, [r7, #32]
        break;
 80112d2:	e074      	b.n	80113be <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80112d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d009      	beq.n	80112f0 <dhcp_parse_reply+0x288>
 80112dc:	4b27      	ldr	r3, [pc, #156]	; (801137c <dhcp_parse_reply+0x314>)
 80112de:	f240 624f 	movw	r2, #1615	; 0x64f
 80112e2:	492a      	ldr	r1, [pc, #168]	; (801138c <dhcp_parse_reply+0x324>)
 80112e4:	4827      	ldr	r0, [pc, #156]	; (8011384 <dhcp_parse_reply+0x31c>)
 80112e6:	f002 ff61 	bl	80141ac <iprintf>
 80112ea:	f06f 0305 	mvn.w	r3, #5
 80112ee:	e179      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80112f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80112f2:	2bf0      	cmp	r3, #240	; 0xf0
 80112f4:	d009      	beq.n	801130a <dhcp_parse_reply+0x2a2>
 80112f6:	4b21      	ldr	r3, [pc, #132]	; (801137c <dhcp_parse_reply+0x314>)
 80112f8:	f240 6251 	movw	r2, #1617	; 0x651
 80112fc:	4924      	ldr	r1, [pc, #144]	; (8011390 <dhcp_parse_reply+0x328>)
 80112fe:	4821      	ldr	r0, [pc, #132]	; (8011384 <dhcp_parse_reply+0x31c>)
 8011300:	f002 ff54 	bl	80141ac <iprintf>
 8011304:	f06f 0305 	mvn.w	r3, #5
 8011308:	e16c      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801130a:	2300      	movs	r3, #0
 801130c:	623b      	str	r3, [r7, #32]
        break;
 801130e:	e056      	b.n	80113be <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011314:	2b01      	cmp	r3, #1
 8011316:	d009      	beq.n	801132c <dhcp_parse_reply+0x2c4>
 8011318:	4b18      	ldr	r3, [pc, #96]	; (801137c <dhcp_parse_reply+0x314>)
 801131a:	f240 6255 	movw	r2, #1621	; 0x655
 801131e:	491b      	ldr	r1, [pc, #108]	; (801138c <dhcp_parse_reply+0x324>)
 8011320:	4818      	ldr	r0, [pc, #96]	; (8011384 <dhcp_parse_reply+0x31c>)
 8011322:	f002 ff43 	bl	80141ac <iprintf>
 8011326:	f06f 0305 	mvn.w	r3, #5
 801132a:	e15b      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801132c:	2301      	movs	r3, #1
 801132e:	623b      	str	r3, [r7, #32]
        break;
 8011330:	e045      	b.n	80113be <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011336:	2b04      	cmp	r3, #4
 8011338:	d009      	beq.n	801134e <dhcp_parse_reply+0x2e6>
 801133a:	4b10      	ldr	r3, [pc, #64]	; (801137c <dhcp_parse_reply+0x314>)
 801133c:	f240 6259 	movw	r2, #1625	; 0x659
 8011340:	490f      	ldr	r1, [pc, #60]	; (8011380 <dhcp_parse_reply+0x318>)
 8011342:	4810      	ldr	r0, [pc, #64]	; (8011384 <dhcp_parse_reply+0x31c>)
 8011344:	f002 ff32 	bl	80141ac <iprintf>
 8011348:	f06f 0305 	mvn.w	r3, #5
 801134c:	e14a      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801134e:	2302      	movs	r3, #2
 8011350:	623b      	str	r3, [r7, #32]
        break;
 8011352:	e034      	b.n	80113be <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011358:	2b04      	cmp	r3, #4
 801135a:	d009      	beq.n	8011370 <dhcp_parse_reply+0x308>
 801135c:	4b07      	ldr	r3, [pc, #28]	; (801137c <dhcp_parse_reply+0x314>)
 801135e:	f240 625d 	movw	r2, #1629	; 0x65d
 8011362:	4907      	ldr	r1, [pc, #28]	; (8011380 <dhcp_parse_reply+0x318>)
 8011364:	4807      	ldr	r0, [pc, #28]	; (8011384 <dhcp_parse_reply+0x31c>)
 8011366:	f002 ff21 	bl	80141ac <iprintf>
 801136a:	f06f 0305 	mvn.w	r3, #5
 801136e:	e139      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011370:	2304      	movs	r3, #4
 8011372:	623b      	str	r3, [r7, #32]
        break;
 8011374:	e023      	b.n	80113be <dhcp_parse_reply+0x356>
 8011376:	bf00      	nop
 8011378:	20006e6c 	.word	0x20006e6c
 801137c:	08017d64 	.word	0x08017d64
 8011380:	08017fec 	.word	0x08017fec
 8011384:	08017dc4 	.word	0x08017dc4
 8011388:	08017ff8 	.word	0x08017ff8
 801138c:	0801800c 	.word	0x0801800c
 8011390:	08018018 	.word	0x08018018
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011398:	2b04      	cmp	r3, #4
 801139a:	d009      	beq.n	80113b0 <dhcp_parse_reply+0x348>
 801139c:	4b93      	ldr	r3, [pc, #588]	; (80115ec <dhcp_parse_reply+0x584>)
 801139e:	f240 6261 	movw	r2, #1633	; 0x661
 80113a2:	4993      	ldr	r1, [pc, #588]	; (80115f0 <dhcp_parse_reply+0x588>)
 80113a4:	4893      	ldr	r0, [pc, #588]	; (80115f4 <dhcp_parse_reply+0x58c>)
 80113a6:	f002 ff01 	bl	80141ac <iprintf>
 80113aa:	f06f 0305 	mvn.w	r3, #5
 80113ae:	e119      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80113b0:	2305      	movs	r3, #5
 80113b2:	623b      	str	r3, [r7, #32]
        break;
 80113b4:	e003      	b.n	80113be <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80113b6:	2300      	movs	r3, #0
 80113b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80113bc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80113be:	7dfb      	ldrb	r3, [r7, #23]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d103      	bne.n	80113cc <dhcp_parse_reply+0x364>
      offset++;
 80113c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80113c6:	3301      	adds	r3, #1
 80113c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80113ca:	e0a1      	b.n	8011510 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80113cc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80113ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113d2:	4413      	add	r3, r2
 80113d4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80113d8:	4293      	cmp	r3, r2
 80113da:	dd02      	ble.n	80113e2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80113dc:	f06f 0301 	mvn.w	r3, #1
 80113e0:	e100      	b.n	80115e4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80113e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80113ea:	4413      	add	r3, r2
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	3302      	adds	r3, #2
 80113f0:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80113f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	f000 808a 	beq.w	8011510 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80113fc:	2300      	movs	r3, #0
 80113fe:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011400:	6a3b      	ldr	r3, [r7, #32]
 8011402:	2b00      	cmp	r3, #0
 8011404:	db02      	blt.n	801140c <dhcp_parse_reply+0x3a4>
 8011406:	6a3b      	ldr	r3, [r7, #32]
 8011408:	2b07      	cmp	r3, #7
 801140a:	dd06      	ble.n	801141a <dhcp_parse_reply+0x3b2>
 801140c:	4b77      	ldr	r3, [pc, #476]	; (80115ec <dhcp_parse_reply+0x584>)
 801140e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8011412:	4979      	ldr	r1, [pc, #484]	; (80115f8 <dhcp_parse_reply+0x590>)
 8011414:	4877      	ldr	r0, [pc, #476]	; (80115f4 <dhcp_parse_reply+0x58c>)
 8011416:	f002 fec9 	bl	80141ac <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801141a:	4a78      	ldr	r2, [pc, #480]	; (80115fc <dhcp_parse_reply+0x594>)
 801141c:	6a3b      	ldr	r3, [r7, #32]
 801141e:	4413      	add	r3, r2
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d174      	bne.n	8011510 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8011426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801142a:	2b04      	cmp	r3, #4
 801142c:	bf28      	it	cs
 801142e:	2304      	movcs	r3, #4
 8011430:	b2db      	uxtb	r3, r3
 8011432:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8011434:	8bfb      	ldrh	r3, [r7, #30]
 8011436:	8aba      	ldrh	r2, [r7, #20]
 8011438:	f107 0108 	add.w	r1, r7, #8
 801143c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801143e:	f7f7 fd87 	bl	8008f50 <pbuf_copy_partial>
 8011442:	4603      	mov	r3, r0
 8011444:	461a      	mov	r2, r3
 8011446:	8abb      	ldrh	r3, [r7, #20]
 8011448:	4293      	cmp	r3, r2
 801144a:	d002      	beq.n	8011452 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 801144c:	f06f 0301 	mvn.w	r3, #1
 8011450:	e0c8      	b.n	80115e4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8011452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011456:	2b04      	cmp	r3, #4
 8011458:	d933      	bls.n	80114c2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801145a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801145e:	f003 0303 	and.w	r3, r3, #3
 8011462:	b2db      	uxtb	r3, r3
 8011464:	2b00      	cmp	r3, #0
 8011466:	d009      	beq.n	801147c <dhcp_parse_reply+0x414>
 8011468:	4b60      	ldr	r3, [pc, #384]	; (80115ec <dhcp_parse_reply+0x584>)
 801146a:	f240 6281 	movw	r2, #1665	; 0x681
 801146e:	4964      	ldr	r1, [pc, #400]	; (8011600 <dhcp_parse_reply+0x598>)
 8011470:	4860      	ldr	r0, [pc, #384]	; (80115f4 <dhcp_parse_reply+0x58c>)
 8011472:	f002 fe9b 	bl	80141ac <iprintf>
 8011476:	f06f 0305 	mvn.w	r3, #5
 801147a:	e0b3      	b.n	80115e4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801147c:	4a5f      	ldr	r2, [pc, #380]	; (80115fc <dhcp_parse_reply+0x594>)
 801147e:	6a3b      	ldr	r3, [r7, #32]
 8011480:	4413      	add	r3, r2
 8011482:	2201      	movs	r2, #1
 8011484:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	4618      	mov	r0, r3
 801148a:	f7f6 f856 	bl	800753a <lwip_htonl>
 801148e:	4602      	mov	r2, r0
 8011490:	495c      	ldr	r1, [pc, #368]	; (8011604 <dhcp_parse_reply+0x59c>)
 8011492:	6a3b      	ldr	r3, [r7, #32]
 8011494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801149c:	3b04      	subs	r3, #4
 801149e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80114a2:	8bfb      	ldrh	r3, [r7, #30]
 80114a4:	3304      	adds	r3, #4
 80114a6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80114a8:	8a7a      	ldrh	r2, [r7, #18]
 80114aa:	8bfb      	ldrh	r3, [r7, #30]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d202      	bcs.n	80114b6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80114b0:	f06f 0301 	mvn.w	r3, #1
 80114b4:	e096      	b.n	80115e4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80114b6:	8a7b      	ldrh	r3, [r7, #18]
 80114b8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	3301      	adds	r3, #1
 80114be:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80114c0:	e79e      	b.n	8011400 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80114c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80114c6:	2b04      	cmp	r3, #4
 80114c8:	d106      	bne.n	80114d8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7f6 f834 	bl	800753a <lwip_htonl>
 80114d2:	4603      	mov	r3, r0
 80114d4:	60bb      	str	r3, [r7, #8]
 80114d6:	e011      	b.n	80114fc <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80114d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80114dc:	2b01      	cmp	r3, #1
 80114de:	d009      	beq.n	80114f4 <dhcp_parse_reply+0x48c>
 80114e0:	4b42      	ldr	r3, [pc, #264]	; (80115ec <dhcp_parse_reply+0x584>)
 80114e2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80114e6:	4948      	ldr	r1, [pc, #288]	; (8011608 <dhcp_parse_reply+0x5a0>)
 80114e8:	4842      	ldr	r0, [pc, #264]	; (80115f4 <dhcp_parse_reply+0x58c>)
 80114ea:	f002 fe5f 	bl	80141ac <iprintf>
 80114ee:	f06f 0305 	mvn.w	r3, #5
 80114f2:	e077      	b.n	80115e4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80114f4:	f107 0308 	add.w	r3, r7, #8
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80114fc:	4a3f      	ldr	r2, [pc, #252]	; (80115fc <dhcp_parse_reply+0x594>)
 80114fe:	6a3b      	ldr	r3, [r7, #32]
 8011500:	4413      	add	r3, r2
 8011502:	2201      	movs	r2, #1
 8011504:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	493e      	ldr	r1, [pc, #248]	; (8011604 <dhcp_parse_reply+0x59c>)
 801150a:	6a3b      	ldr	r3, [r7, #32]
 801150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011512:	895b      	ldrh	r3, [r3, #10]
 8011514:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011516:	429a      	cmp	r2, r3
 8011518:	d324      	bcc.n	8011564 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	895b      	ldrh	r3, [r3, #10]
 801151e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011526:	895b      	ldrh	r3, [r3, #10]
 8011528:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801152e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011530:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011532:	429a      	cmp	r2, r3
 8011534:	d213      	bcs.n	801155e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153e:	2b00      	cmp	r3, #0
 8011540:	d109      	bne.n	8011556 <dhcp_parse_reply+0x4ee>
 8011542:	4b2a      	ldr	r3, [pc, #168]	; (80115ec <dhcp_parse_reply+0x584>)
 8011544:	f240 629d 	movw	r2, #1693	; 0x69d
 8011548:	4930      	ldr	r1, [pc, #192]	; (801160c <dhcp_parse_reply+0x5a4>)
 801154a:	482a      	ldr	r0, [pc, #168]	; (80115f4 <dhcp_parse_reply+0x58c>)
 801154c:	f002 fe2e 	bl	80141ac <iprintf>
 8011550:	f06f 0305 	mvn.w	r3, #5
 8011554:	e046      	b.n	80115e4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801155c:	e002      	b.n	8011564 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801155e:	f06f 0301 	mvn.w	r3, #1
 8011562:	e03f      	b.n	80115e4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00a      	beq.n	8011580 <dhcp_parse_reply+0x518>
 801156a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801156c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801156e:	429a      	cmp	r2, r3
 8011570:	d206      	bcs.n	8011580 <dhcp_parse_reply+0x518>
 8011572:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011576:	4413      	add	r3, r2
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	2bff      	cmp	r3, #255	; 0xff
 801157c:	f47f adb7 	bne.w	80110ee <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011580:	4b1e      	ldr	r3, [pc, #120]	; (80115fc <dhcp_parse_reply+0x594>)
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d018      	beq.n	80115ba <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011588:	4b1e      	ldr	r3, [pc, #120]	; (8011604 <dhcp_parse_reply+0x59c>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801158e:	4b1b      	ldr	r3, [pc, #108]	; (80115fc <dhcp_parse_reply+0x594>)
 8011590:	2200      	movs	r2, #0
 8011592:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2b01      	cmp	r3, #1
 8011598:	d102      	bne.n	80115a0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801159a:	2301      	movs	r3, #1
 801159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801159e:	e00c      	b.n	80115ba <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b02      	cmp	r3, #2
 80115a4:	d102      	bne.n	80115ac <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80115a6:	2301      	movs	r3, #1
 80115a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80115aa:	e006      	b.n	80115ba <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2b03      	cmp	r3, #3
 80115b0:	d103      	bne.n	80115ba <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80115b2:	2301      	movs	r3, #1
 80115b4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80115b6:	2301      	movs	r3, #1
 80115b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80115ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d006      	beq.n	80115ce <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80115c4:	236c      	movs	r3, #108	; 0x6c
 80115c6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80115c8:	23ec      	movs	r3, #236	; 0xec
 80115ca:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80115cc:	e569      	b.n	80110a2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80115ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d006      	beq.n	80115e2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80115d4:	2300      	movs	r3, #0
 80115d6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80115d8:	232c      	movs	r3, #44	; 0x2c
 80115da:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80115dc:	236c      	movs	r3, #108	; 0x6c
 80115de:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80115e0:	e55f      	b.n	80110a2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3740      	adds	r7, #64	; 0x40
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	08017d64 	.word	0x08017d64
 80115f0:	08017fec 	.word	0x08017fec
 80115f4:	08017dc4 	.word	0x08017dc4
 80115f8:	08018030 	.word	0x08018030
 80115fc:	20006e6c 	.word	0x20006e6c
 8011600:	08018044 	.word	0x08018044
 8011604:	20006e74 	.word	0x20006e74
 8011608:	0801805c 	.word	0x0801805c
 801160c:	08018070 	.word	0x08018070

08011610 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b08a      	sub	sp, #40	; 0x28
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]
 801161c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801161e:	4b60      	ldr	r3, [pc, #384]	; (80117a0 <dhcp_recv+0x190>)
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011628:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	2b00      	cmp	r3, #0
 8011634:	f000 809d 	beq.w	8011772 <dhcp_recv+0x162>
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	791b      	ldrb	r3, [r3, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	f000 8098 	beq.w	8011772 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	895b      	ldrh	r3, [r3, #10]
 8011646:	2b2b      	cmp	r3, #43	; 0x2b
 8011648:	f240 8095 	bls.w	8011776 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	2b02      	cmp	r3, #2
 8011652:	f040 8092 	bne.w	801177a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011656:	2300      	movs	r3, #0
 8011658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801165c:	e012      	b.n	8011684 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801165e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011662:	6a3a      	ldr	r2, [r7, #32]
 8011664:	4413      	add	r3, r2
 8011666:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801166a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801166e:	69b9      	ldr	r1, [r7, #24]
 8011670:	440b      	add	r3, r1
 8011672:	7f1b      	ldrb	r3, [r3, #28]
 8011674:	429a      	cmp	r2, r3
 8011676:	f040 8082 	bne.w	801177e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801167a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801167e:	3301      	adds	r3, #1
 8011680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011684:	6a3b      	ldr	r3, [r7, #32]
 8011686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801168a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801168e:	429a      	cmp	r2, r3
 8011690:	d203      	bcs.n	801169a <dhcp_recv+0x8a>
 8011692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011696:	2b05      	cmp	r3, #5
 8011698:	d9e1      	bls.n	801165e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	4618      	mov	r0, r3
 80116a0:	f7f5 ff4b 	bl	800753a <lwip_htonl>
 80116a4:	4602      	mov	r2, r0
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d169      	bne.n	8011782 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80116ae:	69f9      	ldr	r1, [r7, #28]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7ff fcd9 	bl	8011068 <dhcp_parse_reply>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d164      	bne.n	8011786 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80116bc:	4b39      	ldr	r3, [pc, #228]	; (80117a4 <dhcp_recv+0x194>)
 80116be:	785b      	ldrb	r3, [r3, #1]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d062      	beq.n	801178a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80116ca:	4b37      	ldr	r3, [pc, #220]	; (80117a8 <dhcp_recv+0x198>)
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80116d0:	7cfb      	ldrb	r3, [r7, #19]
 80116d2:	2b05      	cmp	r3, #5
 80116d4:	d12a      	bne.n	801172c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	795b      	ldrb	r3, [r3, #5]
 80116da:	2b01      	cmp	r3, #1
 80116dc:	d112      	bne.n	8011704 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80116de:	6979      	ldr	r1, [r7, #20]
 80116e0:	6a38      	ldr	r0, [r7, #32]
 80116e2:	f7fe fe53 	bl	801038c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80116e6:	6a3b      	ldr	r3, [r7, #32]
 80116e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116ec:	f003 0308 	and.w	r3, r3, #8
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d003      	beq.n	80116fc <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80116f4:	6a38      	ldr	r0, [r7, #32]
 80116f6:	f7fe fbc1 	bl	800fe7c <dhcp_check>
 80116fa:	e049      	b.n	8011790 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80116fc:	6a38      	ldr	r0, [r7, #32]
 80116fe:	f7ff f867 	bl	80107d0 <dhcp_bind>
 8011702:	e045      	b.n	8011790 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	795b      	ldrb	r3, [r3, #5]
 8011708:	2b03      	cmp	r3, #3
 801170a:	d007      	beq.n	801171c <dhcp_recv+0x10c>
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	795b      	ldrb	r3, [r3, #5]
 8011710:	2b04      	cmp	r3, #4
 8011712:	d003      	beq.n	801171c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011718:	2b05      	cmp	r3, #5
 801171a:	d139      	bne.n	8011790 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801171c:	6979      	ldr	r1, [r7, #20]
 801171e:	6a38      	ldr	r0, [r7, #32]
 8011720:	f7fe fe34 	bl	801038c <dhcp_handle_ack>
      dhcp_bind(netif);
 8011724:	6a38      	ldr	r0, [r7, #32]
 8011726:	f7ff f853 	bl	80107d0 <dhcp_bind>
 801172a:	e031      	b.n	8011790 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801172c:	7cfb      	ldrb	r3, [r7, #19]
 801172e:	2b06      	cmp	r3, #6
 8011730:	d113      	bne.n	801175a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011732:	69fb      	ldr	r3, [r7, #28]
 8011734:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8011736:	2b03      	cmp	r3, #3
 8011738:	d00b      	beq.n	8011752 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	795b      	ldrb	r3, [r3, #5]
 801173e:	2b01      	cmp	r3, #1
 8011740:	d007      	beq.n	8011752 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011746:	2b04      	cmp	r3, #4
 8011748:	d003      	beq.n	8011752 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	795b      	ldrb	r3, [r3, #5]
 801174e:	2b05      	cmp	r3, #5
 8011750:	d103      	bne.n	801175a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8011752:	6a38      	ldr	r0, [r7, #32]
 8011754:	f7fe fb78 	bl	800fe48 <dhcp_handle_nak>
 8011758:	e01a      	b.n	8011790 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801175a:	7cfb      	ldrb	r3, [r7, #19]
 801175c:	2b02      	cmp	r3, #2
 801175e:	d116      	bne.n	801178e <dhcp_recv+0x17e>
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	795b      	ldrb	r3, [r3, #5]
 8011764:	2b06      	cmp	r3, #6
 8011766:	d112      	bne.n	801178e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011768:	6979      	ldr	r1, [r7, #20]
 801176a:	6a38      	ldr	r0, [r7, #32]
 801176c:	f7fe fbba 	bl	800fee4 <dhcp_handle_offer>
 8011770:	e00e      	b.n	8011790 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011772:	bf00      	nop
 8011774:	e00c      	b.n	8011790 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011776:	bf00      	nop
 8011778:	e00a      	b.n	8011790 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801177a:	bf00      	nop
 801177c:	e008      	b.n	8011790 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801177e:	bf00      	nop
 8011780:	e006      	b.n	8011790 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011782:	bf00      	nop
 8011784:	e004      	b.n	8011790 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011786:	bf00      	nop
 8011788:	e002      	b.n	8011790 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801178a:	bf00      	nop
 801178c:	e000      	b.n	8011790 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801178e:	bf00      	nop
  pbuf_free(p);
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f7f7 f9e3 	bl	8008b5c <pbuf_free>
}
 8011796:	bf00      	nop
 8011798:	3728      	adds	r7, #40	; 0x28
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	200038ec 	.word	0x200038ec
 80117a4:	20006e6c 	.word	0x20006e6c
 80117a8:	20006e74 	.word	0x20006e74

080117ac <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b088      	sub	sp, #32
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	603b      	str	r3, [r7, #0]
 80117b8:	4613      	mov	r3, r2
 80117ba:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d108      	bne.n	80117d4 <dhcp_create_msg+0x28>
 80117c2:	4b5f      	ldr	r3, [pc, #380]	; (8011940 <dhcp_create_msg+0x194>)
 80117c4:	f240 7269 	movw	r2, #1897	; 0x769
 80117c8:	495e      	ldr	r1, [pc, #376]	; (8011944 <dhcp_create_msg+0x198>)
 80117ca:	485f      	ldr	r0, [pc, #380]	; (8011948 <dhcp_create_msg+0x19c>)
 80117cc:	f002 fcee 	bl	80141ac <iprintf>
 80117d0:	2300      	movs	r3, #0
 80117d2:	e0b1      	b.n	8011938 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d108      	bne.n	80117ec <dhcp_create_msg+0x40>
 80117da:	4b59      	ldr	r3, [pc, #356]	; (8011940 <dhcp_create_msg+0x194>)
 80117dc:	f240 726a 	movw	r2, #1898	; 0x76a
 80117e0:	495a      	ldr	r1, [pc, #360]	; (801194c <dhcp_create_msg+0x1a0>)
 80117e2:	4859      	ldr	r0, [pc, #356]	; (8011948 <dhcp_create_msg+0x19c>)
 80117e4:	f002 fce2 	bl	80141ac <iprintf>
 80117e8:	2300      	movs	r3, #0
 80117ea:	e0a5      	b.n	8011938 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80117ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117f0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80117f4:	2036      	movs	r0, #54	; 0x36
 80117f6:	f7f6 fecd 	bl	8008594 <pbuf_alloc>
 80117fa:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d101      	bne.n	8011806 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011802:	2300      	movs	r3, #0
 8011804:	e098      	b.n	8011938 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	895b      	ldrh	r3, [r3, #10]
 801180a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801180e:	d206      	bcs.n	801181e <dhcp_create_msg+0x72>
 8011810:	4b4b      	ldr	r3, [pc, #300]	; (8011940 <dhcp_create_msg+0x194>)
 8011812:	f240 7271 	movw	r2, #1905	; 0x771
 8011816:	494e      	ldr	r1, [pc, #312]	; (8011950 <dhcp_create_msg+0x1a4>)
 8011818:	484b      	ldr	r0, [pc, #300]	; (8011948 <dhcp_create_msg+0x19c>)
 801181a:	f002 fcc7 	bl	80141ac <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801181e:	79fb      	ldrb	r3, [r7, #7]
 8011820:	2b03      	cmp	r3, #3
 8011822:	d103      	bne.n	801182c <dhcp_create_msg+0x80>
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	795b      	ldrb	r3, [r3, #5]
 8011828:	2b03      	cmp	r3, #3
 801182a:	d10d      	bne.n	8011848 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	799b      	ldrb	r3, [r3, #6]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d105      	bne.n	8011840 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8011834:	f002 fd48 	bl	80142c8 <rand>
 8011838:	4603      	mov	r3, r0
 801183a:	461a      	mov	r2, r3
 801183c:	4b45      	ldr	r3, [pc, #276]	; (8011954 <dhcp_create_msg+0x1a8>)
 801183e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011840:	4b44      	ldr	r3, [pc, #272]	; (8011954 <dhcp_create_msg+0x1a8>)
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801184e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8011852:	2100      	movs	r1, #0
 8011854:	6978      	ldr	r0, [r7, #20]
 8011856:	f002 fca1 	bl	801419c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	2201      	movs	r2, #1
 801185e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	2201      	movs	r2, #1
 8011864:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4618      	mov	r0, r3
 8011876:	f7f5 fe60 	bl	800753a <lwip_htonl>
 801187a:	4602      	mov	r2, r0
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011880:	79fb      	ldrb	r3, [r7, #7]
 8011882:	2b08      	cmp	r3, #8
 8011884:	d010      	beq.n	80118a8 <dhcp_create_msg+0xfc>
 8011886:	79fb      	ldrb	r3, [r7, #7]
 8011888:	2b04      	cmp	r3, #4
 801188a:	d00d      	beq.n	80118a8 <dhcp_create_msg+0xfc>
 801188c:	79fb      	ldrb	r3, [r7, #7]
 801188e:	2b07      	cmp	r3, #7
 8011890:	d00a      	beq.n	80118a8 <dhcp_create_msg+0xfc>
 8011892:	79fb      	ldrb	r3, [r7, #7]
 8011894:	2b03      	cmp	r3, #3
 8011896:	d10c      	bne.n	80118b2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801189c:	2b05      	cmp	r3, #5
 801189e:	d003      	beq.n	80118a8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	795b      	ldrb	r3, [r3, #5]
 80118a4:	2b04      	cmp	r3, #4
 80118a6:	d104      	bne.n	80118b2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	3304      	adds	r3, #4
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80118b2:	2300      	movs	r3, #0
 80118b4:	83fb      	strh	r3, [r7, #30]
 80118b6:	e00c      	b.n	80118d2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80118b8:	8bfa      	ldrh	r2, [r7, #30]
 80118ba:	8bfb      	ldrh	r3, [r7, #30]
 80118bc:	68f9      	ldr	r1, [r7, #12]
 80118be:	440a      	add	r2, r1
 80118c0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	4413      	add	r3, r2
 80118c8:	460a      	mov	r2, r1
 80118ca:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80118cc:	8bfb      	ldrh	r3, [r7, #30]
 80118ce:	3301      	adds	r3, #1
 80118d0:	83fb      	strh	r3, [r7, #30]
 80118d2:	8bfb      	ldrh	r3, [r7, #30]
 80118d4:	2b05      	cmp	r3, #5
 80118d6:	d9ef      	bls.n	80118b8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	2200      	movs	r2, #0
 80118dc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80118e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80118e4:	2200      	movs	r2, #0
 80118e6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80118ea:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80118ee:	2200      	movs	r2, #0
 80118f0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80118f4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80118f8:	2200      	movs	r2, #0
 80118fa:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80118fe:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011908:	2301      	movs	r3, #1
 801190a:	2235      	movs	r2, #53	; 0x35
 801190c:	2000      	movs	r0, #0
 801190e:	f7ff fadb 	bl	8010ec8 <dhcp_option>
 8011912:	4603      	mov	r3, r0
 8011914:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801191c:	79fa      	ldrb	r2, [r7, #7]
 801191e:	8a7b      	ldrh	r3, [r7, #18]
 8011920:	4618      	mov	r0, r3
 8011922:	f7ff fb05 	bl	8010f30 <dhcp_option_byte>
 8011926:	4603      	mov	r3, r0
 8011928:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d002      	beq.n	8011936 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	8a7a      	ldrh	r2, [r7, #18]
 8011934:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8011936:	69bb      	ldr	r3, [r7, #24]
}
 8011938:	4618      	mov	r0, r3
 801193a:	3720      	adds	r7, #32
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	08017d64 	.word	0x08017d64
 8011944:	08018084 	.word	0x08018084
 8011948:	08017dc4 	.word	0x08017dc4
 801194c:	080180a4 	.word	0x080180a4
 8011950:	080180c4 	.word	0x080180c4
 8011954:	2000057c 	.word	0x2000057c

08011958 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	60b9      	str	r1, [r7, #8]
 8011962:	607a      	str	r2, [r7, #4]
 8011964:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8011966:	89fb      	ldrh	r3, [r7, #14]
 8011968:	1c5a      	adds	r2, r3, #1
 801196a:	81fa      	strh	r2, [r7, #14]
 801196c:	461a      	mov	r2, r3
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	4413      	add	r3, r2
 8011972:	22ff      	movs	r2, #255	; 0xff
 8011974:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011976:	e007      	b.n	8011988 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011978:	89fb      	ldrh	r3, [r7, #14]
 801197a:	1c5a      	adds	r2, r3, #1
 801197c:	81fa      	strh	r2, [r7, #14]
 801197e:	461a      	mov	r2, r3
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	4413      	add	r3, r2
 8011984:	2200      	movs	r2, #0
 8011986:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011988:	89fb      	ldrh	r3, [r7, #14]
 801198a:	2b43      	cmp	r3, #67	; 0x43
 801198c:	d904      	bls.n	8011998 <dhcp_option_trailer+0x40>
 801198e:	89fb      	ldrh	r3, [r7, #14]
 8011990:	f003 0303 	and.w	r3, r3, #3
 8011994:	2b00      	cmp	r3, #0
 8011996:	d002      	beq.n	801199e <dhcp_option_trailer+0x46>
 8011998:	89fb      	ldrh	r3, [r7, #14]
 801199a:	2b43      	cmp	r3, #67	; 0x43
 801199c:	d9ec      	bls.n	8011978 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801199e:	89fb      	ldrh	r3, [r7, #14]
 80119a0:	33f0      	adds	r3, #240	; 0xf0
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	4619      	mov	r1, r3
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7f6 ff52 	bl	8008850 <pbuf_realloc>
}
 80119ac:	bf00      	nop
 80119ae:	3710      	adds	r7, #16
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b085      	sub	sp, #20
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d017      	beq.n	80119f2 <dhcp_supplied_address+0x3e>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d013      	beq.n	80119f2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ce:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	795b      	ldrb	r3, [r3, #5]
 80119d4:	2b0a      	cmp	r3, #10
 80119d6:	d007      	beq.n	80119e8 <dhcp_supplied_address+0x34>
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	795b      	ldrb	r3, [r3, #5]
 80119dc:	2b05      	cmp	r3, #5
 80119de:	d003      	beq.n	80119e8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	d101      	bne.n	80119ec <dhcp_supplied_address+0x38>
 80119e8:	2301      	movs	r3, #1
 80119ea:	e000      	b.n	80119ee <dhcp_supplied_address+0x3a>
 80119ec:	2300      	movs	r3, #0
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	e000      	b.n	80119f4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011a08:	4915      	ldr	r1, [pc, #84]	; (8011a60 <etharp_free_entry+0x60>)
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	4413      	add	r3, r2
 8011a12:	00db      	lsls	r3, r3, #3
 8011a14:	440b      	add	r3, r1
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d013      	beq.n	8011a44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011a1c:	4910      	ldr	r1, [pc, #64]	; (8011a60 <etharp_free_entry+0x60>)
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	4613      	mov	r3, r2
 8011a22:	005b      	lsls	r3, r3, #1
 8011a24:	4413      	add	r3, r2
 8011a26:	00db      	lsls	r3, r3, #3
 8011a28:	440b      	add	r3, r1
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7f7 f895 	bl	8008b5c <pbuf_free>
    arp_table[i].q = NULL;
 8011a32:	490b      	ldr	r1, [pc, #44]	; (8011a60 <etharp_free_entry+0x60>)
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	4613      	mov	r3, r2
 8011a38:	005b      	lsls	r3, r3, #1
 8011a3a:	4413      	add	r3, r2
 8011a3c:	00db      	lsls	r3, r3, #3
 8011a3e:	440b      	add	r3, r1
 8011a40:	2200      	movs	r2, #0
 8011a42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011a44:	4906      	ldr	r1, [pc, #24]	; (8011a60 <etharp_free_entry+0x60>)
 8011a46:	687a      	ldr	r2, [r7, #4]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	005b      	lsls	r3, r3, #1
 8011a4c:	4413      	add	r3, r2
 8011a4e:	00db      	lsls	r3, r3, #3
 8011a50:	440b      	add	r3, r1
 8011a52:	3314      	adds	r3, #20
 8011a54:	2200      	movs	r2, #0
 8011a56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011a58:	bf00      	nop
 8011a5a:	3708      	adds	r7, #8
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	20000580 	.word	0x20000580

08011a64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	607b      	str	r3, [r7, #4]
 8011a6e:	e096      	b.n	8011b9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011a70:	494f      	ldr	r1, [pc, #316]	; (8011bb0 <etharp_tmr+0x14c>)
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	4613      	mov	r3, r2
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	4413      	add	r3, r2
 8011a7a:	00db      	lsls	r3, r3, #3
 8011a7c:	440b      	add	r3, r1
 8011a7e:	3314      	adds	r3, #20
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011a84:	78fb      	ldrb	r3, [r7, #3]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	f000 8086 	beq.w	8011b98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011a8c:	4948      	ldr	r1, [pc, #288]	; (8011bb0 <etharp_tmr+0x14c>)
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	4613      	mov	r3, r2
 8011a92:	005b      	lsls	r3, r3, #1
 8011a94:	4413      	add	r3, r2
 8011a96:	00db      	lsls	r3, r3, #3
 8011a98:	440b      	add	r3, r1
 8011a9a:	3312      	adds	r3, #18
 8011a9c:	881b      	ldrh	r3, [r3, #0]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	b298      	uxth	r0, r3
 8011aa2:	4943      	ldr	r1, [pc, #268]	; (8011bb0 <etharp_tmr+0x14c>)
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	3312      	adds	r3, #18
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011ab6:	493e      	ldr	r1, [pc, #248]	; (8011bb0 <etharp_tmr+0x14c>)
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	4613      	mov	r3, r2
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	4413      	add	r3, r2
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	440b      	add	r3, r1
 8011ac4:	3312      	adds	r3, #18
 8011ac6:	881b      	ldrh	r3, [r3, #0]
 8011ac8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011acc:	d215      	bcs.n	8011afa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011ace:	4938      	ldr	r1, [pc, #224]	; (8011bb0 <etharp_tmr+0x14c>)
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	4413      	add	r3, r2
 8011ad8:	00db      	lsls	r3, r3, #3
 8011ada:	440b      	add	r3, r1
 8011adc:	3314      	adds	r3, #20
 8011ade:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d10e      	bne.n	8011b02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011ae4:	4932      	ldr	r1, [pc, #200]	; (8011bb0 <etharp_tmr+0x14c>)
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	005b      	lsls	r3, r3, #1
 8011aec:	4413      	add	r3, r2
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	440b      	add	r3, r1
 8011af2:	3312      	adds	r3, #18
 8011af4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011af6:	2b04      	cmp	r3, #4
 8011af8:	d903      	bls.n	8011b02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f7ff ff80 	bl	8011a00 <etharp_free_entry>
 8011b00:	e04a      	b.n	8011b98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011b02:	492b      	ldr	r1, [pc, #172]	; (8011bb0 <etharp_tmr+0x14c>)
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	4613      	mov	r3, r2
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	4413      	add	r3, r2
 8011b0c:	00db      	lsls	r3, r3, #3
 8011b0e:	440b      	add	r3, r1
 8011b10:	3314      	adds	r3, #20
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	d10a      	bne.n	8011b2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011b18:	4925      	ldr	r1, [pc, #148]	; (8011bb0 <etharp_tmr+0x14c>)
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	005b      	lsls	r3, r3, #1
 8011b20:	4413      	add	r3, r2
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	440b      	add	r3, r1
 8011b26:	3314      	adds	r3, #20
 8011b28:	2204      	movs	r2, #4
 8011b2a:	701a      	strb	r2, [r3, #0]
 8011b2c:	e034      	b.n	8011b98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011b2e:	4920      	ldr	r1, [pc, #128]	; (8011bb0 <etharp_tmr+0x14c>)
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	4613      	mov	r3, r2
 8011b34:	005b      	lsls	r3, r3, #1
 8011b36:	4413      	add	r3, r2
 8011b38:	00db      	lsls	r3, r3, #3
 8011b3a:	440b      	add	r3, r1
 8011b3c:	3314      	adds	r3, #20
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	2b04      	cmp	r3, #4
 8011b42:	d10a      	bne.n	8011b5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011b44:	491a      	ldr	r1, [pc, #104]	; (8011bb0 <etharp_tmr+0x14c>)
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	4613      	mov	r3, r2
 8011b4a:	005b      	lsls	r3, r3, #1
 8011b4c:	4413      	add	r3, r2
 8011b4e:	00db      	lsls	r3, r3, #3
 8011b50:	440b      	add	r3, r1
 8011b52:	3314      	adds	r3, #20
 8011b54:	2202      	movs	r2, #2
 8011b56:	701a      	strb	r2, [r3, #0]
 8011b58:	e01e      	b.n	8011b98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011b5a:	4915      	ldr	r1, [pc, #84]	; (8011bb0 <etharp_tmr+0x14c>)
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	005b      	lsls	r3, r3, #1
 8011b62:	4413      	add	r3, r2
 8011b64:	00db      	lsls	r3, r3, #3
 8011b66:	440b      	add	r3, r1
 8011b68:	3314      	adds	r3, #20
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d113      	bne.n	8011b98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011b70:	490f      	ldr	r1, [pc, #60]	; (8011bb0 <etharp_tmr+0x14c>)
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	4613      	mov	r3, r2
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	4413      	add	r3, r2
 8011b7a:	00db      	lsls	r3, r3, #3
 8011b7c:	440b      	add	r3, r1
 8011b7e:	3308      	adds	r3, #8
 8011b80:	6818      	ldr	r0, [r3, #0]
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	4613      	mov	r3, r2
 8011b86:	005b      	lsls	r3, r3, #1
 8011b88:	4413      	add	r3, r2
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	4a08      	ldr	r2, [pc, #32]	; (8011bb0 <etharp_tmr+0x14c>)
 8011b8e:	4413      	add	r3, r2
 8011b90:	3304      	adds	r3, #4
 8011b92:	4619      	mov	r1, r3
 8011b94:	f000 fe72 	bl	801287c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	607b      	str	r3, [r7, #4]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b09      	cmp	r3, #9
 8011ba2:	f77f af65 	ble.w	8011a70 <etharp_tmr+0xc>
      }
    }
  }
}
 8011ba6:	bf00      	nop
 8011ba8:	bf00      	nop
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	20000580 	.word	0x20000580

08011bb4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b08a      	sub	sp, #40	; 0x28
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	607a      	str	r2, [r7, #4]
 8011bc0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011bc2:	230a      	movs	r3, #10
 8011bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011bc6:	230a      	movs	r3, #10
 8011bc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011bca:	230a      	movs	r3, #10
 8011bcc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011bd2:	230a      	movs	r3, #10
 8011bd4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	83bb      	strh	r3, [r7, #28]
 8011bda:	2300      	movs	r3, #0
 8011bdc:	837b      	strh	r3, [r7, #26]
 8011bde:	2300      	movs	r3, #0
 8011be0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011be2:	2300      	movs	r3, #0
 8011be4:	843b      	strh	r3, [r7, #32]
 8011be6:	e0ae      	b.n	8011d46 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011be8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bec:	49a6      	ldr	r1, [pc, #664]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011bee:	4613      	mov	r3, r2
 8011bf0:	005b      	lsls	r3, r3, #1
 8011bf2:	4413      	add	r3, r2
 8011bf4:	00db      	lsls	r3, r3, #3
 8011bf6:	440b      	add	r3, r1
 8011bf8:	3314      	adds	r3, #20
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011bfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011c02:	2b0a      	cmp	r3, #10
 8011c04:	d105      	bne.n	8011c12 <etharp_find_entry+0x5e>
 8011c06:	7dfb      	ldrb	r3, [r7, #23]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d102      	bne.n	8011c12 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011c0c:	8c3b      	ldrh	r3, [r7, #32]
 8011c0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011c10:	e095      	b.n	8011d3e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011c12:	7dfb      	ldrb	r3, [r7, #23]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f000 8092 	beq.w	8011d3e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011c1a:	7dfb      	ldrb	r3, [r7, #23]
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d009      	beq.n	8011c34 <etharp_find_entry+0x80>
 8011c20:	7dfb      	ldrb	r3, [r7, #23]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d806      	bhi.n	8011c34 <etharp_find_entry+0x80>
 8011c26:	4b99      	ldr	r3, [pc, #612]	; (8011e8c <etharp_find_entry+0x2d8>)
 8011c28:	f240 1223 	movw	r2, #291	; 0x123
 8011c2c:	4998      	ldr	r1, [pc, #608]	; (8011e90 <etharp_find_entry+0x2dc>)
 8011c2e:	4899      	ldr	r0, [pc, #612]	; (8011e94 <etharp_find_entry+0x2e0>)
 8011c30:	f002 fabc 	bl	80141ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d020      	beq.n	8011c7c <etharp_find_entry+0xc8>
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6819      	ldr	r1, [r3, #0]
 8011c3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c42:	4891      	ldr	r0, [pc, #580]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011c44:	4613      	mov	r3, r2
 8011c46:	005b      	lsls	r3, r3, #1
 8011c48:	4413      	add	r3, r2
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	4403      	add	r3, r0
 8011c4e:	3304      	adds	r3, #4
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	4299      	cmp	r1, r3
 8011c54:	d112      	bne.n	8011c7c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d00c      	beq.n	8011c76 <etharp_find_entry+0xc2>
 8011c5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c60:	4989      	ldr	r1, [pc, #548]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011c62:	4613      	mov	r3, r2
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	4413      	add	r3, r2
 8011c68:	00db      	lsls	r3, r3, #3
 8011c6a:	440b      	add	r3, r1
 8011c6c:	3308      	adds	r3, #8
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d102      	bne.n	8011c7c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011c76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c7a:	e100      	b.n	8011e7e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011c7c:	7dfb      	ldrb	r3, [r7, #23]
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	d140      	bne.n	8011d04 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011c82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c86:	4980      	ldr	r1, [pc, #512]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011c88:	4613      	mov	r3, r2
 8011c8a:	005b      	lsls	r3, r3, #1
 8011c8c:	4413      	add	r3, r2
 8011c8e:	00db      	lsls	r3, r3, #3
 8011c90:	440b      	add	r3, r1
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d01a      	beq.n	8011cce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011c98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c9c:	497a      	ldr	r1, [pc, #488]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	005b      	lsls	r3, r3, #1
 8011ca2:	4413      	add	r3, r2
 8011ca4:	00db      	lsls	r3, r3, #3
 8011ca6:	440b      	add	r3, r1
 8011ca8:	3312      	adds	r3, #18
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	8bba      	ldrh	r2, [r7, #28]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d845      	bhi.n	8011d3e <etharp_find_entry+0x18a>
            old_queue = i;
 8011cb2:	8c3b      	ldrh	r3, [r7, #32]
 8011cb4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011cb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cba:	4973      	ldr	r1, [pc, #460]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	005b      	lsls	r3, r3, #1
 8011cc0:	4413      	add	r3, r2
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	440b      	add	r3, r1
 8011cc6:	3312      	adds	r3, #18
 8011cc8:	881b      	ldrh	r3, [r3, #0]
 8011cca:	83bb      	strh	r3, [r7, #28]
 8011ccc:	e037      	b.n	8011d3e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cd2:	496d      	ldr	r1, [pc, #436]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011cd4:	4613      	mov	r3, r2
 8011cd6:	005b      	lsls	r3, r3, #1
 8011cd8:	4413      	add	r3, r2
 8011cda:	00db      	lsls	r3, r3, #3
 8011cdc:	440b      	add	r3, r1
 8011cde:	3312      	adds	r3, #18
 8011ce0:	881b      	ldrh	r3, [r3, #0]
 8011ce2:	8b7a      	ldrh	r2, [r7, #26]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d82a      	bhi.n	8011d3e <etharp_find_entry+0x18a>
            old_pending = i;
 8011ce8:	8c3b      	ldrh	r3, [r7, #32]
 8011cea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011cec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cf0:	4965      	ldr	r1, [pc, #404]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	4413      	add	r3, r2
 8011cf8:	00db      	lsls	r3, r3, #3
 8011cfa:	440b      	add	r3, r1
 8011cfc:	3312      	adds	r3, #18
 8011cfe:	881b      	ldrh	r3, [r3, #0]
 8011d00:	837b      	strh	r3, [r7, #26]
 8011d02:	e01c      	b.n	8011d3e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011d04:	7dfb      	ldrb	r3, [r7, #23]
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d919      	bls.n	8011d3e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011d0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d0e:	495e      	ldr	r1, [pc, #376]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011d10:	4613      	mov	r3, r2
 8011d12:	005b      	lsls	r3, r3, #1
 8011d14:	4413      	add	r3, r2
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	440b      	add	r3, r1
 8011d1a:	3312      	adds	r3, #18
 8011d1c:	881b      	ldrh	r3, [r3, #0]
 8011d1e:	8b3a      	ldrh	r2, [r7, #24]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d80c      	bhi.n	8011d3e <etharp_find_entry+0x18a>
            old_stable = i;
 8011d24:	8c3b      	ldrh	r3, [r7, #32]
 8011d26:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011d28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d2c:	4956      	ldr	r1, [pc, #344]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011d2e:	4613      	mov	r3, r2
 8011d30:	005b      	lsls	r3, r3, #1
 8011d32:	4413      	add	r3, r2
 8011d34:	00db      	lsls	r3, r3, #3
 8011d36:	440b      	add	r3, r1
 8011d38:	3312      	adds	r3, #18
 8011d3a:	881b      	ldrh	r3, [r3, #0]
 8011d3c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d3e:	8c3b      	ldrh	r3, [r7, #32]
 8011d40:	3301      	adds	r3, #1
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	843b      	strh	r3, [r7, #32]
 8011d46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d4a:	2b09      	cmp	r3, #9
 8011d4c:	f77f af4c 	ble.w	8011be8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011d50:	7afb      	ldrb	r3, [r7, #11]
 8011d52:	f003 0302 	and.w	r3, r3, #2
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d108      	bne.n	8011d6c <etharp_find_entry+0x1b8>
 8011d5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d5e:	2b0a      	cmp	r3, #10
 8011d60:	d107      	bne.n	8011d72 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011d62:	7afb      	ldrb	r3, [r7, #11]
 8011d64:	f003 0301 	and.w	r3, r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d102      	bne.n	8011d72 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d70:	e085      	b.n	8011e7e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011d72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d76:	2b09      	cmp	r3, #9
 8011d78:	dc02      	bgt.n	8011d80 <etharp_find_entry+0x1cc>
    i = empty;
 8011d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d7c:	843b      	strh	r3, [r7, #32]
 8011d7e:	e039      	b.n	8011df4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011d80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011d84:	2b09      	cmp	r3, #9
 8011d86:	dc14      	bgt.n	8011db2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d8a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011d8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d90:	493d      	ldr	r1, [pc, #244]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011d92:	4613      	mov	r3, r2
 8011d94:	005b      	lsls	r3, r3, #1
 8011d96:	4413      	add	r3, r2
 8011d98:	00db      	lsls	r3, r3, #3
 8011d9a:	440b      	add	r3, r1
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d018      	beq.n	8011dd4 <etharp_find_entry+0x220>
 8011da2:	4b3a      	ldr	r3, [pc, #232]	; (8011e8c <etharp_find_entry+0x2d8>)
 8011da4:	f240 126d 	movw	r2, #365	; 0x16d
 8011da8:	493b      	ldr	r1, [pc, #236]	; (8011e98 <etharp_find_entry+0x2e4>)
 8011daa:	483a      	ldr	r0, [pc, #232]	; (8011e94 <etharp_find_entry+0x2e0>)
 8011dac:	f002 f9fe 	bl	80141ac <iprintf>
 8011db0:	e010      	b.n	8011dd4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011db2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011db6:	2b09      	cmp	r3, #9
 8011db8:	dc02      	bgt.n	8011dc0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011dbc:	843b      	strh	r3, [r7, #32]
 8011dbe:	e009      	b.n	8011dd4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011dc0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011dc4:	2b09      	cmp	r3, #9
 8011dc6:	dc02      	bgt.n	8011dce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011dc8:	8bfb      	ldrh	r3, [r7, #30]
 8011dca:	843b      	strh	r3, [r7, #32]
 8011dcc:	e002      	b.n	8011dd4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011dd2:	e054      	b.n	8011e7e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011dd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011dd8:	2b09      	cmp	r3, #9
 8011dda:	dd06      	ble.n	8011dea <etharp_find_entry+0x236>
 8011ddc:	4b2b      	ldr	r3, [pc, #172]	; (8011e8c <etharp_find_entry+0x2d8>)
 8011dde:	f240 127f 	movw	r2, #383	; 0x17f
 8011de2:	492e      	ldr	r1, [pc, #184]	; (8011e9c <etharp_find_entry+0x2e8>)
 8011de4:	482b      	ldr	r0, [pc, #172]	; (8011e94 <etharp_find_entry+0x2e0>)
 8011de6:	f002 f9e1 	bl	80141ac <iprintf>
    etharp_free_entry(i);
 8011dea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7ff fe06 	bl	8011a00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011df4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011df8:	2b09      	cmp	r3, #9
 8011dfa:	dd06      	ble.n	8011e0a <etharp_find_entry+0x256>
 8011dfc:	4b23      	ldr	r3, [pc, #140]	; (8011e8c <etharp_find_entry+0x2d8>)
 8011dfe:	f240 1283 	movw	r2, #387	; 0x183
 8011e02:	4926      	ldr	r1, [pc, #152]	; (8011e9c <etharp_find_entry+0x2e8>)
 8011e04:	4823      	ldr	r0, [pc, #140]	; (8011e94 <etharp_find_entry+0x2e0>)
 8011e06:	f002 f9d1 	bl	80141ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e0e:	491e      	ldr	r1, [pc, #120]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011e10:	4613      	mov	r3, r2
 8011e12:	005b      	lsls	r3, r3, #1
 8011e14:	4413      	add	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	440b      	add	r3, r1
 8011e1a:	3314      	adds	r3, #20
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d006      	beq.n	8011e30 <etharp_find_entry+0x27c>
 8011e22:	4b1a      	ldr	r3, [pc, #104]	; (8011e8c <etharp_find_entry+0x2d8>)
 8011e24:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011e28:	491d      	ldr	r1, [pc, #116]	; (8011ea0 <etharp_find_entry+0x2ec>)
 8011e2a:	481a      	ldr	r0, [pc, #104]	; (8011e94 <etharp_find_entry+0x2e0>)
 8011e2c:	f002 f9be 	bl	80141ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d00b      	beq.n	8011e4e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	6819      	ldr	r1, [r3, #0]
 8011e3e:	4812      	ldr	r0, [pc, #72]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011e40:	4613      	mov	r3, r2
 8011e42:	005b      	lsls	r3, r3, #1
 8011e44:	4413      	add	r3, r2
 8011e46:	00db      	lsls	r3, r3, #3
 8011e48:	4403      	add	r3, r0
 8011e4a:	3304      	adds	r3, #4
 8011e4c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011e4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e52:	490d      	ldr	r1, [pc, #52]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011e54:	4613      	mov	r3, r2
 8011e56:	005b      	lsls	r3, r3, #1
 8011e58:	4413      	add	r3, r2
 8011e5a:	00db      	lsls	r3, r3, #3
 8011e5c:	440b      	add	r3, r1
 8011e5e:	3312      	adds	r3, #18
 8011e60:	2200      	movs	r2, #0
 8011e62:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011e64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e68:	4907      	ldr	r1, [pc, #28]	; (8011e88 <etharp_find_entry+0x2d4>)
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	005b      	lsls	r3, r3, #1
 8011e6e:	4413      	add	r3, r2
 8011e70:	00db      	lsls	r3, r3, #3
 8011e72:	440b      	add	r3, r1
 8011e74:	3308      	adds	r3, #8
 8011e76:	687a      	ldr	r2, [r7, #4]
 8011e78:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011e7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3728      	adds	r7, #40	; 0x28
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	20000580 	.word	0x20000580
 8011e8c:	08018104 	.word	0x08018104
 8011e90:	0801813c 	.word	0x0801813c
 8011e94:	0801817c 	.word	0x0801817c
 8011e98:	080181a4 	.word	0x080181a4
 8011e9c:	080181bc 	.word	0x080181bc
 8011ea0:	080181d0 	.word	0x080181d0

08011ea4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b088      	sub	sp, #32
 8011ea8:	af02      	add	r7, sp, #8
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	60b9      	str	r1, [r7, #8]
 8011eae:	607a      	str	r2, [r7, #4]
 8011eb0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011eb8:	2b06      	cmp	r3, #6
 8011eba:	d006      	beq.n	8011eca <etharp_update_arp_entry+0x26>
 8011ebc:	4b48      	ldr	r3, [pc, #288]	; (8011fe0 <etharp_update_arp_entry+0x13c>)
 8011ebe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011ec2:	4948      	ldr	r1, [pc, #288]	; (8011fe4 <etharp_update_arp_entry+0x140>)
 8011ec4:	4848      	ldr	r0, [pc, #288]	; (8011fe8 <etharp_update_arp_entry+0x144>)
 8011ec6:	f002 f971 	bl	80141ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d012      	beq.n	8011ef6 <etharp_update_arp_entry+0x52>
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00e      	beq.n	8011ef6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	68f9      	ldr	r1, [r7, #12]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f001 f920 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8011ee4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d105      	bne.n	8011ef6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ef2:	2be0      	cmp	r3, #224	; 0xe0
 8011ef4:	d102      	bne.n	8011efc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011ef6:	f06f 030f 	mvn.w	r3, #15
 8011efa:	e06c      	b.n	8011fd6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011efc:	78fb      	ldrb	r3, [r7, #3]
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	4619      	mov	r1, r3
 8011f02:	68b8      	ldr	r0, [r7, #8]
 8011f04:	f7ff fe56 	bl	8011bb4 <etharp_find_entry>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011f0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	da02      	bge.n	8011f1a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011f14:	8afb      	ldrh	r3, [r7, #22]
 8011f16:	b25b      	sxtb	r3, r3
 8011f18:	e05d      	b.n	8011fd6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011f1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f1e:	4933      	ldr	r1, [pc, #204]	; (8011fec <etharp_update_arp_entry+0x148>)
 8011f20:	4613      	mov	r3, r2
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	4413      	add	r3, r2
 8011f26:	00db      	lsls	r3, r3, #3
 8011f28:	440b      	add	r3, r1
 8011f2a:	3314      	adds	r3, #20
 8011f2c:	2202      	movs	r2, #2
 8011f2e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011f30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f34:	492d      	ldr	r1, [pc, #180]	; (8011fec <etharp_update_arp_entry+0x148>)
 8011f36:	4613      	mov	r3, r2
 8011f38:	005b      	lsls	r3, r3, #1
 8011f3a:	4413      	add	r3, r2
 8011f3c:	00db      	lsls	r3, r3, #3
 8011f3e:	440b      	add	r3, r1
 8011f40:	3308      	adds	r3, #8
 8011f42:	68fa      	ldr	r2, [r7, #12]
 8011f44:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011f46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	4413      	add	r3, r2
 8011f50:	00db      	lsls	r3, r3, #3
 8011f52:	3308      	adds	r3, #8
 8011f54:	4a25      	ldr	r2, [pc, #148]	; (8011fec <etharp_update_arp_entry+0x148>)
 8011f56:	4413      	add	r3, r2
 8011f58:	3304      	adds	r3, #4
 8011f5a:	2206      	movs	r2, #6
 8011f5c:	6879      	ldr	r1, [r7, #4]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f002 f8f4 	bl	801414c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011f64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f68:	4920      	ldr	r1, [pc, #128]	; (8011fec <etharp_update_arp_entry+0x148>)
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	4413      	add	r3, r2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	440b      	add	r3, r1
 8011f74:	3312      	adds	r3, #18
 8011f76:	2200      	movs	r2, #0
 8011f78:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011f7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f7e:	491b      	ldr	r1, [pc, #108]	; (8011fec <etharp_update_arp_entry+0x148>)
 8011f80:	4613      	mov	r3, r2
 8011f82:	005b      	lsls	r3, r3, #1
 8011f84:	4413      	add	r3, r2
 8011f86:	00db      	lsls	r3, r3, #3
 8011f88:	440b      	add	r3, r1
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d021      	beq.n	8011fd4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011f90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f94:	4915      	ldr	r1, [pc, #84]	; (8011fec <etharp_update_arp_entry+0x148>)
 8011f96:	4613      	mov	r3, r2
 8011f98:	005b      	lsls	r3, r3, #1
 8011f9a:	4413      	add	r3, r2
 8011f9c:	00db      	lsls	r3, r3, #3
 8011f9e:	440b      	add	r3, r1
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011fa4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011fa8:	4910      	ldr	r1, [pc, #64]	; (8011fec <etharp_update_arp_entry+0x148>)
 8011faa:	4613      	mov	r3, r2
 8011fac:	005b      	lsls	r3, r3, #1
 8011fae:	4413      	add	r3, r2
 8011fb0:	00db      	lsls	r3, r3, #3
 8011fb2:	440b      	add	r3, r1
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6939      	ldr	r1, [r7, #16]
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f002 f845 	bl	8014058 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011fce:	6938      	ldr	r0, [r7, #16]
 8011fd0:	f7f6 fdc4 	bl	8008b5c <pbuf_free>
  }
  return ERR_OK;
 8011fd4:	2300      	movs	r3, #0
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3718      	adds	r7, #24
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	08018104 	.word	0x08018104
 8011fe4:	080181fc 	.word	0x080181fc
 8011fe8:	0801817c 	.word	0x0801817c
 8011fec:	20000580 	.word	0x20000580

08011ff0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	60fb      	str	r3, [r7, #12]
 8011ffc:	e01e      	b.n	801203c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011ffe:	4913      	ldr	r1, [pc, #76]	; (801204c <etharp_cleanup_netif+0x5c>)
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	4613      	mov	r3, r2
 8012004:	005b      	lsls	r3, r3, #1
 8012006:	4413      	add	r3, r2
 8012008:	00db      	lsls	r3, r3, #3
 801200a:	440b      	add	r3, r1
 801200c:	3314      	adds	r3, #20
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012012:	7afb      	ldrb	r3, [r7, #11]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00e      	beq.n	8012036 <etharp_cleanup_netif+0x46>
 8012018:	490c      	ldr	r1, [pc, #48]	; (801204c <etharp_cleanup_netif+0x5c>)
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	4613      	mov	r3, r2
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	4413      	add	r3, r2
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	440b      	add	r3, r1
 8012026:	3308      	adds	r3, #8
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	429a      	cmp	r2, r3
 801202e:	d102      	bne.n	8012036 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012030:	68f8      	ldr	r0, [r7, #12]
 8012032:	f7ff fce5 	bl	8011a00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	3301      	adds	r3, #1
 801203a:	60fb      	str	r3, [r7, #12]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2b09      	cmp	r3, #9
 8012040:	dddd      	ble.n	8011ffe <etharp_cleanup_netif+0xe>
    }
  }
}
 8012042:	bf00      	nop
 8012044:	bf00      	nop
 8012046:	3710      	adds	r7, #16
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20000580 	.word	0x20000580

08012050 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012050:	b5b0      	push	{r4, r5, r7, lr}
 8012052:	b08a      	sub	sp, #40	; 0x28
 8012054:	af04      	add	r7, sp, #16
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d107      	bne.n	8012070 <etharp_input+0x20>
 8012060:	4b3f      	ldr	r3, [pc, #252]	; (8012160 <etharp_input+0x110>)
 8012062:	f240 228a 	movw	r2, #650	; 0x28a
 8012066:	493f      	ldr	r1, [pc, #252]	; (8012164 <etharp_input+0x114>)
 8012068:	483f      	ldr	r0, [pc, #252]	; (8012168 <etharp_input+0x118>)
 801206a:	f002 f89f 	bl	80141ac <iprintf>
 801206e:	e074      	b.n	801215a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	881b      	ldrh	r3, [r3, #0]
 801207a:	b29b      	uxth	r3, r3
 801207c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012080:	d10c      	bne.n	801209c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012086:	2b06      	cmp	r3, #6
 8012088:	d108      	bne.n	801209c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801208e:	2b04      	cmp	r3, #4
 8012090:	d104      	bne.n	801209c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	885b      	ldrh	r3, [r3, #2]
 8012096:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012098:	2b08      	cmp	r3, #8
 801209a:	d003      	beq.n	80120a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f7f6 fd5d 	bl	8008b5c <pbuf_free>
    return;
 80120a2:	e05a      	b.n	801215a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	330e      	adds	r3, #14
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	3318      	adds	r3, #24
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	3304      	adds	r3, #4
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d102      	bne.n	80120c4 <etharp_input+0x74>
    for_us = 0;
 80120be:	2300      	movs	r3, #0
 80120c0:	75fb      	strb	r3, [r7, #23]
 80120c2:	e009      	b.n	80120d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	3304      	adds	r3, #4
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	bf0c      	ite	eq
 80120d0:	2301      	moveq	r3, #1
 80120d2:	2300      	movne	r3, #0
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	f103 0208 	add.w	r2, r3, #8
 80120de:	7dfb      	ldrb	r3, [r7, #23]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <etharp_input+0x98>
 80120e4:	2301      	movs	r3, #1
 80120e6:	e000      	b.n	80120ea <etharp_input+0x9a>
 80120e8:	2302      	movs	r3, #2
 80120ea:	f107 010c 	add.w	r1, r7, #12
 80120ee:	6838      	ldr	r0, [r7, #0]
 80120f0:	f7ff fed8 	bl	8011ea4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	88db      	ldrh	r3, [r3, #6]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120fe:	d003      	beq.n	8012108 <etharp_input+0xb8>
 8012100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012104:	d01e      	beq.n	8012144 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012106:	e025      	b.n	8012154 <etharp_input+0x104>
      if (for_us) {
 8012108:	7dfb      	ldrb	r3, [r7, #23]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d021      	beq.n	8012152 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012124:	693a      	ldr	r2, [r7, #16]
 8012126:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012128:	2102      	movs	r1, #2
 801212a:	9103      	str	r1, [sp, #12]
 801212c:	f107 010c 	add.w	r1, r7, #12
 8012130:	9102      	str	r1, [sp, #8]
 8012132:	9201      	str	r2, [sp, #4]
 8012134:	9300      	str	r3, [sp, #0]
 8012136:	462b      	mov	r3, r5
 8012138:	4622      	mov	r2, r4
 801213a:	4601      	mov	r1, r0
 801213c:	6838      	ldr	r0, [r7, #0]
 801213e:	f000 faef 	bl	8012720 <etharp_raw>
      break;
 8012142:	e006      	b.n	8012152 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8012144:	f107 030c 	add.w	r3, r7, #12
 8012148:	4619      	mov	r1, r3
 801214a:	6838      	ldr	r0, [r7, #0]
 801214c:	f7fe f9fc 	bl	8010548 <dhcp_arp_reply>
      break;
 8012150:	e000      	b.n	8012154 <etharp_input+0x104>
      break;
 8012152:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7f6 fd01 	bl	8008b5c <pbuf_free>
}
 801215a:	3718      	adds	r7, #24
 801215c:	46bd      	mov	sp, r7
 801215e:	bdb0      	pop	{r4, r5, r7, pc}
 8012160:	08018104 	.word	0x08018104
 8012164:	08018254 	.word	0x08018254
 8012168:	0801817c 	.word	0x0801817c

0801216c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b086      	sub	sp, #24
 8012170:	af02      	add	r7, sp, #8
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	4613      	mov	r3, r2
 8012178:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801217a:	79fa      	ldrb	r2, [r7, #7]
 801217c:	4944      	ldr	r1, [pc, #272]	; (8012290 <etharp_output_to_arp_index+0x124>)
 801217e:	4613      	mov	r3, r2
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	4413      	add	r3, r2
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	440b      	add	r3, r1
 8012188:	3314      	adds	r3, #20
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b01      	cmp	r3, #1
 801218e:	d806      	bhi.n	801219e <etharp_output_to_arp_index+0x32>
 8012190:	4b40      	ldr	r3, [pc, #256]	; (8012294 <etharp_output_to_arp_index+0x128>)
 8012192:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012196:	4940      	ldr	r1, [pc, #256]	; (8012298 <etharp_output_to_arp_index+0x12c>)
 8012198:	4840      	ldr	r0, [pc, #256]	; (801229c <etharp_output_to_arp_index+0x130>)
 801219a:	f002 f807 	bl	80141ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801219e:	79fa      	ldrb	r2, [r7, #7]
 80121a0:	493b      	ldr	r1, [pc, #236]	; (8012290 <etharp_output_to_arp_index+0x124>)
 80121a2:	4613      	mov	r3, r2
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	4413      	add	r3, r2
 80121a8:	00db      	lsls	r3, r3, #3
 80121aa:	440b      	add	r3, r1
 80121ac:	3314      	adds	r3, #20
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	d153      	bne.n	801225c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80121b4:	79fa      	ldrb	r2, [r7, #7]
 80121b6:	4936      	ldr	r1, [pc, #216]	; (8012290 <etharp_output_to_arp_index+0x124>)
 80121b8:	4613      	mov	r3, r2
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	4413      	add	r3, r2
 80121be:	00db      	lsls	r3, r3, #3
 80121c0:	440b      	add	r3, r1
 80121c2:	3312      	adds	r3, #18
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80121ca:	d919      	bls.n	8012200 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80121cc:	79fa      	ldrb	r2, [r7, #7]
 80121ce:	4613      	mov	r3, r2
 80121d0:	005b      	lsls	r3, r3, #1
 80121d2:	4413      	add	r3, r2
 80121d4:	00db      	lsls	r3, r3, #3
 80121d6:	4a2e      	ldr	r2, [pc, #184]	; (8012290 <etharp_output_to_arp_index+0x124>)
 80121d8:	4413      	add	r3, r2
 80121da:	3304      	adds	r3, #4
 80121dc:	4619      	mov	r1, r3
 80121de:	68f8      	ldr	r0, [r7, #12]
 80121e0:	f000 fb4c 	bl	801287c <etharp_request>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d138      	bne.n	801225c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80121ea:	79fa      	ldrb	r2, [r7, #7]
 80121ec:	4928      	ldr	r1, [pc, #160]	; (8012290 <etharp_output_to_arp_index+0x124>)
 80121ee:	4613      	mov	r3, r2
 80121f0:	005b      	lsls	r3, r3, #1
 80121f2:	4413      	add	r3, r2
 80121f4:	00db      	lsls	r3, r3, #3
 80121f6:	440b      	add	r3, r1
 80121f8:	3314      	adds	r3, #20
 80121fa:	2203      	movs	r2, #3
 80121fc:	701a      	strb	r2, [r3, #0]
 80121fe:	e02d      	b.n	801225c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012200:	79fa      	ldrb	r2, [r7, #7]
 8012202:	4923      	ldr	r1, [pc, #140]	; (8012290 <etharp_output_to_arp_index+0x124>)
 8012204:	4613      	mov	r3, r2
 8012206:	005b      	lsls	r3, r3, #1
 8012208:	4413      	add	r3, r2
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	440b      	add	r3, r1
 801220e:	3312      	adds	r3, #18
 8012210:	881b      	ldrh	r3, [r3, #0]
 8012212:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012216:	d321      	bcc.n	801225c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012218:	79fa      	ldrb	r2, [r7, #7]
 801221a:	4613      	mov	r3, r2
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	4413      	add	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	4a1b      	ldr	r2, [pc, #108]	; (8012290 <etharp_output_to_arp_index+0x124>)
 8012224:	4413      	add	r3, r2
 8012226:	1d19      	adds	r1, r3, #4
 8012228:	79fa      	ldrb	r2, [r7, #7]
 801222a:	4613      	mov	r3, r2
 801222c:	005b      	lsls	r3, r3, #1
 801222e:	4413      	add	r3, r2
 8012230:	00db      	lsls	r3, r3, #3
 8012232:	3308      	adds	r3, #8
 8012234:	4a16      	ldr	r2, [pc, #88]	; (8012290 <etharp_output_to_arp_index+0x124>)
 8012236:	4413      	add	r3, r2
 8012238:	3304      	adds	r3, #4
 801223a:	461a      	mov	r2, r3
 801223c:	68f8      	ldr	r0, [r7, #12]
 801223e:	f000 fafb 	bl	8012838 <etharp_request_dst>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d109      	bne.n	801225c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012248:	79fa      	ldrb	r2, [r7, #7]
 801224a:	4911      	ldr	r1, [pc, #68]	; (8012290 <etharp_output_to_arp_index+0x124>)
 801224c:	4613      	mov	r3, r2
 801224e:	005b      	lsls	r3, r3, #1
 8012250:	4413      	add	r3, r2
 8012252:	00db      	lsls	r3, r3, #3
 8012254:	440b      	add	r3, r1
 8012256:	3314      	adds	r3, #20
 8012258:	2203      	movs	r2, #3
 801225a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8012262:	79fa      	ldrb	r2, [r7, #7]
 8012264:	4613      	mov	r3, r2
 8012266:	005b      	lsls	r3, r3, #1
 8012268:	4413      	add	r3, r2
 801226a:	00db      	lsls	r3, r3, #3
 801226c:	3308      	adds	r3, #8
 801226e:	4a08      	ldr	r2, [pc, #32]	; (8012290 <etharp_output_to_arp_index+0x124>)
 8012270:	4413      	add	r3, r2
 8012272:	3304      	adds	r3, #4
 8012274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012278:	9200      	str	r2, [sp, #0]
 801227a:	460a      	mov	r2, r1
 801227c:	68b9      	ldr	r1, [r7, #8]
 801227e:	68f8      	ldr	r0, [r7, #12]
 8012280:	f001 feea 	bl	8014058 <ethernet_output>
 8012284:	4603      	mov	r3, r0
}
 8012286:	4618      	mov	r0, r3
 8012288:	3710      	adds	r7, #16
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	20000580 	.word	0x20000580
 8012294:	08018104 	.word	0x08018104
 8012298:	08018274 	.word	0x08018274
 801229c:	0801817c 	.word	0x0801817c

080122a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b08a      	sub	sp, #40	; 0x28
 80122a4:	af02      	add	r7, sp, #8
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d106      	bne.n	80122c4 <etharp_output+0x24>
 80122b6:	4b73      	ldr	r3, [pc, #460]	; (8012484 <etharp_output+0x1e4>)
 80122b8:	f240 321e 	movw	r2, #798	; 0x31e
 80122bc:	4972      	ldr	r1, [pc, #456]	; (8012488 <etharp_output+0x1e8>)
 80122be:	4873      	ldr	r0, [pc, #460]	; (801248c <etharp_output+0x1ec>)
 80122c0:	f001 ff74 	bl	80141ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d106      	bne.n	80122d8 <etharp_output+0x38>
 80122ca:	4b6e      	ldr	r3, [pc, #440]	; (8012484 <etharp_output+0x1e4>)
 80122cc:	f240 321f 	movw	r2, #799	; 0x31f
 80122d0:	496f      	ldr	r1, [pc, #444]	; (8012490 <etharp_output+0x1f0>)
 80122d2:	486e      	ldr	r0, [pc, #440]	; (801248c <etharp_output+0x1ec>)
 80122d4:	f001 ff6a 	bl	80141ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d106      	bne.n	80122ec <etharp_output+0x4c>
 80122de:	4b69      	ldr	r3, [pc, #420]	; (8012484 <etharp_output+0x1e4>)
 80122e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80122e4:	496b      	ldr	r1, [pc, #428]	; (8012494 <etharp_output+0x1f4>)
 80122e6:	4869      	ldr	r0, [pc, #420]	; (801248c <etharp_output+0x1ec>)
 80122e8:	f001 ff60 	bl	80141ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	68f9      	ldr	r1, [r7, #12]
 80122f2:	4618      	mov	r0, r3
 80122f4:	f000 ff16 	bl	8013124 <ip4_addr_isbroadcast_u32>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d002      	beq.n	8012304 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80122fe:	4b66      	ldr	r3, [pc, #408]	; (8012498 <etharp_output+0x1f8>)
 8012300:	61fb      	str	r3, [r7, #28]
 8012302:	e0af      	b.n	8012464 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801230c:	2be0      	cmp	r3, #224	; 0xe0
 801230e:	d118      	bne.n	8012342 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012310:	2301      	movs	r3, #1
 8012312:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012314:	2300      	movs	r3, #0
 8012316:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012318:	235e      	movs	r3, #94	; 0x5e
 801231a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	3301      	adds	r3, #1
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012326:	b2db      	uxtb	r3, r3
 8012328:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	3302      	adds	r3, #2
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	3303      	adds	r3, #3
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801233a:	f107 0310 	add.w	r3, r7, #16
 801233e:	61fb      	str	r3, [r7, #28]
 8012340:	e090      	b.n	8012464 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	3304      	adds	r3, #4
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	405a      	eors	r2, r3
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3308      	adds	r3, #8
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4013      	ands	r3, r2
 8012356:	2b00      	cmp	r3, #0
 8012358:	d012      	beq.n	8012380 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012360:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012364:	4293      	cmp	r3, r2
 8012366:	d00b      	beq.n	8012380 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	330c      	adds	r3, #12
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d003      	beq.n	801237a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	330c      	adds	r3, #12
 8012376:	61bb      	str	r3, [r7, #24]
 8012378:	e002      	b.n	8012380 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801237a:	f06f 0303 	mvn.w	r3, #3
 801237e:	e07d      	b.n	801247c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012380:	4b46      	ldr	r3, [pc, #280]	; (801249c <etharp_output+0x1fc>)
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	4619      	mov	r1, r3
 8012386:	4a46      	ldr	r2, [pc, #280]	; (80124a0 <etharp_output+0x200>)
 8012388:	460b      	mov	r3, r1
 801238a:	005b      	lsls	r3, r3, #1
 801238c:	440b      	add	r3, r1
 801238e:	00db      	lsls	r3, r3, #3
 8012390:	4413      	add	r3, r2
 8012392:	3314      	adds	r3, #20
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	2b01      	cmp	r3, #1
 8012398:	d925      	bls.n	80123e6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801239a:	4b40      	ldr	r3, [pc, #256]	; (801249c <etharp_output+0x1fc>)
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	4619      	mov	r1, r3
 80123a0:	4a3f      	ldr	r2, [pc, #252]	; (80124a0 <etharp_output+0x200>)
 80123a2:	460b      	mov	r3, r1
 80123a4:	005b      	lsls	r3, r3, #1
 80123a6:	440b      	add	r3, r1
 80123a8:	00db      	lsls	r3, r3, #3
 80123aa:	4413      	add	r3, r2
 80123ac:	3308      	adds	r3, #8
 80123ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80123b0:	68fa      	ldr	r2, [r7, #12]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d117      	bne.n	80123e6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	4b38      	ldr	r3, [pc, #224]	; (801249c <etharp_output+0x1fc>)
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	4618      	mov	r0, r3
 80123c0:	4937      	ldr	r1, [pc, #220]	; (80124a0 <etharp_output+0x200>)
 80123c2:	4603      	mov	r3, r0
 80123c4:	005b      	lsls	r3, r3, #1
 80123c6:	4403      	add	r3, r0
 80123c8:	00db      	lsls	r3, r3, #3
 80123ca:	440b      	add	r3, r1
 80123cc:	3304      	adds	r3, #4
 80123ce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d108      	bne.n	80123e6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80123d4:	4b31      	ldr	r3, [pc, #196]	; (801249c <etharp_output+0x1fc>)
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	461a      	mov	r2, r3
 80123da:	68b9      	ldr	r1, [r7, #8]
 80123dc:	68f8      	ldr	r0, [r7, #12]
 80123de:	f7ff fec5 	bl	801216c <etharp_output_to_arp_index>
 80123e2:	4603      	mov	r3, r0
 80123e4:	e04a      	b.n	801247c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80123e6:	2300      	movs	r3, #0
 80123e8:	75fb      	strb	r3, [r7, #23]
 80123ea:	e031      	b.n	8012450 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80123ec:	7dfa      	ldrb	r2, [r7, #23]
 80123ee:	492c      	ldr	r1, [pc, #176]	; (80124a0 <etharp_output+0x200>)
 80123f0:	4613      	mov	r3, r2
 80123f2:	005b      	lsls	r3, r3, #1
 80123f4:	4413      	add	r3, r2
 80123f6:	00db      	lsls	r3, r3, #3
 80123f8:	440b      	add	r3, r1
 80123fa:	3314      	adds	r3, #20
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d923      	bls.n	801244a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012402:	7dfa      	ldrb	r2, [r7, #23]
 8012404:	4926      	ldr	r1, [pc, #152]	; (80124a0 <etharp_output+0x200>)
 8012406:	4613      	mov	r3, r2
 8012408:	005b      	lsls	r3, r3, #1
 801240a:	4413      	add	r3, r2
 801240c:	00db      	lsls	r3, r3, #3
 801240e:	440b      	add	r3, r1
 8012410:	3308      	adds	r3, #8
 8012412:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	429a      	cmp	r2, r3
 8012418:	d117      	bne.n	801244a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801241a:	69bb      	ldr	r3, [r7, #24]
 801241c:	6819      	ldr	r1, [r3, #0]
 801241e:	7dfa      	ldrb	r2, [r7, #23]
 8012420:	481f      	ldr	r0, [pc, #124]	; (80124a0 <etharp_output+0x200>)
 8012422:	4613      	mov	r3, r2
 8012424:	005b      	lsls	r3, r3, #1
 8012426:	4413      	add	r3, r2
 8012428:	00db      	lsls	r3, r3, #3
 801242a:	4403      	add	r3, r0
 801242c:	3304      	adds	r3, #4
 801242e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012430:	4299      	cmp	r1, r3
 8012432:	d10a      	bne.n	801244a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012434:	4a19      	ldr	r2, [pc, #100]	; (801249c <etharp_output+0x1fc>)
 8012436:	7dfb      	ldrb	r3, [r7, #23]
 8012438:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801243a:	7dfb      	ldrb	r3, [r7, #23]
 801243c:	461a      	mov	r2, r3
 801243e:	68b9      	ldr	r1, [r7, #8]
 8012440:	68f8      	ldr	r0, [r7, #12]
 8012442:	f7ff fe93 	bl	801216c <etharp_output_to_arp_index>
 8012446:	4603      	mov	r3, r0
 8012448:	e018      	b.n	801247c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801244a:	7dfb      	ldrb	r3, [r7, #23]
 801244c:	3301      	adds	r3, #1
 801244e:	75fb      	strb	r3, [r7, #23]
 8012450:	7dfb      	ldrb	r3, [r7, #23]
 8012452:	2b09      	cmp	r3, #9
 8012454:	d9ca      	bls.n	80123ec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012456:	68ba      	ldr	r2, [r7, #8]
 8012458:	69b9      	ldr	r1, [r7, #24]
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f000 f822 	bl	80124a4 <etharp_query>
 8012460:	4603      	mov	r3, r0
 8012462:	e00b      	b.n	801247c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801246a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	68b9      	ldr	r1, [r7, #8]
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f001 fdef 	bl	8014058 <ethernet_output>
 801247a:	4603      	mov	r3, r0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3720      	adds	r7, #32
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	08018104 	.word	0x08018104
 8012488:	08018254 	.word	0x08018254
 801248c:	0801817c 	.word	0x0801817c
 8012490:	080182a4 	.word	0x080182a4
 8012494:	08018244 	.word	0x08018244
 8012498:	08041a6c 	.word	0x08041a6c
 801249c:	20000670 	.word	0x20000670
 80124a0:	20000580 	.word	0x20000580

080124a4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b08c      	sub	sp, #48	; 0x30
 80124a8:	af02      	add	r7, sp, #8
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	332a      	adds	r3, #42	; 0x2a
 80124b4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80124b6:	23ff      	movs	r3, #255	; 0xff
 80124b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80124bc:	2300      	movs	r3, #0
 80124be:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68f9      	ldr	r1, [r7, #12]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f000 fe2c 	bl	8013124 <ip4_addr_isbroadcast_u32>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d10c      	bne.n	80124ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80124da:	2be0      	cmp	r3, #224	; 0xe0
 80124dc:	d006      	beq.n	80124ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d003      	beq.n	80124ec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d102      	bne.n	80124f2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80124ec:	f06f 030f 	mvn.w	r3, #15
 80124f0:	e101      	b.n	80126f6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80124f2:	68fa      	ldr	r2, [r7, #12]
 80124f4:	2101      	movs	r1, #1
 80124f6:	68b8      	ldr	r0, [r7, #8]
 80124f8:	f7ff fb5c 	bl	8011bb4 <etharp_find_entry>
 80124fc:	4603      	mov	r3, r0
 80124fe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012500:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012504:	2b00      	cmp	r3, #0
 8012506:	da02      	bge.n	801250e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012508:	8a7b      	ldrh	r3, [r7, #18]
 801250a:	b25b      	sxtb	r3, r3
 801250c:	e0f3      	b.n	80126f6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801250e:	8a7b      	ldrh	r3, [r7, #18]
 8012510:	2b7e      	cmp	r3, #126	; 0x7e
 8012512:	d906      	bls.n	8012522 <etharp_query+0x7e>
 8012514:	4b7a      	ldr	r3, [pc, #488]	; (8012700 <etharp_query+0x25c>)
 8012516:	f240 32c1 	movw	r2, #961	; 0x3c1
 801251a:	497a      	ldr	r1, [pc, #488]	; (8012704 <etharp_query+0x260>)
 801251c:	487a      	ldr	r0, [pc, #488]	; (8012708 <etharp_query+0x264>)
 801251e:	f001 fe45 	bl	80141ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012522:	8a7b      	ldrh	r3, [r7, #18]
 8012524:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012526:	7c7a      	ldrb	r2, [r7, #17]
 8012528:	4978      	ldr	r1, [pc, #480]	; (801270c <etharp_query+0x268>)
 801252a:	4613      	mov	r3, r2
 801252c:	005b      	lsls	r3, r3, #1
 801252e:	4413      	add	r3, r2
 8012530:	00db      	lsls	r3, r3, #3
 8012532:	440b      	add	r3, r1
 8012534:	3314      	adds	r3, #20
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d115      	bne.n	8012568 <etharp_query+0xc4>
    is_new_entry = 1;
 801253c:	2301      	movs	r3, #1
 801253e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012540:	7c7a      	ldrb	r2, [r7, #17]
 8012542:	4972      	ldr	r1, [pc, #456]	; (801270c <etharp_query+0x268>)
 8012544:	4613      	mov	r3, r2
 8012546:	005b      	lsls	r3, r3, #1
 8012548:	4413      	add	r3, r2
 801254a:	00db      	lsls	r3, r3, #3
 801254c:	440b      	add	r3, r1
 801254e:	3314      	adds	r3, #20
 8012550:	2201      	movs	r2, #1
 8012552:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012554:	7c7a      	ldrb	r2, [r7, #17]
 8012556:	496d      	ldr	r1, [pc, #436]	; (801270c <etharp_query+0x268>)
 8012558:	4613      	mov	r3, r2
 801255a:	005b      	lsls	r3, r3, #1
 801255c:	4413      	add	r3, r2
 801255e:	00db      	lsls	r3, r3, #3
 8012560:	440b      	add	r3, r1
 8012562:	3308      	adds	r3, #8
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012568:	7c7a      	ldrb	r2, [r7, #17]
 801256a:	4968      	ldr	r1, [pc, #416]	; (801270c <etharp_query+0x268>)
 801256c:	4613      	mov	r3, r2
 801256e:	005b      	lsls	r3, r3, #1
 8012570:	4413      	add	r3, r2
 8012572:	00db      	lsls	r3, r3, #3
 8012574:	440b      	add	r3, r1
 8012576:	3314      	adds	r3, #20
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	2b01      	cmp	r3, #1
 801257c:	d011      	beq.n	80125a2 <etharp_query+0xfe>
 801257e:	7c7a      	ldrb	r2, [r7, #17]
 8012580:	4962      	ldr	r1, [pc, #392]	; (801270c <etharp_query+0x268>)
 8012582:	4613      	mov	r3, r2
 8012584:	005b      	lsls	r3, r3, #1
 8012586:	4413      	add	r3, r2
 8012588:	00db      	lsls	r3, r3, #3
 801258a:	440b      	add	r3, r1
 801258c:	3314      	adds	r3, #20
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	2b01      	cmp	r3, #1
 8012592:	d806      	bhi.n	80125a2 <etharp_query+0xfe>
 8012594:	4b5a      	ldr	r3, [pc, #360]	; (8012700 <etharp_query+0x25c>)
 8012596:	f240 32cd 	movw	r2, #973	; 0x3cd
 801259a:	495d      	ldr	r1, [pc, #372]	; (8012710 <etharp_query+0x26c>)
 801259c:	485a      	ldr	r0, [pc, #360]	; (8012708 <etharp_query+0x264>)
 801259e:	f001 fe05 	bl	80141ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80125a2:	6a3b      	ldr	r3, [r7, #32]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d102      	bne.n	80125ae <etharp_query+0x10a>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d10c      	bne.n	80125c8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80125ae:	68b9      	ldr	r1, [r7, #8]
 80125b0:	68f8      	ldr	r0, [r7, #12]
 80125b2:	f000 f963 	bl	801287c <etharp_request>
 80125b6:	4603      	mov	r3, r0
 80125b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d102      	bne.n	80125c8 <etharp_query+0x124>
      return result;
 80125c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125c6:	e096      	b.n	80126f6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d106      	bne.n	80125dc <etharp_query+0x138>
 80125ce:	4b4c      	ldr	r3, [pc, #304]	; (8012700 <etharp_query+0x25c>)
 80125d0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80125d4:	494f      	ldr	r1, [pc, #316]	; (8012714 <etharp_query+0x270>)
 80125d6:	484c      	ldr	r0, [pc, #304]	; (8012708 <etharp_query+0x264>)
 80125d8:	f001 fde8 	bl	80141ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80125dc:	7c7a      	ldrb	r2, [r7, #17]
 80125de:	494b      	ldr	r1, [pc, #300]	; (801270c <etharp_query+0x268>)
 80125e0:	4613      	mov	r3, r2
 80125e2:	005b      	lsls	r3, r3, #1
 80125e4:	4413      	add	r3, r2
 80125e6:	00db      	lsls	r3, r3, #3
 80125e8:	440b      	add	r3, r1
 80125ea:	3314      	adds	r3, #20
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d917      	bls.n	8012622 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80125f2:	4a49      	ldr	r2, [pc, #292]	; (8012718 <etharp_query+0x274>)
 80125f4:	7c7b      	ldrb	r3, [r7, #17]
 80125f6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80125f8:	7c7a      	ldrb	r2, [r7, #17]
 80125fa:	4613      	mov	r3, r2
 80125fc:	005b      	lsls	r3, r3, #1
 80125fe:	4413      	add	r3, r2
 8012600:	00db      	lsls	r3, r3, #3
 8012602:	3308      	adds	r3, #8
 8012604:	4a41      	ldr	r2, [pc, #260]	; (801270c <etharp_query+0x268>)
 8012606:	4413      	add	r3, r2
 8012608:	3304      	adds	r3, #4
 801260a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801260e:	9200      	str	r2, [sp, #0]
 8012610:	697a      	ldr	r2, [r7, #20]
 8012612:	6879      	ldr	r1, [r7, #4]
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f001 fd1f 	bl	8014058 <ethernet_output>
 801261a:	4603      	mov	r3, r0
 801261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012620:	e067      	b.n	80126f2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012622:	7c7a      	ldrb	r2, [r7, #17]
 8012624:	4939      	ldr	r1, [pc, #228]	; (801270c <etharp_query+0x268>)
 8012626:	4613      	mov	r3, r2
 8012628:	005b      	lsls	r3, r3, #1
 801262a:	4413      	add	r3, r2
 801262c:	00db      	lsls	r3, r3, #3
 801262e:	440b      	add	r3, r1
 8012630:	3314      	adds	r3, #20
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2b01      	cmp	r3, #1
 8012636:	d15c      	bne.n	80126f2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012638:	2300      	movs	r3, #0
 801263a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012640:	e01c      	b.n	801267c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	895a      	ldrh	r2, [r3, #10]
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	891b      	ldrh	r3, [r3, #8]
 801264a:	429a      	cmp	r2, r3
 801264c:	d10a      	bne.n	8012664 <etharp_query+0x1c0>
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d006      	beq.n	8012664 <etharp_query+0x1c0>
 8012656:	4b2a      	ldr	r3, [pc, #168]	; (8012700 <etharp_query+0x25c>)
 8012658:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801265c:	492f      	ldr	r1, [pc, #188]	; (801271c <etharp_query+0x278>)
 801265e:	482a      	ldr	r0, [pc, #168]	; (8012708 <etharp_query+0x264>)
 8012660:	f001 fda4 	bl	80141ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	7b1b      	ldrb	r3, [r3, #12]
 8012668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801266c:	2b00      	cmp	r3, #0
 801266e:	d002      	beq.n	8012676 <etharp_query+0x1d2>
        copy_needed = 1;
 8012670:	2301      	movs	r3, #1
 8012672:	61bb      	str	r3, [r7, #24]
        break;
 8012674:	e005      	b.n	8012682 <etharp_query+0x1de>
      }
      p = p->next;
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1df      	bne.n	8012642 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d007      	beq.n	8012698 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801268e:	200e      	movs	r0, #14
 8012690:	f7f6 fcd0 	bl	8009034 <pbuf_clone>
 8012694:	61f8      	str	r0, [r7, #28]
 8012696:	e004      	b.n	80126a2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801269c:	69f8      	ldr	r0, [r7, #28]
 801269e:	f7f6 fafd 	bl	8008c9c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d021      	beq.n	80126ec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80126a8:	7c7a      	ldrb	r2, [r7, #17]
 80126aa:	4918      	ldr	r1, [pc, #96]	; (801270c <etharp_query+0x268>)
 80126ac:	4613      	mov	r3, r2
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	4413      	add	r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	440b      	add	r3, r1
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00a      	beq.n	80126d2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80126bc:	7c7a      	ldrb	r2, [r7, #17]
 80126be:	4913      	ldr	r1, [pc, #76]	; (801270c <etharp_query+0x268>)
 80126c0:	4613      	mov	r3, r2
 80126c2:	005b      	lsls	r3, r3, #1
 80126c4:	4413      	add	r3, r2
 80126c6:	00db      	lsls	r3, r3, #3
 80126c8:	440b      	add	r3, r1
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7f6 fa45 	bl	8008b5c <pbuf_free>
      }
      arp_table[i].q = p;
 80126d2:	7c7a      	ldrb	r2, [r7, #17]
 80126d4:	490d      	ldr	r1, [pc, #52]	; (801270c <etharp_query+0x268>)
 80126d6:	4613      	mov	r3, r2
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	4413      	add	r3, r2
 80126dc:	00db      	lsls	r3, r3, #3
 80126de:	440b      	add	r3, r1
 80126e0:	69fa      	ldr	r2, [r7, #28]
 80126e2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80126e4:	2300      	movs	r3, #0
 80126e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126ea:	e002      	b.n	80126f2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80126ec:	23ff      	movs	r3, #255	; 0xff
 80126ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80126f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3728      	adds	r7, #40	; 0x28
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	08018104 	.word	0x08018104
 8012704:	080182b0 	.word	0x080182b0
 8012708:	0801817c 	.word	0x0801817c
 801270c:	20000580 	.word	0x20000580
 8012710:	080182c0 	.word	0x080182c0
 8012714:	080182a4 	.word	0x080182a4
 8012718:	20000670 	.word	0x20000670
 801271c:	080182e8 	.word	0x080182e8

08012720 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b08a      	sub	sp, #40	; 0x28
 8012724:	af02      	add	r7, sp, #8
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
 801272c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801272e:	2300      	movs	r3, #0
 8012730:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d106      	bne.n	8012746 <etharp_raw+0x26>
 8012738:	4b3a      	ldr	r3, [pc, #232]	; (8012824 <etharp_raw+0x104>)
 801273a:	f240 4257 	movw	r2, #1111	; 0x457
 801273e:	493a      	ldr	r1, [pc, #232]	; (8012828 <etharp_raw+0x108>)
 8012740:	483a      	ldr	r0, [pc, #232]	; (801282c <etharp_raw+0x10c>)
 8012742:	f001 fd33 	bl	80141ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012746:	f44f 7220 	mov.w	r2, #640	; 0x280
 801274a:	211c      	movs	r1, #28
 801274c:	200e      	movs	r0, #14
 801274e:	f7f5 ff21 	bl	8008594 <pbuf_alloc>
 8012752:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012754:	69bb      	ldr	r3, [r7, #24]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d102      	bne.n	8012760 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801275a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801275e:	e05d      	b.n	801281c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	895b      	ldrh	r3, [r3, #10]
 8012764:	2b1b      	cmp	r3, #27
 8012766:	d806      	bhi.n	8012776 <etharp_raw+0x56>
 8012768:	4b2e      	ldr	r3, [pc, #184]	; (8012824 <etharp_raw+0x104>)
 801276a:	f240 4262 	movw	r2, #1122	; 0x462
 801276e:	4930      	ldr	r1, [pc, #192]	; (8012830 <etharp_raw+0x110>)
 8012770:	482e      	ldr	r0, [pc, #184]	; (801282c <etharp_raw+0x10c>)
 8012772:	f001 fd1b 	bl	80141ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801277c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801277e:	4618      	mov	r0, r3
 8012780:	f7f4 fec6 	bl	8007510 <lwip_htons>
 8012784:	4603      	mov	r3, r0
 8012786:	461a      	mov	r2, r3
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012792:	2b06      	cmp	r3, #6
 8012794:	d006      	beq.n	80127a4 <etharp_raw+0x84>
 8012796:	4b23      	ldr	r3, [pc, #140]	; (8012824 <etharp_raw+0x104>)
 8012798:	f240 4269 	movw	r2, #1129	; 0x469
 801279c:	4925      	ldr	r1, [pc, #148]	; (8012834 <etharp_raw+0x114>)
 801279e:	4823      	ldr	r0, [pc, #140]	; (801282c <etharp_raw+0x10c>)
 80127a0:	f001 fd04 	bl	80141ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	3308      	adds	r3, #8
 80127a8:	2206      	movs	r2, #6
 80127aa:	6839      	ldr	r1, [r7, #0]
 80127ac:	4618      	mov	r0, r3
 80127ae:	f001 fccd 	bl	801414c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	3312      	adds	r3, #18
 80127b6:	2206      	movs	r2, #6
 80127b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127ba:	4618      	mov	r0, r3
 80127bc:	f001 fcc6 	bl	801414c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	330e      	adds	r3, #14
 80127c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127c6:	6812      	ldr	r2, [r2, #0]
 80127c8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	3318      	adds	r3, #24
 80127ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127d0:	6812      	ldr	r2, [r2, #0]
 80127d2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	2200      	movs	r2, #0
 80127d8:	701a      	strb	r2, [r3, #0]
 80127da:	2200      	movs	r2, #0
 80127dc:	f042 0201 	orr.w	r2, r2, #1
 80127e0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	2200      	movs	r2, #0
 80127e6:	f042 0208 	orr.w	r2, r2, #8
 80127ea:	709a      	strb	r2, [r3, #2]
 80127ec:	2200      	movs	r2, #0
 80127ee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	2206      	movs	r2, #6
 80127f4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	2204      	movs	r2, #4
 80127fa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80127fc:	f640 0306 	movw	r3, #2054	; 0x806
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	68ba      	ldr	r2, [r7, #8]
 8012806:	69b9      	ldr	r1, [r7, #24]
 8012808:	68f8      	ldr	r0, [r7, #12]
 801280a:	f001 fc25 	bl	8014058 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801280e:	69b8      	ldr	r0, [r7, #24]
 8012810:	f7f6 f9a4 	bl	8008b5c <pbuf_free>
  p = NULL;
 8012814:	2300      	movs	r3, #0
 8012816:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012818:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801281c:	4618      	mov	r0, r3
 801281e:	3720      	adds	r7, #32
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	08018104 	.word	0x08018104
 8012828:	08018254 	.word	0x08018254
 801282c:	0801817c 	.word	0x0801817c
 8012830:	08018304 	.word	0x08018304
 8012834:	08018338 	.word	0x08018338

08012838 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b088      	sub	sp, #32
 801283c:	af04      	add	r7, sp, #16
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012854:	2201      	movs	r2, #1
 8012856:	9203      	str	r2, [sp, #12]
 8012858:	68ba      	ldr	r2, [r7, #8]
 801285a:	9202      	str	r2, [sp, #8]
 801285c:	4a06      	ldr	r2, [pc, #24]	; (8012878 <etharp_request_dst+0x40>)
 801285e:	9201      	str	r2, [sp, #4]
 8012860:	9300      	str	r3, [sp, #0]
 8012862:	4603      	mov	r3, r0
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	f7ff ff5a 	bl	8012720 <etharp_raw>
 801286c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801286e:	4618      	mov	r0, r3
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	bf00      	nop
 8012878:	08041a74 	.word	0x08041a74

0801287c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012886:	4a05      	ldr	r2, [pc, #20]	; (801289c <etharp_request+0x20>)
 8012888:	6839      	ldr	r1, [r7, #0]
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7ff ffd4 	bl	8012838 <etharp_request_dst>
 8012890:	4603      	mov	r3, r0
}
 8012892:	4618      	mov	r0, r3
 8012894:	3708      	adds	r7, #8
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	08041a6c 	.word	0x08041a6c

080128a0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b08e      	sub	sp, #56	; 0x38
 80128a4:	af04      	add	r7, sp, #16
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80128aa:	4b79      	ldr	r3, [pc, #484]	; (8012a90 <icmp_input+0x1f0>)
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80128b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	f003 030f 	and.w	r3, r3, #15
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80128c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128c2:	2b13      	cmp	r3, #19
 80128c4:	f240 80cd 	bls.w	8012a62 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	895b      	ldrh	r3, [r3, #10]
 80128cc:	2b03      	cmp	r3, #3
 80128ce:	f240 80ca 	bls.w	8012a66 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80128dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f000 80b7 	beq.w	8012a54 <icmp_input+0x1b4>
 80128e6:	2b08      	cmp	r3, #8
 80128e8:	f040 80b7 	bne.w	8012a5a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80128ec:	4b69      	ldr	r3, [pc, #420]	; (8012a94 <icmp_input+0x1f4>)
 80128ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80128f0:	4b67      	ldr	r3, [pc, #412]	; (8012a90 <icmp_input+0x1f0>)
 80128f2:	695b      	ldr	r3, [r3, #20]
 80128f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128f8:	2be0      	cmp	r3, #224	; 0xe0
 80128fa:	f000 80bb 	beq.w	8012a74 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80128fe:	4b64      	ldr	r3, [pc, #400]	; (8012a90 <icmp_input+0x1f0>)
 8012900:	695b      	ldr	r3, [r3, #20]
 8012902:	4a63      	ldr	r2, [pc, #396]	; (8012a90 <icmp_input+0x1f0>)
 8012904:	6812      	ldr	r2, [r2, #0]
 8012906:	4611      	mov	r1, r2
 8012908:	4618      	mov	r0, r3
 801290a:	f000 fc0b 	bl	8013124 <ip4_addr_isbroadcast_u32>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	f040 80b1 	bne.w	8012a78 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	891b      	ldrh	r3, [r3, #8]
 801291a:	2b07      	cmp	r3, #7
 801291c:	f240 80a5 	bls.w	8012a6a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012922:	330e      	adds	r3, #14
 8012924:	4619      	mov	r1, r3
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7f6 f882 	bl	8008a30 <pbuf_add_header>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d04b      	beq.n	80129ca <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	891a      	ldrh	r2, [r3, #8]
 8012936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012938:	4413      	add	r3, r2
 801293a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	891b      	ldrh	r3, [r3, #8]
 8012940:	8b7a      	ldrh	r2, [r7, #26]
 8012942:	429a      	cmp	r2, r3
 8012944:	f0c0 809a 	bcc.w	8012a7c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012948:	8b7b      	ldrh	r3, [r7, #26]
 801294a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801294e:	4619      	mov	r1, r3
 8012950:	200e      	movs	r0, #14
 8012952:	f7f5 fe1f 	bl	8008594 <pbuf_alloc>
 8012956:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	2b00      	cmp	r3, #0
 801295c:	f000 8090 	beq.w	8012a80 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	895b      	ldrh	r3, [r3, #10]
 8012964:	461a      	mov	r2, r3
 8012966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012968:	3308      	adds	r3, #8
 801296a:	429a      	cmp	r2, r3
 801296c:	d203      	bcs.n	8012976 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801296e:	6978      	ldr	r0, [r7, #20]
 8012970:	f7f6 f8f4 	bl	8008b5c <pbuf_free>
          goto icmperr;
 8012974:	e085      	b.n	8012a82 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801297c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801297e:	4618      	mov	r0, r3
 8012980:	f001 fbe4 	bl	801414c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012986:	4619      	mov	r1, r3
 8012988:	6978      	ldr	r0, [r7, #20]
 801298a:	f7f6 f861 	bl	8008a50 <pbuf_remove_header>
 801298e:	4603      	mov	r3, r0
 8012990:	2b00      	cmp	r3, #0
 8012992:	d009      	beq.n	80129a8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012994:	4b40      	ldr	r3, [pc, #256]	; (8012a98 <icmp_input+0x1f8>)
 8012996:	22b6      	movs	r2, #182	; 0xb6
 8012998:	4940      	ldr	r1, [pc, #256]	; (8012a9c <icmp_input+0x1fc>)
 801299a:	4841      	ldr	r0, [pc, #260]	; (8012aa0 <icmp_input+0x200>)
 801299c:	f001 fc06 	bl	80141ac <iprintf>
          pbuf_free(r);
 80129a0:	6978      	ldr	r0, [r7, #20]
 80129a2:	f7f6 f8db 	bl	8008b5c <pbuf_free>
          goto icmperr;
 80129a6:	e06c      	b.n	8012a82 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80129a8:	6879      	ldr	r1, [r7, #4]
 80129aa:	6978      	ldr	r0, [r7, #20]
 80129ac:	f7f6 f9fe 	bl	8008dac <pbuf_copy>
 80129b0:	4603      	mov	r3, r0
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d003      	beq.n	80129be <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80129b6:	6978      	ldr	r0, [r7, #20]
 80129b8:	f7f6 f8d0 	bl	8008b5c <pbuf_free>
          goto icmperr;
 80129bc:	e061      	b.n	8012a82 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7f6 f8cc 	bl	8008b5c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	607b      	str	r3, [r7, #4]
 80129c8:	e00f      	b.n	80129ea <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80129ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129cc:	330e      	adds	r3, #14
 80129ce:	4619      	mov	r1, r3
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7f6 f83d 	bl	8008a50 <pbuf_remove_header>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d006      	beq.n	80129ea <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80129dc:	4b2e      	ldr	r3, [pc, #184]	; (8012a98 <icmp_input+0x1f8>)
 80129de:	22c7      	movs	r2, #199	; 0xc7
 80129e0:	4930      	ldr	r1, [pc, #192]	; (8012aa4 <icmp_input+0x204>)
 80129e2:	482f      	ldr	r0, [pc, #188]	; (8012aa0 <icmp_input+0x200>)
 80129e4:	f001 fbe2 	bl	80141ac <iprintf>
          goto icmperr;
 80129e8:	e04b      	b.n	8012a82 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80129f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129f2:	4619      	mov	r1, r3
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7f6 f81b 	bl	8008a30 <pbuf_add_header>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d12b      	bne.n	8012a58 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012a0e:	4b20      	ldr	r3, [pc, #128]	; (8012a90 <icmp_input+0x1f0>)
 8012a10:	691a      	ldr	r2, [r3, #16]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	709a      	strb	r2, [r3, #2]
 8012a22:	2200      	movs	r2, #0
 8012a24:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	22ff      	movs	r2, #255	; 0xff
 8012a2a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	729a      	strb	r2, [r3, #10]
 8012a32:	2200      	movs	r2, #0
 8012a34:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	9302      	str	r3, [sp, #8]
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	9301      	str	r3, [sp, #4]
 8012a3e:	2300      	movs	r3, #0
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	23ff      	movs	r3, #255	; 0xff
 8012a44:	2200      	movs	r2, #0
 8012a46:	69f9      	ldr	r1, [r7, #28]
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 fa93 	bl	8012f74 <ip4_output_if>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012a52:	e001      	b.n	8012a58 <icmp_input+0x1b8>
      break;
 8012a54:	bf00      	nop
 8012a56:	e000      	b.n	8012a5a <icmp_input+0x1ba>
      break;
 8012a58:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f7f6 f87e 	bl	8008b5c <pbuf_free>
  return;
 8012a60:	e013      	b.n	8012a8a <icmp_input+0x1ea>
    goto lenerr;
 8012a62:	bf00      	nop
 8012a64:	e002      	b.n	8012a6c <icmp_input+0x1cc>
    goto lenerr;
 8012a66:	bf00      	nop
 8012a68:	e000      	b.n	8012a6c <icmp_input+0x1cc>
        goto lenerr;
 8012a6a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f7f6 f875 	bl	8008b5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012a72:	e00a      	b.n	8012a8a <icmp_input+0x1ea>
        goto icmperr;
 8012a74:	bf00      	nop
 8012a76:	e004      	b.n	8012a82 <icmp_input+0x1e2>
        goto icmperr;
 8012a78:	bf00      	nop
 8012a7a:	e002      	b.n	8012a82 <icmp_input+0x1e2>
          goto icmperr;
 8012a7c:	bf00      	nop
 8012a7e:	e000      	b.n	8012a82 <icmp_input+0x1e2>
          goto icmperr;
 8012a80:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7f6 f86a 	bl	8008b5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012a88:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012a8a:	3728      	adds	r7, #40	; 0x28
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	200038ec 	.word	0x200038ec
 8012a94:	20003900 	.word	0x20003900
 8012a98:	0801837c 	.word	0x0801837c
 8012a9c:	080183b4 	.word	0x080183b4
 8012aa0:	080183ec 	.word	0x080183ec
 8012aa4:	08018414 	.word	0x08018414

08012aa8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012ab4:	78fb      	ldrb	r3, [r7, #3]
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	2103      	movs	r1, #3
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f000 f814 	bl	8012ae8 <icmp_send_response>
}
 8012ac0:	bf00      	nop
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012ad4:	78fb      	ldrb	r3, [r7, #3]
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	210b      	movs	r1, #11
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f000 f804 	bl	8012ae8 <icmp_send_response>
}
 8012ae0:	bf00      	nop
 8012ae2:	3708      	adds	r7, #8
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08c      	sub	sp, #48	; 0x30
 8012aec:	af04      	add	r7, sp, #16
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	460b      	mov	r3, r1
 8012af2:	70fb      	strb	r3, [r7, #3]
 8012af4:	4613      	mov	r3, r2
 8012af6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012af8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012afc:	2124      	movs	r1, #36	; 0x24
 8012afe:	2022      	movs	r0, #34	; 0x22
 8012b00:	f7f5 fd48 	bl	8008594 <pbuf_alloc>
 8012b04:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d04c      	beq.n	8012ba6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	895b      	ldrh	r3, [r3, #10]
 8012b10:	2b23      	cmp	r3, #35	; 0x23
 8012b12:	d806      	bhi.n	8012b22 <icmp_send_response+0x3a>
 8012b14:	4b26      	ldr	r3, [pc, #152]	; (8012bb0 <icmp_send_response+0xc8>)
 8012b16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012b1a:	4926      	ldr	r1, [pc, #152]	; (8012bb4 <icmp_send_response+0xcc>)
 8012b1c:	4826      	ldr	r0, [pc, #152]	; (8012bb8 <icmp_send_response+0xd0>)
 8012b1e:	f001 fb45 	bl	80141ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012b28:	69fb      	ldr	r3, [r7, #28]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	78fa      	ldrb	r2, [r7, #3]
 8012b32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	78ba      	ldrb	r2, [r7, #2]
 8012b38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	711a      	strb	r2, [r3, #4]
 8012b40:	2200      	movs	r2, #0
 8012b42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	2200      	movs	r2, #0
 8012b48:	719a      	strb	r2, [r3, #6]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	f103 0008 	add.w	r0, r3, #8
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	221c      	movs	r2, #28
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	f001 faf5 	bl	801414c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012b68:	f107 030c 	add.w	r3, r7, #12
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f000 f825 	bl	8012bbc <ip4_route>
 8012b72:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d011      	beq.n	8012b9e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	709a      	strb	r2, [r3, #2]
 8012b80:	2200      	movs	r2, #0
 8012b82:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012b84:	f107 020c 	add.w	r2, r7, #12
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	9302      	str	r3, [sp, #8]
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	9301      	str	r3, [sp, #4]
 8012b90:	2300      	movs	r3, #0
 8012b92:	9300      	str	r3, [sp, #0]
 8012b94:	23ff      	movs	r3, #255	; 0xff
 8012b96:	2100      	movs	r1, #0
 8012b98:	69f8      	ldr	r0, [r7, #28]
 8012b9a:	f000 f9eb 	bl	8012f74 <ip4_output_if>
  }
  pbuf_free(q);
 8012b9e:	69f8      	ldr	r0, [r7, #28]
 8012ba0:	f7f5 ffdc 	bl	8008b5c <pbuf_free>
 8012ba4:	e000      	b.n	8012ba8 <icmp_send_response+0xc0>
    return;
 8012ba6:	bf00      	nop
}
 8012ba8:	3720      	adds	r7, #32
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	0801837c 	.word	0x0801837c
 8012bb4:	08018448 	.word	0x08018448
 8012bb8:	080183ec 	.word	0x080183ec

08012bbc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b085      	sub	sp, #20
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012bc4:	4b33      	ldr	r3, [pc, #204]	; (8012c94 <ip4_route+0xd8>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	60fb      	str	r3, [r7, #12]
 8012bca:	e036      	b.n	8012c3a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012bd2:	f003 0301 	and.w	r3, r3, #1
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d02b      	beq.n	8012c34 <ip4_route+0x78>
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012be2:	089b      	lsrs	r3, r3, #2
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	b2db      	uxtb	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d022      	beq.n	8012c34 <ip4_route+0x78>
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	3304      	adds	r3, #4
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d01d      	beq.n	8012c34 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	3304      	adds	r3, #4
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	405a      	eors	r2, r3
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	3308      	adds	r3, #8
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	4013      	ands	r3, r2
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d101      	bne.n	8012c14 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	e038      	b.n	8012c86 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c1a:	f003 0302 	and.w	r3, r3, #2
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d108      	bne.n	8012c34 <ip4_route+0x78>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681a      	ldr	r2, [r3, #0]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	330c      	adds	r3, #12
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d101      	bne.n	8012c34 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	e028      	b.n	8012c86 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	60fb      	str	r3, [r7, #12]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d1c5      	bne.n	8012bcc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012c40:	4b15      	ldr	r3, [pc, #84]	; (8012c98 <ip4_route+0xdc>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d01a      	beq.n	8012c7e <ip4_route+0xc2>
 8012c48:	4b13      	ldr	r3, [pc, #76]	; (8012c98 <ip4_route+0xdc>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c50:	f003 0301 	and.w	r3, r3, #1
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d012      	beq.n	8012c7e <ip4_route+0xc2>
 8012c58:	4b0f      	ldr	r3, [pc, #60]	; (8012c98 <ip4_route+0xdc>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c60:	f003 0304 	and.w	r3, r3, #4
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00a      	beq.n	8012c7e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012c68:	4b0b      	ldr	r3, [pc, #44]	; (8012c98 <ip4_route+0xdc>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	3304      	adds	r3, #4
 8012c6e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d004      	beq.n	8012c7e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8012c7c:	d101      	bne.n	8012c82 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	e001      	b.n	8012c86 <ip4_route+0xca>
  }

  return netif_default;
 8012c82:	4b05      	ldr	r3, [pc, #20]	; (8012c98 <ip4_route+0xdc>)
 8012c84:	681b      	ldr	r3, [r3, #0]
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3714      	adds	r7, #20
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c90:	4770      	bx	lr
 8012c92:	bf00      	nop
 8012c94:	20006e40 	.word	0x20006e40
 8012c98:	20006e44 	.word	0x20006e44

08012c9c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012caa:	f003 0301 	and.w	r3, r3, #1
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d016      	beq.n	8012ce2 <ip4_input_accept+0x46>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	3304      	adds	r3, #4
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d011      	beq.n	8012ce2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012cbe:	4b0b      	ldr	r3, [pc, #44]	; (8012cec <ip4_input_accept+0x50>)
 8012cc0:	695a      	ldr	r2, [r3, #20]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	3304      	adds	r3, #4
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d008      	beq.n	8012cde <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012ccc:	4b07      	ldr	r3, [pc, #28]	; (8012cec <ip4_input_accept+0x50>)
 8012cce:	695b      	ldr	r3, [r3, #20]
 8012cd0:	6879      	ldr	r1, [r7, #4]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 fa26 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8012cd8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d001      	beq.n	8012ce2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e000      	b.n	8012ce4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	200038ec 	.word	0x200038ec

08012cf0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b088      	sub	sp, #32
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	091b      	lsrs	r3, r3, #4
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	2b04      	cmp	r3, #4
 8012d0e:	d004      	beq.n	8012d1a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7f5 ff23 	bl	8008b5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012d16:	2300      	movs	r3, #0
 8012d18:	e123      	b.n	8012f62 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	f003 030f 	and.w	r3, r3, #15
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	009b      	lsls	r3, r3, #2
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	885b      	ldrh	r3, [r3, #2]
 8012d2e:	b29b      	uxth	r3, r3
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7f4 fbed 	bl	8007510 <lwip_htons>
 8012d36:	4603      	mov	r3, r0
 8012d38:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	891b      	ldrh	r3, [r3, #8]
 8012d3e:	8a3a      	ldrh	r2, [r7, #16]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d204      	bcs.n	8012d4e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012d44:	8a3b      	ldrh	r3, [r7, #16]
 8012d46:	4619      	mov	r1, r3
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f7f5 fd81 	bl	8008850 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	895b      	ldrh	r3, [r3, #10]
 8012d52:	8a7a      	ldrh	r2, [r7, #18]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d807      	bhi.n	8012d68 <ip4_input+0x78>
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	891b      	ldrh	r3, [r3, #8]
 8012d5c:	8a3a      	ldrh	r2, [r7, #16]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d802      	bhi.n	8012d68 <ip4_input+0x78>
 8012d62:	8a7b      	ldrh	r3, [r7, #18]
 8012d64:	2b13      	cmp	r3, #19
 8012d66:	d804      	bhi.n	8012d72 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7f5 fef7 	bl	8008b5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	e0f7      	b.n	8012f62 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	691b      	ldr	r3, [r3, #16]
 8012d76:	4a7d      	ldr	r2, [pc, #500]	; (8012f6c <ip4_input+0x27c>)
 8012d78:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	4a7b      	ldr	r2, [pc, #492]	; (8012f6c <ip4_input+0x27c>)
 8012d80:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d82:	4b7a      	ldr	r3, [pc, #488]	; (8012f6c <ip4_input+0x27c>)
 8012d84:	695b      	ldr	r3, [r3, #20]
 8012d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d8a:	2be0      	cmp	r3, #224	; 0xe0
 8012d8c:	d112      	bne.n	8012db4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012d94:	f003 0301 	and.w	r3, r3, #1
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d007      	beq.n	8012dae <ip4_input+0xbe>
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	3304      	adds	r3, #4
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d002      	beq.n	8012dae <ip4_input+0xbe>
      netif = inp;
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	61bb      	str	r3, [r7, #24]
 8012dac:	e02a      	b.n	8012e04 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012dae:	2300      	movs	r3, #0
 8012db0:	61bb      	str	r3, [r7, #24]
 8012db2:	e027      	b.n	8012e04 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012db4:	6838      	ldr	r0, [r7, #0]
 8012db6:	f7ff ff71 	bl	8012c9c <ip4_input_accept>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d002      	beq.n	8012dc6 <ip4_input+0xd6>
      netif = inp;
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	61bb      	str	r3, [r7, #24]
 8012dc4:	e01e      	b.n	8012e04 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012dca:	4b68      	ldr	r3, [pc, #416]	; (8012f6c <ip4_input+0x27c>)
 8012dcc:	695b      	ldr	r3, [r3, #20]
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8012dd2:	d017      	beq.n	8012e04 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012dd4:	4b66      	ldr	r3, [pc, #408]	; (8012f70 <ip4_input+0x280>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	61bb      	str	r3, [r7, #24]
 8012dda:	e00e      	b.n	8012dfa <ip4_input+0x10a>
          if (netif == inp) {
 8012ddc:	69ba      	ldr	r2, [r7, #24]
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d006      	beq.n	8012df2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012de4:	69b8      	ldr	r0, [r7, #24]
 8012de6:	f7ff ff59 	bl	8012c9c <ip4_input_accept>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d108      	bne.n	8012e02 <ip4_input+0x112>
 8012df0:	e000      	b.n	8012df4 <ip4_input+0x104>
            continue;
 8012df2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	61bb      	str	r3, [r7, #24]
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d1ed      	bne.n	8012ddc <ip4_input+0xec>
 8012e00:	e000      	b.n	8012e04 <ip4_input+0x114>
            break;
 8012e02:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012e04:	69bb      	ldr	r3, [r7, #24]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d111      	bne.n	8012e2e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	7a5b      	ldrb	r3, [r3, #9]
 8012e0e:	2b11      	cmp	r3, #17
 8012e10:	d10d      	bne.n	8012e2e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012e12:	8a7b      	ldrh	r3, [r7, #18]
 8012e14:	69fa      	ldr	r2, [r7, #28]
 8012e16:	4413      	add	r3, r2
 8012e18:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	885b      	ldrh	r3, [r3, #2]
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012e24:	d103      	bne.n	8012e2e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d017      	beq.n	8012e64 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012e34:	4b4d      	ldr	r3, [pc, #308]	; (8012f6c <ip4_input+0x27c>)
 8012e36:	691b      	ldr	r3, [r3, #16]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d013      	beq.n	8012e64 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e3c:	4b4b      	ldr	r3, [pc, #300]	; (8012f6c <ip4_input+0x27c>)
 8012e3e:	691b      	ldr	r3, [r3, #16]
 8012e40:	6839      	ldr	r1, [r7, #0]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f000 f96e 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d105      	bne.n	8012e5a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012e4e:	4b47      	ldr	r3, [pc, #284]	; (8012f6c <ip4_input+0x27c>)
 8012e50:	691b      	ldr	r3, [r3, #16]
 8012e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e56:	2be0      	cmp	r3, #224	; 0xe0
 8012e58:	d104      	bne.n	8012e64 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7f5 fe7e 	bl	8008b5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012e60:	2300      	movs	r3, #0
 8012e62:	e07e      	b.n	8012f62 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d104      	bne.n	8012e74 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f7f5 fe76 	bl	8008b5c <pbuf_free>
    return ERR_OK;
 8012e70:	2300      	movs	r3, #0
 8012e72:	e076      	b.n	8012f62 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	88db      	ldrh	r3, [r3, #6]
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012e80:	4013      	ands	r3, r2
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00b      	beq.n	8012e9e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f000 fd24 	bl	80138d4 <ip4_reass>
 8012e8c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d101      	bne.n	8012e98 <ip4_input+0x1a8>
      return ERR_OK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	e064      	b.n	8012f62 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012e9e:	4a33      	ldr	r2, [pc, #204]	; (8012f6c <ip4_input+0x27c>)
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012ea4:	4a31      	ldr	r2, [pc, #196]	; (8012f6c <ip4_input+0x27c>)
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012eaa:	4a30      	ldr	r2, [pc, #192]	; (8012f6c <ip4_input+0x27c>)
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	f003 030f 	and.w	r3, r3, #15
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	b29a      	uxth	r2, r3
 8012ec0:	4b2a      	ldr	r3, [pc, #168]	; (8012f6c <ip4_input+0x27c>)
 8012ec2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012ec4:	8a7b      	ldrh	r3, [r7, #18]
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f7f5 fdc1 	bl	8008a50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	7a5b      	ldrb	r3, [r3, #9]
 8012ed2:	2b11      	cmp	r3, #17
 8012ed4:	d006      	beq.n	8012ee4 <ip4_input+0x1f4>
 8012ed6:	2b11      	cmp	r3, #17
 8012ed8:	dc13      	bgt.n	8012f02 <ip4_input+0x212>
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d00c      	beq.n	8012ef8 <ip4_input+0x208>
 8012ede:	2b06      	cmp	r3, #6
 8012ee0:	d005      	beq.n	8012eee <ip4_input+0x1fe>
 8012ee2:	e00e      	b.n	8012f02 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012ee4:	6839      	ldr	r1, [r7, #0]
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f7fc fb24 	bl	800f534 <udp_input>
        break;
 8012eec:	e026      	b.n	8012f3c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012eee:	6839      	ldr	r1, [r7, #0]
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7f7 ff11 	bl	800ad18 <tcp_input>
        break;
 8012ef6:	e021      	b.n	8012f3c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f7ff fcd0 	bl	80128a0 <icmp_input>
        break;
 8012f00:	e01c      	b.n	8012f3c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012f02:	4b1a      	ldr	r3, [pc, #104]	; (8012f6c <ip4_input+0x27c>)
 8012f04:	695b      	ldr	r3, [r3, #20]
 8012f06:	69b9      	ldr	r1, [r7, #24]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 f90b 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d10f      	bne.n	8012f34 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f14:	4b15      	ldr	r3, [pc, #84]	; (8012f6c <ip4_input+0x27c>)
 8012f16:	695b      	ldr	r3, [r3, #20]
 8012f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012f1c:	2be0      	cmp	r3, #224	; 0xe0
 8012f1e:	d009      	beq.n	8012f34 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012f20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f24:	4619      	mov	r1, r3
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7f5 fe05 	bl	8008b36 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012f2c:	2102      	movs	r1, #2
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7ff fdba 	bl	8012aa8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7f5 fe11 	bl	8008b5c <pbuf_free>
        break;
 8012f3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012f3c:	4b0b      	ldr	r3, [pc, #44]	; (8012f6c <ip4_input+0x27c>)
 8012f3e:	2200      	movs	r2, #0
 8012f40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012f42:	4b0a      	ldr	r3, [pc, #40]	; (8012f6c <ip4_input+0x27c>)
 8012f44:	2200      	movs	r2, #0
 8012f46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012f48:	4b08      	ldr	r3, [pc, #32]	; (8012f6c <ip4_input+0x27c>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012f4e:	4b07      	ldr	r3, [pc, #28]	; (8012f6c <ip4_input+0x27c>)
 8012f50:	2200      	movs	r2, #0
 8012f52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012f54:	4b05      	ldr	r3, [pc, #20]	; (8012f6c <ip4_input+0x27c>)
 8012f56:	2200      	movs	r2, #0
 8012f58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012f5a:	4b04      	ldr	r3, [pc, #16]	; (8012f6c <ip4_input+0x27c>)
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3720      	adds	r7, #32
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	200038ec 	.word	0x200038ec
 8012f70:	20006e40 	.word	0x20006e40

08012f74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b08a      	sub	sp, #40	; 0x28
 8012f78:	af04      	add	r7, sp, #16
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d009      	beq.n	8012fa0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d003      	beq.n	8012f9a <ip4_output_if+0x26>
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d102      	bne.n	8012fa0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9c:	3304      	adds	r3, #4
 8012f9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012fa0:	78fa      	ldrb	r2, [r7, #3]
 8012fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa4:	9302      	str	r3, [sp, #8]
 8012fa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012faa:	9301      	str	r3, [sp, #4]
 8012fac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	4613      	mov	r3, r2
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	6979      	ldr	r1, [r7, #20]
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 f805 	bl	8012fc8 <ip4_output_if_src>
 8012fbe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3718      	adds	r7, #24
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b088      	sub	sp, #32
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	60f8      	str	r0, [r7, #12]
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	607a      	str	r2, [r7, #4]
 8012fd4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	7b9b      	ldrb	r3, [r3, #14]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d006      	beq.n	8012fec <ip4_output_if_src+0x24>
 8012fde:	4b4b      	ldr	r3, [pc, #300]	; (801310c <ip4_output_if_src+0x144>)
 8012fe0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012fe4:	494a      	ldr	r1, [pc, #296]	; (8013110 <ip4_output_if_src+0x148>)
 8012fe6:	484b      	ldr	r0, [pc, #300]	; (8013114 <ip4_output_if_src+0x14c>)
 8012fe8:	f001 f8e0 	bl	80141ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d060      	beq.n	80130b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012ff2:	2314      	movs	r3, #20
 8012ff4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012ff6:	2114      	movs	r1, #20
 8012ff8:	68f8      	ldr	r0, [r7, #12]
 8012ffa:	f7f5 fd19 	bl	8008a30 <pbuf_add_header>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013004:	f06f 0301 	mvn.w	r3, #1
 8013008:	e07c      	b.n	8013104 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	895b      	ldrh	r3, [r3, #10]
 8013014:	2b13      	cmp	r3, #19
 8013016:	d806      	bhi.n	8013026 <ip4_output_if_src+0x5e>
 8013018:	4b3c      	ldr	r3, [pc, #240]	; (801310c <ip4_output_if_src+0x144>)
 801301a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801301e:	493e      	ldr	r1, [pc, #248]	; (8013118 <ip4_output_if_src+0x150>)
 8013020:	483c      	ldr	r0, [pc, #240]	; (8013114 <ip4_output_if_src+0x14c>)
 8013022:	f001 f8c3 	bl	80141ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	78fa      	ldrb	r2, [r7, #3]
 801302a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013032:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681a      	ldr	r2, [r3, #0]
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801303c:	8b7b      	ldrh	r3, [r7, #26]
 801303e:	089b      	lsrs	r3, r3, #2
 8013040:	b29b      	uxth	r3, r3
 8013042:	b2db      	uxtb	r3, r3
 8013044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013048:	b2da      	uxtb	r2, r3
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013054:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	891b      	ldrh	r3, [r3, #8]
 801305a:	4618      	mov	r0, r3
 801305c:	f7f4 fa58 	bl	8007510 <lwip_htons>
 8013060:	4603      	mov	r3, r0
 8013062:	461a      	mov	r2, r3
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	2200      	movs	r2, #0
 801306c:	719a      	strb	r2, [r3, #6]
 801306e:	2200      	movs	r2, #0
 8013070:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013072:	4b2a      	ldr	r3, [pc, #168]	; (801311c <ip4_output_if_src+0x154>)
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	4618      	mov	r0, r3
 8013078:	f7f4 fa4a 	bl	8007510 <lwip_htons>
 801307c:	4603      	mov	r3, r0
 801307e:	461a      	mov	r2, r3
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013084:	4b25      	ldr	r3, [pc, #148]	; (801311c <ip4_output_if_src+0x154>)
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	3301      	adds	r3, #1
 801308a:	b29a      	uxth	r2, r3
 801308c:	4b23      	ldr	r3, [pc, #140]	; (801311c <ip4_output_if_src+0x154>)
 801308e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d104      	bne.n	80130a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013096:	4b22      	ldr	r3, [pc, #136]	; (8013120 <ip4_output_if_src+0x158>)
 8013098:	681a      	ldr	r2, [r3, #0]
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	60da      	str	r2, [r3, #12]
 801309e:	e003      	b.n	80130a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	2200      	movs	r2, #0
 80130ac:	729a      	strb	r2, [r3, #10]
 80130ae:	2200      	movs	r2, #0
 80130b0:	72da      	strb	r2, [r3, #11]
 80130b2:	e00f      	b.n	80130d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	895b      	ldrh	r3, [r3, #10]
 80130b8:	2b13      	cmp	r3, #19
 80130ba:	d802      	bhi.n	80130c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80130bc:	f06f 0301 	mvn.w	r3, #1
 80130c0:	e020      	b.n	8013104 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	691b      	ldr	r3, [r3, #16]
 80130cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80130ce:	f107 0314 	add.w	r3, r7, #20
 80130d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80130d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00c      	beq.n	80130f6 <ip4_output_if_src+0x12e>
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	891a      	ldrh	r2, [r3, #8]
 80130e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d906      	bls.n	80130f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80130e8:	687a      	ldr	r2, [r7, #4]
 80130ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f000 fddf 	bl	8013cb0 <ip4_frag>
 80130f2:	4603      	mov	r3, r0
 80130f4:	e006      	b.n	8013104 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80130f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f8:	695b      	ldr	r3, [r3, #20]
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	68f9      	ldr	r1, [r7, #12]
 80130fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013100:	4798      	blx	r3
 8013102:	4603      	mov	r3, r0
}
 8013104:	4618      	mov	r0, r3
 8013106:	3720      	adds	r7, #32
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	08018474 	.word	0x08018474
 8013110:	080184a8 	.word	0x080184a8
 8013114:	080184b4 	.word	0x080184b4
 8013118:	080184dc 	.word	0x080184dc
 801311c:	20000672 	.word	0x20000672
 8013120:	08041a64 	.word	0x08041a64

08013124 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013124:	b480      	push	{r7}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013138:	d002      	beq.n	8013140 <ip4_addr_isbroadcast_u32+0x1c>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d101      	bne.n	8013144 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013140:	2301      	movs	r3, #1
 8013142:	e02a      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801314a:	f003 0302 	and.w	r3, r3, #2
 801314e:	2b00      	cmp	r3, #0
 8013150:	d101      	bne.n	8013156 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013152:	2300      	movs	r3, #0
 8013154:	e021      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	3304      	adds	r3, #4
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	429a      	cmp	r2, r3
 8013160:	d101      	bne.n	8013166 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013162:	2300      	movs	r3, #0
 8013164:	e019      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013166:	68fa      	ldr	r2, [r7, #12]
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	3304      	adds	r3, #4
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	405a      	eors	r2, r3
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	3308      	adds	r3, #8
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4013      	ands	r3, r2
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10d      	bne.n	8013198 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	3308      	adds	r3, #8
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	43da      	mvns	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	3308      	adds	r3, #8
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013190:	429a      	cmp	r2, r3
 8013192:	d101      	bne.n	8013198 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013194:	2301      	movs	r3, #1
 8013196:	e000      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013198:	2300      	movs	r3, #0
  }
}
 801319a:	4618      	mov	r0, r3
 801319c:	3714      	adds	r7, #20
 801319e:	46bd      	mov	sp, r7
 80131a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a4:	4770      	bx	lr
	...

080131a8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80131b0:	2210      	movs	r2, #16
 80131b2:	4904      	ldr	r1, [pc, #16]	; (80131c4 <ip4addr_ntoa+0x1c>)
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 f807 	bl	80131c8 <ip4addr_ntoa_r>
 80131ba:	4603      	mov	r3, r0
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3708      	adds	r7, #8
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	20000674 	.word	0x20000674

080131c8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b08d      	sub	sp, #52	; 0x34
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	60f8      	str	r0, [r7, #12]
 80131d0:	60b9      	str	r1, [r7, #8]
 80131d2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80131d4:	2300      	movs	r3, #0
 80131d6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80131e2:	f107 0318 	add.w	r3, r7, #24
 80131e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80131e8:	2300      	movs	r3, #0
 80131ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80131ee:	e059      	b.n	80132a4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80131f0:	2300      	movs	r3, #0
 80131f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80131f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f8:	781a      	ldrb	r2, [r3, #0]
 80131fa:	4b33      	ldr	r3, [pc, #204]	; (80132c8 <ip4addr_ntoa_r+0x100>)
 80131fc:	fba3 1302 	umull	r1, r3, r3, r2
 8013200:	08d9      	lsrs	r1, r3, #3
 8013202:	460b      	mov	r3, r1
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	440b      	add	r3, r1
 8013208:	005b      	lsls	r3, r3, #1
 801320a:	1ad3      	subs	r3, r2, r3
 801320c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	4a2d      	ldr	r2, [pc, #180]	; (80132c8 <ip4addr_ntoa_r+0x100>)
 8013214:	fba2 2303 	umull	r2, r3, r2, r3
 8013218:	08db      	lsrs	r3, r3, #3
 801321a:	b2da      	uxtb	r2, r3
 801321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8013220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013224:	1c5a      	adds	r2, r3, #1
 8013226:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801322a:	4619      	mov	r1, r3
 801322c:	7ffb      	ldrb	r3, [r7, #31]
 801322e:	3330      	adds	r3, #48	; 0x30
 8013230:	b2da      	uxtb	r2, r3
 8013232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013236:	440b      	add	r3, r1
 8013238:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d1d8      	bne.n	80131f6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8013244:	e012      	b.n	801326c <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8013246:	6a3b      	ldr	r3, [r7, #32]
 8013248:	1c5a      	adds	r2, r3, #1
 801324a:	623a      	str	r2, [r7, #32]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	429a      	cmp	r2, r3
 8013250:	dc01      	bgt.n	8013256 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8013252:	2300      	movs	r3, #0
 8013254:	e031      	b.n	80132ba <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8013256:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325c:	1c59      	adds	r1, r3, #1
 801325e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8013260:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013264:	440a      	add	r2, r1
 8013266:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801326a:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801326c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013270:	1e5a      	subs	r2, r3, #1
 8013272:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1e5      	bne.n	8013246 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801327a:	6a3b      	ldr	r3, [r7, #32]
 801327c:	1c5a      	adds	r2, r3, #1
 801327e:	623a      	str	r2, [r7, #32]
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	429a      	cmp	r2, r3
 8013284:	dc01      	bgt.n	801328a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8013286:	2300      	movs	r3, #0
 8013288:	e017      	b.n	80132ba <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328c:	1c5a      	adds	r2, r3, #1
 801328e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013290:	222e      	movs	r2, #46	; 0x2e
 8013292:	701a      	strb	r2, [r3, #0]
    ap++;
 8013294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013296:	3301      	adds	r3, #1
 8013298:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801329a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801329e:	3301      	adds	r3, #1
 80132a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132a8:	2b03      	cmp	r3, #3
 80132aa:	d9a1      	bls.n	80131f0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80132ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ae:	3b01      	subs	r3, #1
 80132b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	2200      	movs	r2, #0
 80132b6:	701a      	strb	r2, [r3, #0]
  return buf;
 80132b8:	68bb      	ldr	r3, [r7, #8]
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3734      	adds	r7, #52	; 0x34
 80132be:	46bd      	mov	sp, r7
 80132c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop
 80132c8:	cccccccd 	.word	0xcccccccd

080132cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b084      	sub	sp, #16
 80132d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80132d2:	2300      	movs	r3, #0
 80132d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80132d6:	4b12      	ldr	r3, [pc, #72]	; (8013320 <ip_reass_tmr+0x54>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80132dc:	e018      	b.n	8013310 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	7fdb      	ldrb	r3, [r3, #31]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d00b      	beq.n	80132fe <ip_reass_tmr+0x32>
      r->timer--;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	7fdb      	ldrb	r3, [r3, #31]
 80132ea:	3b01      	subs	r3, #1
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	60fb      	str	r3, [r7, #12]
 80132fc:	e008      	b.n	8013310 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013308:	68b9      	ldr	r1, [r7, #8]
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 f80a 	bl	8013324 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d1e3      	bne.n	80132de <ip_reass_tmr+0x12>
    }
  }
}
 8013316:	bf00      	nop
 8013318:	bf00      	nop
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	20000684 	.word	0x20000684

08013324 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b088      	sub	sp, #32
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801332e:	2300      	movs	r3, #0
 8013330:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013332:	683a      	ldr	r2, [r7, #0]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	429a      	cmp	r2, r3
 8013338:	d105      	bne.n	8013346 <ip_reass_free_complete_datagram+0x22>
 801333a:	4b45      	ldr	r3, [pc, #276]	; (8013450 <ip_reass_free_complete_datagram+0x12c>)
 801333c:	22ab      	movs	r2, #171	; 0xab
 801333e:	4945      	ldr	r1, [pc, #276]	; (8013454 <ip_reass_free_complete_datagram+0x130>)
 8013340:	4845      	ldr	r0, [pc, #276]	; (8013458 <ip_reass_free_complete_datagram+0x134>)
 8013342:	f000 ff33 	bl	80141ac <iprintf>
  if (prev != NULL) {
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d00a      	beq.n	8013362 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	429a      	cmp	r2, r3
 8013354:	d005      	beq.n	8013362 <ip_reass_free_complete_datagram+0x3e>
 8013356:	4b3e      	ldr	r3, [pc, #248]	; (8013450 <ip_reass_free_complete_datagram+0x12c>)
 8013358:	22ad      	movs	r2, #173	; 0xad
 801335a:	4940      	ldr	r1, [pc, #256]	; (801345c <ip_reass_free_complete_datagram+0x138>)
 801335c:	483e      	ldr	r0, [pc, #248]	; (8013458 <ip_reass_free_complete_datagram+0x134>)
 801335e:	f000 ff25 	bl	80141ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	889b      	ldrh	r3, [r3, #4]
 801336e:	b29b      	uxth	r3, r3
 8013370:	2b00      	cmp	r3, #0
 8013372:	d12a      	bne.n	80133ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	6858      	ldr	r0, [r3, #4]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	3308      	adds	r3, #8
 801338a:	2214      	movs	r2, #20
 801338c:	4619      	mov	r1, r3
 801338e:	f000 fedd 	bl	801414c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013392:	2101      	movs	r1, #1
 8013394:	69b8      	ldr	r0, [r7, #24]
 8013396:	f7ff fb97 	bl	8012ac8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801339a:	69b8      	ldr	r0, [r7, #24]
 801339c:	f7f5 fc66 	bl	8008c6c <pbuf_clen>
 80133a0:	4603      	mov	r3, r0
 80133a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80133a4:	8bfa      	ldrh	r2, [r7, #30]
 80133a6:	8a7b      	ldrh	r3, [r7, #18]
 80133a8:	4413      	add	r3, r2
 80133aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133ae:	db05      	blt.n	80133bc <ip_reass_free_complete_datagram+0x98>
 80133b0:	4b27      	ldr	r3, [pc, #156]	; (8013450 <ip_reass_free_complete_datagram+0x12c>)
 80133b2:	22bc      	movs	r2, #188	; 0xbc
 80133b4:	492a      	ldr	r1, [pc, #168]	; (8013460 <ip_reass_free_complete_datagram+0x13c>)
 80133b6:	4828      	ldr	r0, [pc, #160]	; (8013458 <ip_reass_free_complete_datagram+0x134>)
 80133b8:	f000 fef8 	bl	80141ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80133bc:	8bfa      	ldrh	r2, [r7, #30]
 80133be:	8a7b      	ldrh	r3, [r7, #18]
 80133c0:	4413      	add	r3, r2
 80133c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80133c4:	69b8      	ldr	r0, [r7, #24]
 80133c6:	f7f5 fbc9 	bl	8008b5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80133d0:	e01f      	b.n	8013412 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80133d2:	69bb      	ldr	r3, [r7, #24]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80133e2:	68f8      	ldr	r0, [r7, #12]
 80133e4:	f7f5 fc42 	bl	8008c6c <pbuf_clen>
 80133e8:	4603      	mov	r3, r0
 80133ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80133ec:	8bfa      	ldrh	r2, [r7, #30]
 80133ee:	8a7b      	ldrh	r3, [r7, #18]
 80133f0:	4413      	add	r3, r2
 80133f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133f6:	db05      	blt.n	8013404 <ip_reass_free_complete_datagram+0xe0>
 80133f8:	4b15      	ldr	r3, [pc, #84]	; (8013450 <ip_reass_free_complete_datagram+0x12c>)
 80133fa:	22cc      	movs	r2, #204	; 0xcc
 80133fc:	4918      	ldr	r1, [pc, #96]	; (8013460 <ip_reass_free_complete_datagram+0x13c>)
 80133fe:	4816      	ldr	r0, [pc, #88]	; (8013458 <ip_reass_free_complete_datagram+0x134>)
 8013400:	f000 fed4 	bl	80141ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013404:	8bfa      	ldrh	r2, [r7, #30]
 8013406:	8a7b      	ldrh	r3, [r7, #18]
 8013408:	4413      	add	r3, r2
 801340a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f7f5 fba5 	bl	8008b5c <pbuf_free>
  while (p != NULL) {
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d1dc      	bne.n	80133d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013418:	6839      	ldr	r1, [r7, #0]
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	f000 f8c2 	bl	80135a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013420:	4b10      	ldr	r3, [pc, #64]	; (8013464 <ip_reass_free_complete_datagram+0x140>)
 8013422:	881b      	ldrh	r3, [r3, #0]
 8013424:	8bfa      	ldrh	r2, [r7, #30]
 8013426:	429a      	cmp	r2, r3
 8013428:	d905      	bls.n	8013436 <ip_reass_free_complete_datagram+0x112>
 801342a:	4b09      	ldr	r3, [pc, #36]	; (8013450 <ip_reass_free_complete_datagram+0x12c>)
 801342c:	22d2      	movs	r2, #210	; 0xd2
 801342e:	490e      	ldr	r1, [pc, #56]	; (8013468 <ip_reass_free_complete_datagram+0x144>)
 8013430:	4809      	ldr	r0, [pc, #36]	; (8013458 <ip_reass_free_complete_datagram+0x134>)
 8013432:	f000 febb 	bl	80141ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013436:	4b0b      	ldr	r3, [pc, #44]	; (8013464 <ip_reass_free_complete_datagram+0x140>)
 8013438:	881a      	ldrh	r2, [r3, #0]
 801343a:	8bfb      	ldrh	r3, [r7, #30]
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	b29a      	uxth	r2, r3
 8013440:	4b08      	ldr	r3, [pc, #32]	; (8013464 <ip_reass_free_complete_datagram+0x140>)
 8013442:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013444:	8bfb      	ldrh	r3, [r7, #30]
}
 8013446:	4618      	mov	r0, r3
 8013448:	3720      	adds	r7, #32
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	0801850c 	.word	0x0801850c
 8013454:	08018548 	.word	0x08018548
 8013458:	08018554 	.word	0x08018554
 801345c:	0801857c 	.word	0x0801857c
 8013460:	08018590 	.word	0x08018590
 8013464:	20000688 	.word	0x20000688
 8013468:	080185b0 	.word	0x080185b0

0801346c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b08a      	sub	sp, #40	; 0x28
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013476:	2300      	movs	r3, #0
 8013478:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801347a:	2300      	movs	r3, #0
 801347c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801347e:	2300      	movs	r3, #0
 8013480:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013482:	2300      	movs	r3, #0
 8013484:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013486:	2300      	movs	r3, #0
 8013488:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801348a:	4b28      	ldr	r3, [pc, #160]	; (801352c <ip_reass_remove_oldest_datagram+0xc0>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013490:	e030      	b.n	80134f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013494:	695a      	ldr	r2, [r3, #20]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	429a      	cmp	r2, r3
 801349c:	d10c      	bne.n	80134b8 <ip_reass_remove_oldest_datagram+0x4c>
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	699a      	ldr	r2, [r3, #24]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d106      	bne.n	80134b8 <ip_reass_remove_oldest_datagram+0x4c>
 80134aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ac:	899a      	ldrh	r2, [r3, #12]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	889b      	ldrh	r3, [r3, #4]
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d014      	beq.n	80134e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	3301      	adds	r3, #1
 80134bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80134be:	6a3b      	ldr	r3, [r7, #32]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d104      	bne.n	80134ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80134c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	61bb      	str	r3, [r7, #24]
 80134cc:	e009      	b.n	80134e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80134ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d0:	7fda      	ldrb	r2, [r3, #31]
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	7fdb      	ldrb	r3, [r3, #31]
 80134d6:	429a      	cmp	r2, r3
 80134d8:	d803      	bhi.n	80134e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80134da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d001      	beq.n	80134ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80134ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80134ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80134f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d1cb      	bne.n	8013492 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80134fa:	6a3b      	ldr	r3, [r7, #32]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d008      	beq.n	8013512 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013500:	69b9      	ldr	r1, [r7, #24]
 8013502:	6a38      	ldr	r0, [r7, #32]
 8013504:	f7ff ff0e 	bl	8013324 <ip_reass_free_complete_datagram>
 8013508:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801350a:	697a      	ldr	r2, [r7, #20]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	4413      	add	r3, r2
 8013510:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013512:	697a      	ldr	r2, [r7, #20]
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	429a      	cmp	r2, r3
 8013518:	da02      	bge.n	8013520 <ip_reass_remove_oldest_datagram+0xb4>
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	2b01      	cmp	r3, #1
 801351e:	dcac      	bgt.n	801347a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013520:	697b      	ldr	r3, [r7, #20]
}
 8013522:	4618      	mov	r0, r3
 8013524:	3728      	adds	r7, #40	; 0x28
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	20000684 	.word	0x20000684

08013530 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801353a:	2004      	movs	r0, #4
 801353c:	f7f4 fca8 	bl	8007e90 <memp_malloc>
 8013540:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d110      	bne.n	801356a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013548:	6839      	ldr	r1, [r7, #0]
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff ff8e 	bl	801346c <ip_reass_remove_oldest_datagram>
 8013550:	4602      	mov	r2, r0
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	4293      	cmp	r3, r2
 8013556:	dc03      	bgt.n	8013560 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013558:	2004      	movs	r0, #4
 801355a:	f7f4 fc99 	bl	8007e90 <memp_malloc>
 801355e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d101      	bne.n	801356a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013566:	2300      	movs	r3, #0
 8013568:	e016      	b.n	8013598 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801356a:	2220      	movs	r2, #32
 801356c:	2100      	movs	r1, #0
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f000 fe14 	bl	801419c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	220f      	movs	r2, #15
 8013578:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801357a:	4b09      	ldr	r3, [pc, #36]	; (80135a0 <ip_reass_enqueue_new_datagram+0x70>)
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013582:	4a07      	ldr	r2, [pc, #28]	; (80135a0 <ip_reass_enqueue_new_datagram+0x70>)
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	3308      	adds	r3, #8
 801358c:	2214      	movs	r2, #20
 801358e:	6879      	ldr	r1, [r7, #4]
 8013590:	4618      	mov	r0, r3
 8013592:	f000 fddb 	bl	801414c <memcpy>
  return ipr;
 8013596:	68fb      	ldr	r3, [r7, #12]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	20000684 	.word	0x20000684

080135a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80135ae:	4b10      	ldr	r3, [pc, #64]	; (80135f0 <ip_reass_dequeue_datagram+0x4c>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d104      	bne.n	80135c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	4a0c      	ldr	r2, [pc, #48]	; (80135f0 <ip_reass_dequeue_datagram+0x4c>)
 80135be:	6013      	str	r3, [r2, #0]
 80135c0:	e00d      	b.n	80135de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d106      	bne.n	80135d6 <ip_reass_dequeue_datagram+0x32>
 80135c8:	4b0a      	ldr	r3, [pc, #40]	; (80135f4 <ip_reass_dequeue_datagram+0x50>)
 80135ca:	f240 1245 	movw	r2, #325	; 0x145
 80135ce:	490a      	ldr	r1, [pc, #40]	; (80135f8 <ip_reass_dequeue_datagram+0x54>)
 80135d0:	480a      	ldr	r0, [pc, #40]	; (80135fc <ip_reass_dequeue_datagram+0x58>)
 80135d2:	f000 fdeb 	bl	80141ac <iprintf>
    prev->next = ipr->next;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80135de:	6879      	ldr	r1, [r7, #4]
 80135e0:	2004      	movs	r0, #4
 80135e2:	f7f4 fca1 	bl	8007f28 <memp_free>
}
 80135e6:	bf00      	nop
 80135e8:	3708      	adds	r7, #8
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	20000684 	.word	0x20000684
 80135f4:	0801850c 	.word	0x0801850c
 80135f8:	080185d4 	.word	0x080185d4
 80135fc:	08018554 	.word	0x08018554

08013600 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b08c      	sub	sp, #48	; 0x30
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801360c:	2300      	movs	r3, #0
 801360e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013610:	2301      	movs	r3, #1
 8013612:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801361a:	69fb      	ldr	r3, [r7, #28]
 801361c:	885b      	ldrh	r3, [r3, #2]
 801361e:	b29b      	uxth	r3, r3
 8013620:	4618      	mov	r0, r3
 8013622:	f7f3 ff75 	bl	8007510 <lwip_htons>
 8013626:	4603      	mov	r3, r0
 8013628:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	f003 030f 	and.w	r3, r3, #15
 8013632:	b2db      	uxtb	r3, r3
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013638:	7e7b      	ldrb	r3, [r7, #25]
 801363a:	b29b      	uxth	r3, r3
 801363c:	8b7a      	ldrh	r2, [r7, #26]
 801363e:	429a      	cmp	r2, r3
 8013640:	d202      	bcs.n	8013648 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013646:	e135      	b.n	80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013648:	7e7b      	ldrb	r3, [r7, #25]
 801364a:	b29b      	uxth	r3, r3
 801364c:	8b7a      	ldrh	r2, [r7, #26]
 801364e:	1ad3      	subs	r3, r2, r3
 8013650:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	88db      	ldrh	r3, [r3, #6]
 8013656:	b29b      	uxth	r3, r3
 8013658:	4618      	mov	r0, r3
 801365a:	f7f3 ff59 	bl	8007510 <lwip_htons>
 801365e:	4603      	mov	r3, r0
 8013660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013664:	b29b      	uxth	r3, r3
 8013666:	00db      	lsls	r3, r3, #3
 8013668:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013672:	2200      	movs	r2, #0
 8013674:	701a      	strb	r2, [r3, #0]
 8013676:	2200      	movs	r2, #0
 8013678:	705a      	strb	r2, [r3, #1]
 801367a:	2200      	movs	r2, #0
 801367c:	709a      	strb	r2, [r3, #2]
 801367e:	2200      	movs	r2, #0
 8013680:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013684:	8afa      	ldrh	r2, [r7, #22]
 8013686:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013688:	8afa      	ldrh	r2, [r7, #22]
 801368a:	8b7b      	ldrh	r3, [r7, #26]
 801368c:	4413      	add	r3, r2
 801368e:	b29a      	uxth	r2, r3
 8013690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013692:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013696:	88db      	ldrh	r3, [r3, #6]
 8013698:	b29b      	uxth	r3, r3
 801369a:	8afa      	ldrh	r2, [r7, #22]
 801369c:	429a      	cmp	r2, r3
 801369e:	d902      	bls.n	80136a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136a4:	e106      	b.n	80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	627b      	str	r3, [r7, #36]	; 0x24
 80136ac:	e068      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80136ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b0:	685b      	ldr	r3, [r3, #4]
 80136b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80136b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b6:	889b      	ldrh	r3, [r3, #4]
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	889b      	ldrh	r3, [r3, #4]
 80136be:	b29b      	uxth	r3, r3
 80136c0:	429a      	cmp	r2, r3
 80136c2:	d235      	bcs.n	8013730 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80136c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80136ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d020      	beq.n	8013712 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	889b      	ldrh	r3, [r3, #4]
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d8:	88db      	ldrh	r3, [r3, #6]
 80136da:	b29b      	uxth	r3, r3
 80136dc:	429a      	cmp	r2, r3
 80136de:	d307      	bcc.n	80136f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	88db      	ldrh	r3, [r3, #6]
 80136e4:	b29a      	uxth	r2, r3
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	889b      	ldrh	r3, [r3, #4]
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d902      	bls.n	80136f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136f4:	e0de      	b.n	80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80136f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f8:	68ba      	ldr	r2, [r7, #8]
 80136fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	88db      	ldrh	r3, [r3, #6]
 8013700:	b29a      	uxth	r2, r3
 8013702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013704:	889b      	ldrh	r3, [r3, #4]
 8013706:	b29b      	uxth	r3, r3
 8013708:	429a      	cmp	r2, r3
 801370a:	d03d      	beq.n	8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801370c:	2300      	movs	r3, #0
 801370e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013710:	e03a      	b.n	8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013714:	88db      	ldrh	r3, [r3, #6]
 8013716:	b29a      	uxth	r2, r3
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	889b      	ldrh	r3, [r3, #4]
 801371c:	b29b      	uxth	r3, r3
 801371e:	429a      	cmp	r2, r3
 8013720:	d902      	bls.n	8013728 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013726:	e0c5      	b.n	80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	68ba      	ldr	r2, [r7, #8]
 801372c:	605a      	str	r2, [r3, #4]
      break;
 801372e:	e02b      	b.n	8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013732:	889b      	ldrh	r3, [r3, #4]
 8013734:	b29a      	uxth	r2, r3
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	889b      	ldrh	r3, [r3, #4]
 801373a:	b29b      	uxth	r3, r3
 801373c:	429a      	cmp	r2, r3
 801373e:	d102      	bne.n	8013746 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013744:	e0b6      	b.n	80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013748:	889b      	ldrh	r3, [r3, #4]
 801374a:	b29a      	uxth	r2, r3
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	88db      	ldrh	r3, [r3, #6]
 8013750:	b29b      	uxth	r3, r3
 8013752:	429a      	cmp	r2, r3
 8013754:	d202      	bcs.n	801375c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801375a:	e0ab      	b.n	80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375e:	2b00      	cmp	r3, #0
 8013760:	d009      	beq.n	8013776 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013764:	88db      	ldrh	r3, [r3, #6]
 8013766:	b29a      	uxth	r2, r3
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	889b      	ldrh	r3, [r3, #4]
 801376c:	b29b      	uxth	r3, r3
 801376e:	429a      	cmp	r2, r3
 8013770:	d001      	beq.n	8013776 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013772:	2300      	movs	r3, #0
 8013774:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013782:	2b00      	cmp	r3, #0
 8013784:	d193      	bne.n	80136ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013786:	e000      	b.n	801378a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013788:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378c:	2b00      	cmp	r3, #0
 801378e:	d12d      	bne.n	80137ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013792:	2b00      	cmp	r3, #0
 8013794:	d01c      	beq.n	80137d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013798:	88db      	ldrh	r3, [r3, #6]
 801379a:	b29a      	uxth	r2, r3
 801379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379e:	889b      	ldrh	r3, [r3, #4]
 80137a0:	b29b      	uxth	r3, r3
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d906      	bls.n	80137b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80137a6:	4b45      	ldr	r3, [pc, #276]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80137a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80137ac:	4944      	ldr	r1, [pc, #272]	; (80138c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80137ae:	4845      	ldr	r0, [pc, #276]	; (80138c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137b0:	f000 fcfc 	bl	80141ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80137b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b6:	68ba      	ldr	r2, [r7, #8]
 80137b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80137ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137bc:	88db      	ldrh	r3, [r3, #6]
 80137be:	b29a      	uxth	r2, r3
 80137c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c2:	889b      	ldrh	r3, [r3, #4]
 80137c4:	b29b      	uxth	r3, r3
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d010      	beq.n	80137ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80137ca:	2300      	movs	r3, #0
 80137cc:	623b      	str	r3, [r7, #32]
 80137ce:	e00d      	b.n	80137ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d006      	beq.n	80137e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80137d8:	4b38      	ldr	r3, [pc, #224]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80137da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80137de:	493a      	ldr	r1, [pc, #232]	; (80138c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80137e0:	4838      	ldr	r0, [pc, #224]	; (80138c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137e2:	f000 fce3 	bl	80141ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	68ba      	ldr	r2, [r7, #8]
 80137ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d105      	bne.n	80137fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	7f9b      	ldrb	r3, [r3, #30]
 80137f6:	f003 0301 	and.w	r3, r3, #1
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d059      	beq.n	80138b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80137fe:	6a3b      	ldr	r3, [r7, #32]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d04f      	beq.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	685b      	ldr	r3, [r3, #4]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d006      	beq.n	801381a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	889b      	ldrh	r3, [r3, #4]
 8013814:	b29b      	uxth	r3, r3
 8013816:	2b00      	cmp	r3, #0
 8013818:	d002      	beq.n	8013820 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801381a:	2300      	movs	r3, #0
 801381c:	623b      	str	r3, [r7, #32]
 801381e:	e041      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013822:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801382a:	e012      	b.n	8013852 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013834:	88db      	ldrh	r3, [r3, #6]
 8013836:	b29a      	uxth	r2, r3
 8013838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383a:	889b      	ldrh	r3, [r3, #4]
 801383c:	b29b      	uxth	r3, r3
 801383e:	429a      	cmp	r2, r3
 8013840:	d002      	beq.n	8013848 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013842:	2300      	movs	r3, #0
 8013844:	623b      	str	r3, [r7, #32]
            break;
 8013846:	e007      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013854:	2b00      	cmp	r3, #0
 8013856:	d1e9      	bne.n	801382c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013858:	6a3b      	ldr	r3, [r7, #32]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d022      	beq.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d106      	bne.n	8013874 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013866:	4b15      	ldr	r3, [pc, #84]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013868:	f240 12df 	movw	r2, #479	; 0x1df
 801386c:	4917      	ldr	r1, [pc, #92]	; (80138cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801386e:	4815      	ldr	r0, [pc, #84]	; (80138c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013870:	f000 fc9c 	bl	80141ac <iprintf>
          LWIP_ASSERT("sanity check",
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801387c:	429a      	cmp	r2, r3
 801387e:	d106      	bne.n	801388e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013880:	4b0e      	ldr	r3, [pc, #56]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013882:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013886:	4911      	ldr	r1, [pc, #68]	; (80138cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013888:	480e      	ldr	r0, [pc, #56]	; (80138c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801388a:	f000 fc8f 	bl	80141ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d006      	beq.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013896:	4b09      	ldr	r3, [pc, #36]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013898:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801389c:	490c      	ldr	r1, [pc, #48]	; (80138d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801389e:	4809      	ldr	r0, [pc, #36]	; (80138c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80138a0:	f000 fc84 	bl	80141ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80138a4:	6a3b      	ldr	r3, [r7, #32]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	bf14      	ite	ne
 80138aa:	2301      	movne	r3, #1
 80138ac:	2300      	moveq	r3, #0
 80138ae:	b2db      	uxtb	r3, r3
 80138b0:	e000      	b.n	80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80138b2:	2300      	movs	r3, #0
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3730      	adds	r7, #48	; 0x30
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	0801850c 	.word	0x0801850c
 80138c0:	080185f0 	.word	0x080185f0
 80138c4:	08018554 	.word	0x08018554
 80138c8:	08018610 	.word	0x08018610
 80138cc:	08018648 	.word	0x08018648
 80138d0:	08018658 	.word	0x08018658

080138d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b08e      	sub	sp, #56	; 0x38
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80138e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	f003 030f 	and.w	r3, r3, #15
 80138ea:	b2db      	uxtb	r3, r3
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	b2db      	uxtb	r3, r3
 80138f0:	2b14      	cmp	r3, #20
 80138f2:	f040 8167 	bne.w	8013bc4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80138f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f8:	88db      	ldrh	r3, [r3, #6]
 80138fa:	b29b      	uxth	r3, r3
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7f3 fe07 	bl	8007510 <lwip_htons>
 8013902:	4603      	mov	r3, r0
 8013904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013908:	b29b      	uxth	r3, r3
 801390a:	00db      	lsls	r3, r3, #3
 801390c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013910:	885b      	ldrh	r3, [r3, #2]
 8013912:	b29b      	uxth	r3, r3
 8013914:	4618      	mov	r0, r3
 8013916:	f7f3 fdfb 	bl	8007510 <lwip_htons>
 801391a:	4603      	mov	r3, r0
 801391c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	f003 030f 	and.w	r3, r3, #15
 8013926:	b2db      	uxtb	r3, r3
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801392e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013932:	b29b      	uxth	r3, r3
 8013934:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013936:	429a      	cmp	r2, r3
 8013938:	f0c0 8146 	bcc.w	8013bc8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801393c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013940:	b29b      	uxth	r3, r3
 8013942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013944:	1ad3      	subs	r3, r2, r3
 8013946:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f7f5 f98f 	bl	8008c6c <pbuf_clen>
 801394e:	4603      	mov	r3, r0
 8013950:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013952:	4b9f      	ldr	r3, [pc, #636]	; (8013bd0 <ip4_reass+0x2fc>)
 8013954:	881b      	ldrh	r3, [r3, #0]
 8013956:	461a      	mov	r2, r3
 8013958:	8c3b      	ldrh	r3, [r7, #32]
 801395a:	4413      	add	r3, r2
 801395c:	2b0a      	cmp	r3, #10
 801395e:	dd10      	ble.n	8013982 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013960:	8c3b      	ldrh	r3, [r7, #32]
 8013962:	4619      	mov	r1, r3
 8013964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013966:	f7ff fd81 	bl	801346c <ip_reass_remove_oldest_datagram>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	f000 812d 	beq.w	8013bcc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013972:	4b97      	ldr	r3, [pc, #604]	; (8013bd0 <ip4_reass+0x2fc>)
 8013974:	881b      	ldrh	r3, [r3, #0]
 8013976:	461a      	mov	r2, r3
 8013978:	8c3b      	ldrh	r3, [r7, #32]
 801397a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801397c:	2b0a      	cmp	r3, #10
 801397e:	f300 8125 	bgt.w	8013bcc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013982:	4b94      	ldr	r3, [pc, #592]	; (8013bd4 <ip4_reass+0x300>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	633b      	str	r3, [r7, #48]	; 0x30
 8013988:	e015      	b.n	80139b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398c:	695a      	ldr	r2, [r3, #20]
 801398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013990:	68db      	ldr	r3, [r3, #12]
 8013992:	429a      	cmp	r2, r3
 8013994:	d10c      	bne.n	80139b0 <ip4_reass+0xdc>
 8013996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013998:	699a      	ldr	r2, [r3, #24]
 801399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399c:	691b      	ldr	r3, [r3, #16]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d106      	bne.n	80139b0 <ip4_reass+0xdc>
 80139a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a4:	899a      	ldrh	r2, [r3, #12]
 80139a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a8:	889b      	ldrh	r3, [r3, #4]
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d006      	beq.n	80139be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80139b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	633b      	str	r3, [r7, #48]	; 0x30
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d1e6      	bne.n	801398a <ip4_reass+0xb6>
 80139bc:	e000      	b.n	80139c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80139be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80139c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d109      	bne.n	80139da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80139c6:	8c3b      	ldrh	r3, [r7, #32]
 80139c8:	4619      	mov	r1, r3
 80139ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139cc:	f7ff fdb0 	bl	8013530 <ip_reass_enqueue_new_datagram>
 80139d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80139d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d11c      	bne.n	8013a12 <ip4_reass+0x13e>
      goto nullreturn;
 80139d8:	e109      	b.n	8013bee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80139da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139dc:	88db      	ldrh	r3, [r3, #6]
 80139de:	b29b      	uxth	r3, r3
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7f3 fd95 	bl	8007510 <lwip_htons>
 80139e6:	4603      	mov	r3, r0
 80139e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d110      	bne.n	8013a12 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80139f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f2:	89db      	ldrh	r3, [r3, #14]
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7f3 fd8b 	bl	8007510 <lwip_htons>
 80139fa:	4603      	mov	r3, r0
 80139fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d006      	beq.n	8013a12 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a06:	3308      	adds	r3, #8
 8013a08:	2214      	movs	r2, #20
 8013a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f000 fb9d 	bl	801414c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a14:	88db      	ldrh	r3, [r3, #6]
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	f003 0320 	and.w	r3, r3, #32
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	bf0c      	ite	eq
 8013a20:	2301      	moveq	r3, #1
 8013a22:	2300      	movne	r3, #0
 8013a24:	b2db      	uxtb	r3, r3
 8013a26:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d00e      	beq.n	8013a4c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a32:	4413      	add	r3, r2
 8013a34:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013a36:	8b7a      	ldrh	r2, [r7, #26]
 8013a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	f0c0 80a0 	bcc.w	8013b80 <ip4_reass+0x2ac>
 8013a40:	8b7b      	ldrh	r3, [r7, #26]
 8013a42:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013a46:	4293      	cmp	r3, r2
 8013a48:	f200 809a 	bhi.w	8013b80 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013a4c:	69fa      	ldr	r2, [r7, #28]
 8013a4e:	6879      	ldr	r1, [r7, #4]
 8013a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a52:	f7ff fdd5 	bl	8013600 <ip_reass_chain_frag_into_datagram_and_validate>
 8013a56:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a5e:	f000 8091 	beq.w	8013b84 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013a62:	4b5b      	ldr	r3, [pc, #364]	; (8013bd0 <ip4_reass+0x2fc>)
 8013a64:	881a      	ldrh	r2, [r3, #0]
 8013a66:	8c3b      	ldrh	r3, [r7, #32]
 8013a68:	4413      	add	r3, r2
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	4b58      	ldr	r3, [pc, #352]	; (8013bd0 <ip4_reass+0x2fc>)
 8013a6e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d00d      	beq.n	8013a92 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a7a:	4413      	add	r3, r2
 8013a7c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a80:	8a7a      	ldrh	r2, [r7, #18]
 8013a82:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a86:	7f9b      	ldrb	r3, [r3, #30]
 8013a88:	f043 0301 	orr.w	r3, r3, #1
 8013a8c:	b2da      	uxtb	r2, r3
 8013a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a90:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d171      	bne.n	8013b7c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9a:	8b9b      	ldrh	r3, [r3, #28]
 8013a9c:	3314      	adds	r3, #20
 8013a9e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab4:	3308      	adds	r3, #8
 8013ab6:	2214      	movs	r2, #20
 8013ab8:	4619      	mov	r1, r3
 8013aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013abc:	f000 fb46 	bl	801414c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013ac0:	8a3b      	ldrh	r3, [r7, #16]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f3 fd24 	bl	8007510 <lwip_htons>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	461a      	mov	r2, r3
 8013acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ace:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	719a      	strb	r2, [r3, #6]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013adc:	2200      	movs	r2, #0
 8013ade:	729a      	strb	r2, [r3, #10]
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013aea:	e00d      	b.n	8013b08 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013af2:	2114      	movs	r1, #20
 8013af4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013af6:	f7f4 ffab 	bl	8008a50 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013afa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f7f5 f8ef 	bl	8008ce0 <pbuf_cat>
      r = iprh->next_pbuf;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d1ee      	bne.n	8013aec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013b0e:	4b31      	ldr	r3, [pc, #196]	; (8013bd4 <ip4_reass+0x300>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d102      	bne.n	8013b1e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b1c:	e010      	b.n	8013b40 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013b1e:	4b2d      	ldr	r3, [pc, #180]	; (8013bd4 <ip4_reass+0x300>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b24:	e007      	b.n	8013b36 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d006      	beq.n	8013b3e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d1f4      	bne.n	8013b26 <ip4_reass+0x252>
 8013b3c:	e000      	b.n	8013b40 <ip4_reass+0x26c>
          break;
 8013b3e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b44:	f7ff fd2e 	bl	80135a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f7f5 f88f 	bl	8008c6c <pbuf_clen>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013b52:	4b1f      	ldr	r3, [pc, #124]	; (8013bd0 <ip4_reass+0x2fc>)
 8013b54:	881b      	ldrh	r3, [r3, #0]
 8013b56:	8c3a      	ldrh	r2, [r7, #32]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d906      	bls.n	8013b6a <ip4_reass+0x296>
 8013b5c:	4b1e      	ldr	r3, [pc, #120]	; (8013bd8 <ip4_reass+0x304>)
 8013b5e:	f240 229b 	movw	r2, #667	; 0x29b
 8013b62:	491e      	ldr	r1, [pc, #120]	; (8013bdc <ip4_reass+0x308>)
 8013b64:	481e      	ldr	r0, [pc, #120]	; (8013be0 <ip4_reass+0x30c>)
 8013b66:	f000 fb21 	bl	80141ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013b6a:	4b19      	ldr	r3, [pc, #100]	; (8013bd0 <ip4_reass+0x2fc>)
 8013b6c:	881a      	ldrh	r2, [r3, #0]
 8013b6e:	8c3b      	ldrh	r3, [r7, #32]
 8013b70:	1ad3      	subs	r3, r2, r3
 8013b72:	b29a      	uxth	r2, r3
 8013b74:	4b16      	ldr	r3, [pc, #88]	; (8013bd0 <ip4_reass+0x2fc>)
 8013b76:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	e03c      	b.n	8013bf6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	e03a      	b.n	8013bf6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013b80:	bf00      	nop
 8013b82:	e000      	b.n	8013b86 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013b84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d106      	bne.n	8013b9a <ip4_reass+0x2c6>
 8013b8c:	4b12      	ldr	r3, [pc, #72]	; (8013bd8 <ip4_reass+0x304>)
 8013b8e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013b92:	4914      	ldr	r1, [pc, #80]	; (8013be4 <ip4_reass+0x310>)
 8013b94:	4812      	ldr	r0, [pc, #72]	; (8013be0 <ip4_reass+0x30c>)
 8013b96:	f000 fb09 	bl	80141ac <iprintf>
  if (ipr->p == NULL) {
 8013b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d124      	bne.n	8013bec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013ba2:	4b0c      	ldr	r3, [pc, #48]	; (8013bd4 <ip4_reass+0x300>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d006      	beq.n	8013bba <ip4_reass+0x2e6>
 8013bac:	4b0a      	ldr	r3, [pc, #40]	; (8013bd8 <ip4_reass+0x304>)
 8013bae:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013bb2:	490d      	ldr	r1, [pc, #52]	; (8013be8 <ip4_reass+0x314>)
 8013bb4:	480a      	ldr	r0, [pc, #40]	; (8013be0 <ip4_reass+0x30c>)
 8013bb6:	f000 faf9 	bl	80141ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013bba:	2100      	movs	r1, #0
 8013bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bbe:	f7ff fcf1 	bl	80135a4 <ip_reass_dequeue_datagram>
 8013bc2:	e014      	b.n	8013bee <ip4_reass+0x31a>
    goto nullreturn;
 8013bc4:	bf00      	nop
 8013bc6:	e012      	b.n	8013bee <ip4_reass+0x31a>
    goto nullreturn;
 8013bc8:	bf00      	nop
 8013bca:	e010      	b.n	8013bee <ip4_reass+0x31a>
      goto nullreturn;
 8013bcc:	bf00      	nop
 8013bce:	e00e      	b.n	8013bee <ip4_reass+0x31a>
 8013bd0:	20000688 	.word	0x20000688
 8013bd4:	20000684 	.word	0x20000684
 8013bd8:	0801850c 	.word	0x0801850c
 8013bdc:	0801867c 	.word	0x0801867c
 8013be0:	08018554 	.word	0x08018554
 8013be4:	08018698 	.word	0x08018698
 8013be8:	080186a4 	.word	0x080186a4
  }

nullreturn:
 8013bec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7f4 ffb4 	bl	8008b5c <pbuf_free>
  return NULL;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3738      	adds	r7, #56	; 0x38
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop

08013c00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013c04:	2005      	movs	r0, #5
 8013c06:	f7f4 f943 	bl	8007e90 <memp_malloc>
 8013c0a:	4603      	mov	r3, r0
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d106      	bne.n	8013c2c <ip_frag_free_pbuf_custom_ref+0x1c>
 8013c1e:	4b07      	ldr	r3, [pc, #28]	; (8013c3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013c20:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013c24:	4906      	ldr	r1, [pc, #24]	; (8013c40 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013c26:	4807      	ldr	r0, [pc, #28]	; (8013c44 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013c28:	f000 fac0 	bl	80141ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013c2c:	6879      	ldr	r1, [r7, #4]
 8013c2e:	2005      	movs	r0, #5
 8013c30:	f7f4 f97a 	bl	8007f28 <memp_free>
}
 8013c34:	bf00      	nop
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	0801850c 	.word	0x0801850c
 8013c40:	080186c4 	.word	0x080186c4
 8013c44:	08018554 	.word	0x08018554

08013c48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d106      	bne.n	8013c68 <ipfrag_free_pbuf_custom+0x20>
 8013c5a:	4b11      	ldr	r3, [pc, #68]	; (8013ca0 <ipfrag_free_pbuf_custom+0x58>)
 8013c5c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013c60:	4910      	ldr	r1, [pc, #64]	; (8013ca4 <ipfrag_free_pbuf_custom+0x5c>)
 8013c62:	4811      	ldr	r0, [pc, #68]	; (8013ca8 <ipfrag_free_pbuf_custom+0x60>)
 8013c64:	f000 faa2 	bl	80141ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	d006      	beq.n	8013c7e <ipfrag_free_pbuf_custom+0x36>
 8013c70:	4b0b      	ldr	r3, [pc, #44]	; (8013ca0 <ipfrag_free_pbuf_custom+0x58>)
 8013c72:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013c76:	490d      	ldr	r1, [pc, #52]	; (8013cac <ipfrag_free_pbuf_custom+0x64>)
 8013c78:	480b      	ldr	r0, [pc, #44]	; (8013ca8 <ipfrag_free_pbuf_custom+0x60>)
 8013c7a:	f000 fa97 	bl	80141ac <iprintf>
  if (pcr->original != NULL) {
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	695b      	ldr	r3, [r3, #20]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d004      	beq.n	8013c90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	695b      	ldr	r3, [r3, #20]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7f4 ff66 	bl	8008b5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013c90:	68f8      	ldr	r0, [r7, #12]
 8013c92:	f7ff ffbd 	bl	8013c10 <ip_frag_free_pbuf_custom_ref>
}
 8013c96:	bf00      	nop
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	0801850c 	.word	0x0801850c
 8013ca4:	080186d0 	.word	0x080186d0
 8013ca8:	08018554 	.word	0x08018554
 8013cac:	080186dc 	.word	0x080186dc

08013cb0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b094      	sub	sp, #80	; 0x50
 8013cb4:	af02      	add	r7, sp, #8
 8013cb6:	60f8      	str	r0, [r7, #12]
 8013cb8:	60b9      	str	r1, [r7, #8]
 8013cba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cc6:	3b14      	subs	r3, #20
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	da00      	bge.n	8013cce <ip4_frag+0x1e>
 8013ccc:	3307      	adds	r3, #7
 8013cce:	10db      	asrs	r3, r3, #3
 8013cd0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013cd2:	2314      	movs	r3, #20
 8013cd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	685b      	ldr	r3, [r3, #4]
 8013cda:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cde:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	f003 030f 	and.w	r3, r3, #15
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	b2db      	uxtb	r3, r3
 8013cee:	2b14      	cmp	r3, #20
 8013cf0:	d002      	beq.n	8013cf8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013cf2:	f06f 0305 	mvn.w	r3, #5
 8013cf6:	e110      	b.n	8013f1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	895b      	ldrh	r3, [r3, #10]
 8013cfc:	2b13      	cmp	r3, #19
 8013cfe:	d809      	bhi.n	8013d14 <ip4_frag+0x64>
 8013d00:	4b88      	ldr	r3, [pc, #544]	; (8013f24 <ip4_frag+0x274>)
 8013d02:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013d06:	4988      	ldr	r1, [pc, #544]	; (8013f28 <ip4_frag+0x278>)
 8013d08:	4888      	ldr	r0, [pc, #544]	; (8013f2c <ip4_frag+0x27c>)
 8013d0a:	f000 fa4f 	bl	80141ac <iprintf>
 8013d0e:	f06f 0305 	mvn.w	r3, #5
 8013d12:	e102      	b.n	8013f1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d16:	88db      	ldrh	r3, [r3, #6]
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7f3 fbf8 	bl	8007510 <lwip_htons>
 8013d20:	4603      	mov	r3, r0
 8013d22:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013d24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013d2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013d34:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	891b      	ldrh	r3, [r3, #8]
 8013d3a:	3b14      	subs	r3, #20
 8013d3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013d40:	e0e1      	b.n	8013f06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013d42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d44:	00db      	lsls	r3, r3, #3
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	bf28      	it	cs
 8013d50:	4613      	movcs	r3, r2
 8013d52:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013d54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d58:	2114      	movs	r1, #20
 8013d5a:	200e      	movs	r0, #14
 8013d5c:	f7f4 fc1a 	bl	8008594 <pbuf_alloc>
 8013d60:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f000 80d5 	beq.w	8013f14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	895b      	ldrh	r3, [r3, #10]
 8013d6e:	2b13      	cmp	r3, #19
 8013d70:	d806      	bhi.n	8013d80 <ip4_frag+0xd0>
 8013d72:	4b6c      	ldr	r3, [pc, #432]	; (8013f24 <ip4_frag+0x274>)
 8013d74:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013d78:	496d      	ldr	r1, [pc, #436]	; (8013f30 <ip4_frag+0x280>)
 8013d7a:	486c      	ldr	r0, [pc, #432]	; (8013f2c <ip4_frag+0x27c>)
 8013d7c:	f000 fa16 	bl	80141ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	2214      	movs	r2, #20
 8013d86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f000 f9df 	bl	801414c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013d94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013d9a:	e064      	b.n	8013e66 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	895a      	ldrh	r2, [r3, #10]
 8013da0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013da2:	1ad3      	subs	r3, r2, r3
 8013da4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	895b      	ldrh	r3, [r3, #10]
 8013daa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d906      	bls.n	8013dbe <ip4_frag+0x10e>
 8013db0:	4b5c      	ldr	r3, [pc, #368]	; (8013f24 <ip4_frag+0x274>)
 8013db2:	f240 322d 	movw	r2, #813	; 0x32d
 8013db6:	495f      	ldr	r1, [pc, #380]	; (8013f34 <ip4_frag+0x284>)
 8013db8:	485c      	ldr	r0, [pc, #368]	; (8013f2c <ip4_frag+0x27c>)
 8013dba:	f000 f9f7 	bl	80141ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013dbe:	8bfa      	ldrh	r2, [r7, #30]
 8013dc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	bf28      	it	cs
 8013dc8:	4613      	movcs	r3, r2
 8013dca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013dce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d105      	bne.n	8013de2 <ip4_frag+0x132>
        poff = 0;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	60fb      	str	r3, [r7, #12]
        continue;
 8013de0:	e041      	b.n	8013e66 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013de2:	f7ff ff0d 	bl	8013c00 <ip_frag_alloc_pbuf_custom_ref>
 8013de6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d103      	bne.n	8013df6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013df0:	f7f4 feb4 	bl	8008b5c <pbuf_free>
        goto memerr;
 8013df4:	e08f      	b.n	8013f16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013df6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013dfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013dfe:	4413      	add	r3, r2
 8013e00:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013e04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013e08:	9201      	str	r2, [sp, #4]
 8013e0a:	9300      	str	r3, [sp, #0]
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	2241      	movs	r2, #65	; 0x41
 8013e10:	2000      	movs	r0, #0
 8013e12:	f7f4 fce9 	bl	80087e8 <pbuf_alloced_custom>
 8013e16:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d106      	bne.n	8013e2c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013e1e:	69b8      	ldr	r0, [r7, #24]
 8013e20:	f7ff fef6 	bl	8013c10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e26:	f7f4 fe99 	bl	8008b5c <pbuf_free>
        goto memerr;
 8013e2a:	e074      	b.n	8013f16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f7f4 ff35 	bl	8008c9c <pbuf_ref>
      pcr->original = p;
 8013e32:	69bb      	ldr	r3, [r7, #24]
 8013e34:	68fa      	ldr	r2, [r7, #12]
 8013e36:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	4a3f      	ldr	r2, [pc, #252]	; (8013f38 <ip4_frag+0x288>)
 8013e3c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013e3e:	6979      	ldr	r1, [r7, #20]
 8013e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e42:	f7f4 ff4d 	bl	8008ce0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013e46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013e4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e4e:	1ad3      	subs	r3, r2, r3
 8013e50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013e54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d004      	beq.n	8013e66 <ip4_frag+0x1b6>
        poff = 0;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013e66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d196      	bne.n	8013d9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013e6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013e70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e74:	4413      	add	r3, r2
 8013e76:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e7c:	f1a3 0213 	sub.w	r2, r3, #19
 8013e80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e84:	429a      	cmp	r2, r3
 8013e86:	bfcc      	ite	gt
 8013e88:	2301      	movgt	r3, #1
 8013e8a:	2300      	movle	r3, #0
 8013e8c:	b2db      	uxtb	r3, r3
 8013e8e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013e90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e98:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013e9a:	6a3b      	ldr	r3, [r7, #32]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d002      	beq.n	8013ea6 <ip4_frag+0x1f6>
 8013ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d003      	beq.n	8013eae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013ea6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013eac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013eae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7f3 fb2d 	bl	8007510 <lwip_htons>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	461a      	mov	r2, r3
 8013eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013ebe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ec0:	3314      	adds	r3, #20
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7f3 fb23 	bl	8007510 <lwip_htons>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	461a      	mov	r2, r3
 8013ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	729a      	strb	r2, [r3, #10]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	695b      	ldr	r3, [r3, #20]
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ee4:	68b8      	ldr	r0, [r7, #8]
 8013ee6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013eea:	f7f4 fe37 	bl	8008b5c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013eee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ef2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013efa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013efe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f00:	4413      	add	r3, r2
 8013f02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013f06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	f47f af19 	bne.w	8013d42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013f10:	2300      	movs	r3, #0
 8013f12:	e002      	b.n	8013f1a <ip4_frag+0x26a>
      goto memerr;
 8013f14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	3748      	adds	r7, #72	; 0x48
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	0801850c 	.word	0x0801850c
 8013f28:	080186e8 	.word	0x080186e8
 8013f2c:	08018554 	.word	0x08018554
 8013f30:	08018704 	.word	0x08018704
 8013f34:	08018724 	.word	0x08018724
 8013f38:	08013c49 	.word	0x08013c49

08013f3c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b086      	sub	sp, #24
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013f46:	230e      	movs	r3, #14
 8013f48:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	895b      	ldrh	r3, [r3, #10]
 8013f4e:	2b0e      	cmp	r3, #14
 8013f50:	d96e      	bls.n	8014030 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	7bdb      	ldrb	r3, [r3, #15]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d106      	bne.n	8013f68 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f60:	3301      	adds	r3, #1
 8013f62:	b2da      	uxtb	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	7b1a      	ldrb	r2, [r3, #12]
 8013f72:	7b5b      	ldrb	r3, [r3, #13]
 8013f74:	021b      	lsls	r3, r3, #8
 8013f76:	4313      	orrs	r3, r2
 8013f78:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	f003 0301 	and.w	r3, r3, #1
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d023      	beq.n	8013fce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d10f      	bne.n	8013fae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	785b      	ldrb	r3, [r3, #1]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d11b      	bne.n	8013fce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f9a:	2b5e      	cmp	r3, #94	; 0x5e
 8013f9c:	d117      	bne.n	8013fce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	7b5b      	ldrb	r3, [r3, #13]
 8013fa2:	f043 0310 	orr.w	r3, r3, #16
 8013fa6:	b2da      	uxtb	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	735a      	strb	r2, [r3, #13]
 8013fac:	e00f      	b.n	8013fce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	2206      	movs	r2, #6
 8013fb2:	4928      	ldr	r1, [pc, #160]	; (8014054 <ethernet_input+0x118>)
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f000 f8bb 	bl	8014130 <memcmp>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d106      	bne.n	8013fce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	7b5b      	ldrb	r3, [r3, #13]
 8013fc4:	f043 0308 	orr.w	r3, r3, #8
 8013fc8:	b2da      	uxtb	r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013fce:	89fb      	ldrh	r3, [r7, #14]
 8013fd0:	2b08      	cmp	r3, #8
 8013fd2:	d003      	beq.n	8013fdc <ethernet_input+0xa0>
 8013fd4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013fd8:	d014      	beq.n	8014004 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013fda:	e032      	b.n	8014042 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013fe2:	f003 0308 	and.w	r3, r3, #8
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d024      	beq.n	8014034 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013fea:	8afb      	ldrh	r3, [r7, #22]
 8013fec:	4619      	mov	r1, r3
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7f4 fd2e 	bl	8008a50 <pbuf_remove_header>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d11e      	bne.n	8014038 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7fe fe77 	bl	8012cf0 <ip4_input>
      break;
 8014002:	e013      	b.n	801402c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801400a:	f003 0308 	and.w	r3, r3, #8
 801400e:	2b00      	cmp	r3, #0
 8014010:	d014      	beq.n	801403c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014012:	8afb      	ldrh	r3, [r7, #22]
 8014014:	4619      	mov	r1, r3
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7f4 fd1a 	bl	8008a50 <pbuf_remove_header>
 801401c:	4603      	mov	r3, r0
 801401e:	2b00      	cmp	r3, #0
 8014020:	d10e      	bne.n	8014040 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7fe f813 	bl	8012050 <etharp_input>
      break;
 801402a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801402c:	2300      	movs	r3, #0
 801402e:	e00c      	b.n	801404a <ethernet_input+0x10e>
    goto free_and_return;
 8014030:	bf00      	nop
 8014032:	e006      	b.n	8014042 <ethernet_input+0x106>
        goto free_and_return;
 8014034:	bf00      	nop
 8014036:	e004      	b.n	8014042 <ethernet_input+0x106>
        goto free_and_return;
 8014038:	bf00      	nop
 801403a:	e002      	b.n	8014042 <ethernet_input+0x106>
        goto free_and_return;
 801403c:	bf00      	nop
 801403e:	e000      	b.n	8014042 <ethernet_input+0x106>
        goto free_and_return;
 8014040:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f7f4 fd8a 	bl	8008b5c <pbuf_free>
  return ERR_OK;
 8014048:	2300      	movs	r3, #0
}
 801404a:	4618      	mov	r0, r3
 801404c:	3718      	adds	r7, #24
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	08041a6c 	.word	0x08041a6c

08014058 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014058:	b580      	push	{r7, lr}
 801405a:	b086      	sub	sp, #24
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
 8014064:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014066:	8c3b      	ldrh	r3, [r7, #32]
 8014068:	4618      	mov	r0, r3
 801406a:	f7f3 fa51 	bl	8007510 <lwip_htons>
 801406e:	4603      	mov	r3, r0
 8014070:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014072:	210e      	movs	r1, #14
 8014074:	68b8      	ldr	r0, [r7, #8]
 8014076:	f7f4 fcdb 	bl	8008a30 <pbuf_add_header>
 801407a:	4603      	mov	r3, r0
 801407c:	2b00      	cmp	r3, #0
 801407e:	d125      	bne.n	80140cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	8afa      	ldrh	r2, [r7, #22]
 801408a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	2206      	movs	r2, #6
 8014090:	6839      	ldr	r1, [r7, #0]
 8014092:	4618      	mov	r0, r3
 8014094:	f000 f85a 	bl	801414c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	3306      	adds	r3, #6
 801409c:	2206      	movs	r2, #6
 801409e:	6879      	ldr	r1, [r7, #4]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f000 f853 	bl	801414c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140ac:	2b06      	cmp	r3, #6
 80140ae:	d006      	beq.n	80140be <ethernet_output+0x66>
 80140b0:	4b0a      	ldr	r3, [pc, #40]	; (80140dc <ethernet_output+0x84>)
 80140b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80140b6:	490a      	ldr	r1, [pc, #40]	; (80140e0 <ethernet_output+0x88>)
 80140b8:	480a      	ldr	r0, [pc, #40]	; (80140e4 <ethernet_output+0x8c>)
 80140ba:	f000 f877 	bl	80141ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	699b      	ldr	r3, [r3, #24]
 80140c2:	68b9      	ldr	r1, [r7, #8]
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	4798      	blx	r3
 80140c8:	4603      	mov	r3, r0
 80140ca:	e002      	b.n	80140d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80140cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80140ce:	f06f 0301 	mvn.w	r3, #1
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3718      	adds	r7, #24
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	08018734 	.word	0x08018734
 80140e0:	0801876c 	.word	0x0801876c
 80140e4:	080187a0 	.word	0x080187a0

080140e8 <__libc_init_array>:
 80140e8:	b570      	push	{r4, r5, r6, lr}
 80140ea:	4d0d      	ldr	r5, [pc, #52]	; (8014120 <__libc_init_array+0x38>)
 80140ec:	4c0d      	ldr	r4, [pc, #52]	; (8014124 <__libc_init_array+0x3c>)
 80140ee:	1b64      	subs	r4, r4, r5
 80140f0:	10a4      	asrs	r4, r4, #2
 80140f2:	2600      	movs	r6, #0
 80140f4:	42a6      	cmp	r6, r4
 80140f6:	d109      	bne.n	801410c <__libc_init_array+0x24>
 80140f8:	4d0b      	ldr	r5, [pc, #44]	; (8014128 <__libc_init_array+0x40>)
 80140fa:	4c0c      	ldr	r4, [pc, #48]	; (801412c <__libc_init_array+0x44>)
 80140fc:	f001 fab0 	bl	8015660 <_init>
 8014100:	1b64      	subs	r4, r4, r5
 8014102:	10a4      	asrs	r4, r4, #2
 8014104:	2600      	movs	r6, #0
 8014106:	42a6      	cmp	r6, r4
 8014108:	d105      	bne.n	8014116 <__libc_init_array+0x2e>
 801410a:	bd70      	pop	{r4, r5, r6, pc}
 801410c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014110:	4798      	blx	r3
 8014112:	3601      	adds	r6, #1
 8014114:	e7ee      	b.n	80140f4 <__libc_init_array+0xc>
 8014116:	f855 3b04 	ldr.w	r3, [r5], #4
 801411a:	4798      	blx	r3
 801411c:	3601      	adds	r6, #1
 801411e:	e7f2      	b.n	8014106 <__libc_init_array+0x1e>
 8014120:	08041bd0 	.word	0x08041bd0
 8014124:	08041bd0 	.word	0x08041bd0
 8014128:	08041bd0 	.word	0x08041bd0
 801412c:	08041bd4 	.word	0x08041bd4

08014130 <memcmp>:
 8014130:	b530      	push	{r4, r5, lr}
 8014132:	3901      	subs	r1, #1
 8014134:	2400      	movs	r4, #0
 8014136:	42a2      	cmp	r2, r4
 8014138:	d101      	bne.n	801413e <memcmp+0xe>
 801413a:	2000      	movs	r0, #0
 801413c:	e005      	b.n	801414a <memcmp+0x1a>
 801413e:	5d03      	ldrb	r3, [r0, r4]
 8014140:	3401      	adds	r4, #1
 8014142:	5d0d      	ldrb	r5, [r1, r4]
 8014144:	42ab      	cmp	r3, r5
 8014146:	d0f6      	beq.n	8014136 <memcmp+0x6>
 8014148:	1b58      	subs	r0, r3, r5
 801414a:	bd30      	pop	{r4, r5, pc}

0801414c <memcpy>:
 801414c:	440a      	add	r2, r1
 801414e:	4291      	cmp	r1, r2
 8014150:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014154:	d100      	bne.n	8014158 <memcpy+0xc>
 8014156:	4770      	bx	lr
 8014158:	b510      	push	{r4, lr}
 801415a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801415e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014162:	4291      	cmp	r1, r2
 8014164:	d1f9      	bne.n	801415a <memcpy+0xe>
 8014166:	bd10      	pop	{r4, pc}

08014168 <memmove>:
 8014168:	4288      	cmp	r0, r1
 801416a:	b510      	push	{r4, lr}
 801416c:	eb01 0402 	add.w	r4, r1, r2
 8014170:	d902      	bls.n	8014178 <memmove+0x10>
 8014172:	4284      	cmp	r4, r0
 8014174:	4623      	mov	r3, r4
 8014176:	d807      	bhi.n	8014188 <memmove+0x20>
 8014178:	1e43      	subs	r3, r0, #1
 801417a:	42a1      	cmp	r1, r4
 801417c:	d008      	beq.n	8014190 <memmove+0x28>
 801417e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014186:	e7f8      	b.n	801417a <memmove+0x12>
 8014188:	4402      	add	r2, r0
 801418a:	4601      	mov	r1, r0
 801418c:	428a      	cmp	r2, r1
 801418e:	d100      	bne.n	8014192 <memmove+0x2a>
 8014190:	bd10      	pop	{r4, pc}
 8014192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801419a:	e7f7      	b.n	801418c <memmove+0x24>

0801419c <memset>:
 801419c:	4402      	add	r2, r0
 801419e:	4603      	mov	r3, r0
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d100      	bne.n	80141a6 <memset+0xa>
 80141a4:	4770      	bx	lr
 80141a6:	f803 1b01 	strb.w	r1, [r3], #1
 80141aa:	e7f9      	b.n	80141a0 <memset+0x4>

080141ac <iprintf>:
 80141ac:	b40f      	push	{r0, r1, r2, r3}
 80141ae:	4b0a      	ldr	r3, [pc, #40]	; (80141d8 <iprintf+0x2c>)
 80141b0:	b513      	push	{r0, r1, r4, lr}
 80141b2:	681c      	ldr	r4, [r3, #0]
 80141b4:	b124      	cbz	r4, 80141c0 <iprintf+0x14>
 80141b6:	69a3      	ldr	r3, [r4, #24]
 80141b8:	b913      	cbnz	r3, 80141c0 <iprintf+0x14>
 80141ba:	4620      	mov	r0, r4
 80141bc:	f000 fafc 	bl	80147b8 <__sinit>
 80141c0:	ab05      	add	r3, sp, #20
 80141c2:	9a04      	ldr	r2, [sp, #16]
 80141c4:	68a1      	ldr	r1, [r4, #8]
 80141c6:	9301      	str	r3, [sp, #4]
 80141c8:	4620      	mov	r0, r4
 80141ca:	f000 fe43 	bl	8014e54 <_vfiprintf_r>
 80141ce:	b002      	add	sp, #8
 80141d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141d4:	b004      	add	sp, #16
 80141d6:	4770      	bx	lr
 80141d8:	20000024 	.word	0x20000024

080141dc <_puts_r>:
 80141dc:	b570      	push	{r4, r5, r6, lr}
 80141de:	460e      	mov	r6, r1
 80141e0:	4605      	mov	r5, r0
 80141e2:	b118      	cbz	r0, 80141ec <_puts_r+0x10>
 80141e4:	6983      	ldr	r3, [r0, #24]
 80141e6:	b90b      	cbnz	r3, 80141ec <_puts_r+0x10>
 80141e8:	f000 fae6 	bl	80147b8 <__sinit>
 80141ec:	69ab      	ldr	r3, [r5, #24]
 80141ee:	68ac      	ldr	r4, [r5, #8]
 80141f0:	b913      	cbnz	r3, 80141f8 <_puts_r+0x1c>
 80141f2:	4628      	mov	r0, r5
 80141f4:	f000 fae0 	bl	80147b8 <__sinit>
 80141f8:	4b2c      	ldr	r3, [pc, #176]	; (80142ac <_puts_r+0xd0>)
 80141fa:	429c      	cmp	r4, r3
 80141fc:	d120      	bne.n	8014240 <_puts_r+0x64>
 80141fe:	686c      	ldr	r4, [r5, #4]
 8014200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014202:	07db      	lsls	r3, r3, #31
 8014204:	d405      	bmi.n	8014212 <_puts_r+0x36>
 8014206:	89a3      	ldrh	r3, [r4, #12]
 8014208:	0598      	lsls	r0, r3, #22
 801420a:	d402      	bmi.n	8014212 <_puts_r+0x36>
 801420c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801420e:	f000 fb83 	bl	8014918 <__retarget_lock_acquire_recursive>
 8014212:	89a3      	ldrh	r3, [r4, #12]
 8014214:	0719      	lsls	r1, r3, #28
 8014216:	d51d      	bpl.n	8014254 <_puts_r+0x78>
 8014218:	6923      	ldr	r3, [r4, #16]
 801421a:	b1db      	cbz	r3, 8014254 <_puts_r+0x78>
 801421c:	3e01      	subs	r6, #1
 801421e:	68a3      	ldr	r3, [r4, #8]
 8014220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014224:	3b01      	subs	r3, #1
 8014226:	60a3      	str	r3, [r4, #8]
 8014228:	bb39      	cbnz	r1, 801427a <_puts_r+0x9e>
 801422a:	2b00      	cmp	r3, #0
 801422c:	da38      	bge.n	80142a0 <_puts_r+0xc4>
 801422e:	4622      	mov	r2, r4
 8014230:	210a      	movs	r1, #10
 8014232:	4628      	mov	r0, r5
 8014234:	f000 f8c8 	bl	80143c8 <__swbuf_r>
 8014238:	3001      	adds	r0, #1
 801423a:	d011      	beq.n	8014260 <_puts_r+0x84>
 801423c:	250a      	movs	r5, #10
 801423e:	e011      	b.n	8014264 <_puts_r+0x88>
 8014240:	4b1b      	ldr	r3, [pc, #108]	; (80142b0 <_puts_r+0xd4>)
 8014242:	429c      	cmp	r4, r3
 8014244:	d101      	bne.n	801424a <_puts_r+0x6e>
 8014246:	68ac      	ldr	r4, [r5, #8]
 8014248:	e7da      	b.n	8014200 <_puts_r+0x24>
 801424a:	4b1a      	ldr	r3, [pc, #104]	; (80142b4 <_puts_r+0xd8>)
 801424c:	429c      	cmp	r4, r3
 801424e:	bf08      	it	eq
 8014250:	68ec      	ldreq	r4, [r5, #12]
 8014252:	e7d5      	b.n	8014200 <_puts_r+0x24>
 8014254:	4621      	mov	r1, r4
 8014256:	4628      	mov	r0, r5
 8014258:	f000 f908 	bl	801446c <__swsetup_r>
 801425c:	2800      	cmp	r0, #0
 801425e:	d0dd      	beq.n	801421c <_puts_r+0x40>
 8014260:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014266:	07da      	lsls	r2, r3, #31
 8014268:	d405      	bmi.n	8014276 <_puts_r+0x9a>
 801426a:	89a3      	ldrh	r3, [r4, #12]
 801426c:	059b      	lsls	r3, r3, #22
 801426e:	d402      	bmi.n	8014276 <_puts_r+0x9a>
 8014270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014272:	f000 fb52 	bl	801491a <__retarget_lock_release_recursive>
 8014276:	4628      	mov	r0, r5
 8014278:	bd70      	pop	{r4, r5, r6, pc}
 801427a:	2b00      	cmp	r3, #0
 801427c:	da04      	bge.n	8014288 <_puts_r+0xac>
 801427e:	69a2      	ldr	r2, [r4, #24]
 8014280:	429a      	cmp	r2, r3
 8014282:	dc06      	bgt.n	8014292 <_puts_r+0xb6>
 8014284:	290a      	cmp	r1, #10
 8014286:	d004      	beq.n	8014292 <_puts_r+0xb6>
 8014288:	6823      	ldr	r3, [r4, #0]
 801428a:	1c5a      	adds	r2, r3, #1
 801428c:	6022      	str	r2, [r4, #0]
 801428e:	7019      	strb	r1, [r3, #0]
 8014290:	e7c5      	b.n	801421e <_puts_r+0x42>
 8014292:	4622      	mov	r2, r4
 8014294:	4628      	mov	r0, r5
 8014296:	f000 f897 	bl	80143c8 <__swbuf_r>
 801429a:	3001      	adds	r0, #1
 801429c:	d1bf      	bne.n	801421e <_puts_r+0x42>
 801429e:	e7df      	b.n	8014260 <_puts_r+0x84>
 80142a0:	6823      	ldr	r3, [r4, #0]
 80142a2:	250a      	movs	r5, #10
 80142a4:	1c5a      	adds	r2, r3, #1
 80142a6:	6022      	str	r2, [r4, #0]
 80142a8:	701d      	strb	r5, [r3, #0]
 80142aa:	e7db      	b.n	8014264 <_puts_r+0x88>
 80142ac:	08041b54 	.word	0x08041b54
 80142b0:	08041b74 	.word	0x08041b74
 80142b4:	08041b34 	.word	0x08041b34

080142b8 <puts>:
 80142b8:	4b02      	ldr	r3, [pc, #8]	; (80142c4 <puts+0xc>)
 80142ba:	4601      	mov	r1, r0
 80142bc:	6818      	ldr	r0, [r3, #0]
 80142be:	f7ff bf8d 	b.w	80141dc <_puts_r>
 80142c2:	bf00      	nop
 80142c4:	20000024 	.word	0x20000024

080142c8 <rand>:
 80142c8:	4b17      	ldr	r3, [pc, #92]	; (8014328 <rand+0x60>)
 80142ca:	b510      	push	{r4, lr}
 80142cc:	681c      	ldr	r4, [r3, #0]
 80142ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80142d0:	b9b3      	cbnz	r3, 8014300 <rand+0x38>
 80142d2:	2018      	movs	r0, #24
 80142d4:	f000 fb86 	bl	80149e4 <malloc>
 80142d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80142da:	b928      	cbnz	r0, 80142e8 <rand+0x20>
 80142dc:	4602      	mov	r2, r0
 80142de:	4b13      	ldr	r3, [pc, #76]	; (801432c <rand+0x64>)
 80142e0:	4813      	ldr	r0, [pc, #76]	; (8014330 <rand+0x68>)
 80142e2:	214e      	movs	r1, #78	; 0x4e
 80142e4:	f000 f930 	bl	8014548 <__assert_func>
 80142e8:	4a12      	ldr	r2, [pc, #72]	; (8014334 <rand+0x6c>)
 80142ea:	4b13      	ldr	r3, [pc, #76]	; (8014338 <rand+0x70>)
 80142ec:	e9c0 2300 	strd	r2, r3, [r0]
 80142f0:	4b12      	ldr	r3, [pc, #72]	; (801433c <rand+0x74>)
 80142f2:	6083      	str	r3, [r0, #8]
 80142f4:	230b      	movs	r3, #11
 80142f6:	8183      	strh	r3, [r0, #12]
 80142f8:	2201      	movs	r2, #1
 80142fa:	2300      	movs	r3, #0
 80142fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014300:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014302:	480f      	ldr	r0, [pc, #60]	; (8014340 <rand+0x78>)
 8014304:	690a      	ldr	r2, [r1, #16]
 8014306:	694b      	ldr	r3, [r1, #20]
 8014308:	4c0e      	ldr	r4, [pc, #56]	; (8014344 <rand+0x7c>)
 801430a:	4350      	muls	r0, r2
 801430c:	fb04 0003 	mla	r0, r4, r3, r0
 8014310:	fba2 3404 	umull	r3, r4, r2, r4
 8014314:	1c5a      	adds	r2, r3, #1
 8014316:	4404      	add	r4, r0
 8014318:	f144 0000 	adc.w	r0, r4, #0
 801431c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014320:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014324:	bd10      	pop	{r4, pc}
 8014326:	bf00      	nop
 8014328:	20000024 	.word	0x20000024
 801432c:	08041a80 	.word	0x08041a80
 8014330:	08041a97 	.word	0x08041a97
 8014334:	abcd330e 	.word	0xabcd330e
 8014338:	e66d1234 	.word	0xe66d1234
 801433c:	0005deec 	.word	0x0005deec
 8014340:	5851f42d 	.word	0x5851f42d
 8014344:	4c957f2d 	.word	0x4c957f2d

08014348 <siprintf>:
 8014348:	b40e      	push	{r1, r2, r3}
 801434a:	b500      	push	{lr}
 801434c:	b09c      	sub	sp, #112	; 0x70
 801434e:	ab1d      	add	r3, sp, #116	; 0x74
 8014350:	9002      	str	r0, [sp, #8]
 8014352:	9006      	str	r0, [sp, #24]
 8014354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014358:	4809      	ldr	r0, [pc, #36]	; (8014380 <siprintf+0x38>)
 801435a:	9107      	str	r1, [sp, #28]
 801435c:	9104      	str	r1, [sp, #16]
 801435e:	4909      	ldr	r1, [pc, #36]	; (8014384 <siprintf+0x3c>)
 8014360:	f853 2b04 	ldr.w	r2, [r3], #4
 8014364:	9105      	str	r1, [sp, #20]
 8014366:	6800      	ldr	r0, [r0, #0]
 8014368:	9301      	str	r3, [sp, #4]
 801436a:	a902      	add	r1, sp, #8
 801436c:	f000 fc48 	bl	8014c00 <_svfiprintf_r>
 8014370:	9b02      	ldr	r3, [sp, #8]
 8014372:	2200      	movs	r2, #0
 8014374:	701a      	strb	r2, [r3, #0]
 8014376:	b01c      	add	sp, #112	; 0x70
 8014378:	f85d eb04 	ldr.w	lr, [sp], #4
 801437c:	b003      	add	sp, #12
 801437e:	4770      	bx	lr
 8014380:	20000024 	.word	0x20000024
 8014384:	ffff0208 	.word	0xffff0208

08014388 <strchr>:
 8014388:	b2c9      	uxtb	r1, r1
 801438a:	4603      	mov	r3, r0
 801438c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014390:	b11a      	cbz	r2, 801439a <strchr+0x12>
 8014392:	428a      	cmp	r2, r1
 8014394:	d1f9      	bne.n	801438a <strchr+0x2>
 8014396:	4618      	mov	r0, r3
 8014398:	4770      	bx	lr
 801439a:	2900      	cmp	r1, #0
 801439c:	bf18      	it	ne
 801439e:	2300      	movne	r3, #0
 80143a0:	e7f9      	b.n	8014396 <strchr+0xe>

080143a2 <strncmp>:
 80143a2:	b510      	push	{r4, lr}
 80143a4:	b16a      	cbz	r2, 80143c2 <strncmp+0x20>
 80143a6:	3901      	subs	r1, #1
 80143a8:	1884      	adds	r4, r0, r2
 80143aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80143ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d103      	bne.n	80143be <strncmp+0x1c>
 80143b6:	42a0      	cmp	r0, r4
 80143b8:	d001      	beq.n	80143be <strncmp+0x1c>
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d1f5      	bne.n	80143aa <strncmp+0x8>
 80143be:	1a98      	subs	r0, r3, r2
 80143c0:	bd10      	pop	{r4, pc}
 80143c2:	4610      	mov	r0, r2
 80143c4:	e7fc      	b.n	80143c0 <strncmp+0x1e>
	...

080143c8 <__swbuf_r>:
 80143c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ca:	460e      	mov	r6, r1
 80143cc:	4614      	mov	r4, r2
 80143ce:	4605      	mov	r5, r0
 80143d0:	b118      	cbz	r0, 80143da <__swbuf_r+0x12>
 80143d2:	6983      	ldr	r3, [r0, #24]
 80143d4:	b90b      	cbnz	r3, 80143da <__swbuf_r+0x12>
 80143d6:	f000 f9ef 	bl	80147b8 <__sinit>
 80143da:	4b21      	ldr	r3, [pc, #132]	; (8014460 <__swbuf_r+0x98>)
 80143dc:	429c      	cmp	r4, r3
 80143de:	d12b      	bne.n	8014438 <__swbuf_r+0x70>
 80143e0:	686c      	ldr	r4, [r5, #4]
 80143e2:	69a3      	ldr	r3, [r4, #24]
 80143e4:	60a3      	str	r3, [r4, #8]
 80143e6:	89a3      	ldrh	r3, [r4, #12]
 80143e8:	071a      	lsls	r2, r3, #28
 80143ea:	d52f      	bpl.n	801444c <__swbuf_r+0x84>
 80143ec:	6923      	ldr	r3, [r4, #16]
 80143ee:	b36b      	cbz	r3, 801444c <__swbuf_r+0x84>
 80143f0:	6923      	ldr	r3, [r4, #16]
 80143f2:	6820      	ldr	r0, [r4, #0]
 80143f4:	1ac0      	subs	r0, r0, r3
 80143f6:	6963      	ldr	r3, [r4, #20]
 80143f8:	b2f6      	uxtb	r6, r6
 80143fa:	4283      	cmp	r3, r0
 80143fc:	4637      	mov	r7, r6
 80143fe:	dc04      	bgt.n	801440a <__swbuf_r+0x42>
 8014400:	4621      	mov	r1, r4
 8014402:	4628      	mov	r0, r5
 8014404:	f000 f944 	bl	8014690 <_fflush_r>
 8014408:	bb30      	cbnz	r0, 8014458 <__swbuf_r+0x90>
 801440a:	68a3      	ldr	r3, [r4, #8]
 801440c:	3b01      	subs	r3, #1
 801440e:	60a3      	str	r3, [r4, #8]
 8014410:	6823      	ldr	r3, [r4, #0]
 8014412:	1c5a      	adds	r2, r3, #1
 8014414:	6022      	str	r2, [r4, #0]
 8014416:	701e      	strb	r6, [r3, #0]
 8014418:	6963      	ldr	r3, [r4, #20]
 801441a:	3001      	adds	r0, #1
 801441c:	4283      	cmp	r3, r0
 801441e:	d004      	beq.n	801442a <__swbuf_r+0x62>
 8014420:	89a3      	ldrh	r3, [r4, #12]
 8014422:	07db      	lsls	r3, r3, #31
 8014424:	d506      	bpl.n	8014434 <__swbuf_r+0x6c>
 8014426:	2e0a      	cmp	r6, #10
 8014428:	d104      	bne.n	8014434 <__swbuf_r+0x6c>
 801442a:	4621      	mov	r1, r4
 801442c:	4628      	mov	r0, r5
 801442e:	f000 f92f 	bl	8014690 <_fflush_r>
 8014432:	b988      	cbnz	r0, 8014458 <__swbuf_r+0x90>
 8014434:	4638      	mov	r0, r7
 8014436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014438:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <__swbuf_r+0x9c>)
 801443a:	429c      	cmp	r4, r3
 801443c:	d101      	bne.n	8014442 <__swbuf_r+0x7a>
 801443e:	68ac      	ldr	r4, [r5, #8]
 8014440:	e7cf      	b.n	80143e2 <__swbuf_r+0x1a>
 8014442:	4b09      	ldr	r3, [pc, #36]	; (8014468 <__swbuf_r+0xa0>)
 8014444:	429c      	cmp	r4, r3
 8014446:	bf08      	it	eq
 8014448:	68ec      	ldreq	r4, [r5, #12]
 801444a:	e7ca      	b.n	80143e2 <__swbuf_r+0x1a>
 801444c:	4621      	mov	r1, r4
 801444e:	4628      	mov	r0, r5
 8014450:	f000 f80c 	bl	801446c <__swsetup_r>
 8014454:	2800      	cmp	r0, #0
 8014456:	d0cb      	beq.n	80143f0 <__swbuf_r+0x28>
 8014458:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801445c:	e7ea      	b.n	8014434 <__swbuf_r+0x6c>
 801445e:	bf00      	nop
 8014460:	08041b54 	.word	0x08041b54
 8014464:	08041b74 	.word	0x08041b74
 8014468:	08041b34 	.word	0x08041b34

0801446c <__swsetup_r>:
 801446c:	4b32      	ldr	r3, [pc, #200]	; (8014538 <__swsetup_r+0xcc>)
 801446e:	b570      	push	{r4, r5, r6, lr}
 8014470:	681d      	ldr	r5, [r3, #0]
 8014472:	4606      	mov	r6, r0
 8014474:	460c      	mov	r4, r1
 8014476:	b125      	cbz	r5, 8014482 <__swsetup_r+0x16>
 8014478:	69ab      	ldr	r3, [r5, #24]
 801447a:	b913      	cbnz	r3, 8014482 <__swsetup_r+0x16>
 801447c:	4628      	mov	r0, r5
 801447e:	f000 f99b 	bl	80147b8 <__sinit>
 8014482:	4b2e      	ldr	r3, [pc, #184]	; (801453c <__swsetup_r+0xd0>)
 8014484:	429c      	cmp	r4, r3
 8014486:	d10f      	bne.n	80144a8 <__swsetup_r+0x3c>
 8014488:	686c      	ldr	r4, [r5, #4]
 801448a:	89a3      	ldrh	r3, [r4, #12]
 801448c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014490:	0719      	lsls	r1, r3, #28
 8014492:	d42c      	bmi.n	80144ee <__swsetup_r+0x82>
 8014494:	06dd      	lsls	r5, r3, #27
 8014496:	d411      	bmi.n	80144bc <__swsetup_r+0x50>
 8014498:	2309      	movs	r3, #9
 801449a:	6033      	str	r3, [r6, #0]
 801449c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80144a0:	81a3      	strh	r3, [r4, #12]
 80144a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144a6:	e03e      	b.n	8014526 <__swsetup_r+0xba>
 80144a8:	4b25      	ldr	r3, [pc, #148]	; (8014540 <__swsetup_r+0xd4>)
 80144aa:	429c      	cmp	r4, r3
 80144ac:	d101      	bne.n	80144b2 <__swsetup_r+0x46>
 80144ae:	68ac      	ldr	r4, [r5, #8]
 80144b0:	e7eb      	b.n	801448a <__swsetup_r+0x1e>
 80144b2:	4b24      	ldr	r3, [pc, #144]	; (8014544 <__swsetup_r+0xd8>)
 80144b4:	429c      	cmp	r4, r3
 80144b6:	bf08      	it	eq
 80144b8:	68ec      	ldreq	r4, [r5, #12]
 80144ba:	e7e6      	b.n	801448a <__swsetup_r+0x1e>
 80144bc:	0758      	lsls	r0, r3, #29
 80144be:	d512      	bpl.n	80144e6 <__swsetup_r+0x7a>
 80144c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144c2:	b141      	cbz	r1, 80144d6 <__swsetup_r+0x6a>
 80144c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144c8:	4299      	cmp	r1, r3
 80144ca:	d002      	beq.n	80144d2 <__swsetup_r+0x66>
 80144cc:	4630      	mov	r0, r6
 80144ce:	f000 fa91 	bl	80149f4 <_free_r>
 80144d2:	2300      	movs	r3, #0
 80144d4:	6363      	str	r3, [r4, #52]	; 0x34
 80144d6:	89a3      	ldrh	r3, [r4, #12]
 80144d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144dc:	81a3      	strh	r3, [r4, #12]
 80144de:	2300      	movs	r3, #0
 80144e0:	6063      	str	r3, [r4, #4]
 80144e2:	6923      	ldr	r3, [r4, #16]
 80144e4:	6023      	str	r3, [r4, #0]
 80144e6:	89a3      	ldrh	r3, [r4, #12]
 80144e8:	f043 0308 	orr.w	r3, r3, #8
 80144ec:	81a3      	strh	r3, [r4, #12]
 80144ee:	6923      	ldr	r3, [r4, #16]
 80144f0:	b94b      	cbnz	r3, 8014506 <__swsetup_r+0x9a>
 80144f2:	89a3      	ldrh	r3, [r4, #12]
 80144f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144fc:	d003      	beq.n	8014506 <__swsetup_r+0x9a>
 80144fe:	4621      	mov	r1, r4
 8014500:	4630      	mov	r0, r6
 8014502:	f000 fa2f 	bl	8014964 <__smakebuf_r>
 8014506:	89a0      	ldrh	r0, [r4, #12]
 8014508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801450c:	f010 0301 	ands.w	r3, r0, #1
 8014510:	d00a      	beq.n	8014528 <__swsetup_r+0xbc>
 8014512:	2300      	movs	r3, #0
 8014514:	60a3      	str	r3, [r4, #8]
 8014516:	6963      	ldr	r3, [r4, #20]
 8014518:	425b      	negs	r3, r3
 801451a:	61a3      	str	r3, [r4, #24]
 801451c:	6923      	ldr	r3, [r4, #16]
 801451e:	b943      	cbnz	r3, 8014532 <__swsetup_r+0xc6>
 8014520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014524:	d1ba      	bne.n	801449c <__swsetup_r+0x30>
 8014526:	bd70      	pop	{r4, r5, r6, pc}
 8014528:	0781      	lsls	r1, r0, #30
 801452a:	bf58      	it	pl
 801452c:	6963      	ldrpl	r3, [r4, #20]
 801452e:	60a3      	str	r3, [r4, #8]
 8014530:	e7f4      	b.n	801451c <__swsetup_r+0xb0>
 8014532:	2000      	movs	r0, #0
 8014534:	e7f7      	b.n	8014526 <__swsetup_r+0xba>
 8014536:	bf00      	nop
 8014538:	20000024 	.word	0x20000024
 801453c:	08041b54 	.word	0x08041b54
 8014540:	08041b74 	.word	0x08041b74
 8014544:	08041b34 	.word	0x08041b34

08014548 <__assert_func>:
 8014548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801454a:	4614      	mov	r4, r2
 801454c:	461a      	mov	r2, r3
 801454e:	4b09      	ldr	r3, [pc, #36]	; (8014574 <__assert_func+0x2c>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	4605      	mov	r5, r0
 8014554:	68d8      	ldr	r0, [r3, #12]
 8014556:	b14c      	cbz	r4, 801456c <__assert_func+0x24>
 8014558:	4b07      	ldr	r3, [pc, #28]	; (8014578 <__assert_func+0x30>)
 801455a:	9100      	str	r1, [sp, #0]
 801455c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014560:	4906      	ldr	r1, [pc, #24]	; (801457c <__assert_func+0x34>)
 8014562:	462b      	mov	r3, r5
 8014564:	f000 f9a6 	bl	80148b4 <fiprintf>
 8014568:	f000 ff9e 	bl	80154a8 <abort>
 801456c:	4b04      	ldr	r3, [pc, #16]	; (8014580 <__assert_func+0x38>)
 801456e:	461c      	mov	r4, r3
 8014570:	e7f3      	b.n	801455a <__assert_func+0x12>
 8014572:	bf00      	nop
 8014574:	20000024 	.word	0x20000024
 8014578:	08041af6 	.word	0x08041af6
 801457c:	08041b03 	.word	0x08041b03
 8014580:	08041b31 	.word	0x08041b31

08014584 <__sflush_r>:
 8014584:	898a      	ldrh	r2, [r1, #12]
 8014586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801458a:	4605      	mov	r5, r0
 801458c:	0710      	lsls	r0, r2, #28
 801458e:	460c      	mov	r4, r1
 8014590:	d458      	bmi.n	8014644 <__sflush_r+0xc0>
 8014592:	684b      	ldr	r3, [r1, #4]
 8014594:	2b00      	cmp	r3, #0
 8014596:	dc05      	bgt.n	80145a4 <__sflush_r+0x20>
 8014598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801459a:	2b00      	cmp	r3, #0
 801459c:	dc02      	bgt.n	80145a4 <__sflush_r+0x20>
 801459e:	2000      	movs	r0, #0
 80145a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145a6:	2e00      	cmp	r6, #0
 80145a8:	d0f9      	beq.n	801459e <__sflush_r+0x1a>
 80145aa:	2300      	movs	r3, #0
 80145ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145b0:	682f      	ldr	r7, [r5, #0]
 80145b2:	602b      	str	r3, [r5, #0]
 80145b4:	d032      	beq.n	801461c <__sflush_r+0x98>
 80145b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80145b8:	89a3      	ldrh	r3, [r4, #12]
 80145ba:	075a      	lsls	r2, r3, #29
 80145bc:	d505      	bpl.n	80145ca <__sflush_r+0x46>
 80145be:	6863      	ldr	r3, [r4, #4]
 80145c0:	1ac0      	subs	r0, r0, r3
 80145c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145c4:	b10b      	cbz	r3, 80145ca <__sflush_r+0x46>
 80145c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80145c8:	1ac0      	subs	r0, r0, r3
 80145ca:	2300      	movs	r3, #0
 80145cc:	4602      	mov	r2, r0
 80145ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145d0:	6a21      	ldr	r1, [r4, #32]
 80145d2:	4628      	mov	r0, r5
 80145d4:	47b0      	blx	r6
 80145d6:	1c43      	adds	r3, r0, #1
 80145d8:	89a3      	ldrh	r3, [r4, #12]
 80145da:	d106      	bne.n	80145ea <__sflush_r+0x66>
 80145dc:	6829      	ldr	r1, [r5, #0]
 80145de:	291d      	cmp	r1, #29
 80145e0:	d82c      	bhi.n	801463c <__sflush_r+0xb8>
 80145e2:	4a2a      	ldr	r2, [pc, #168]	; (801468c <__sflush_r+0x108>)
 80145e4:	40ca      	lsrs	r2, r1
 80145e6:	07d6      	lsls	r6, r2, #31
 80145e8:	d528      	bpl.n	801463c <__sflush_r+0xb8>
 80145ea:	2200      	movs	r2, #0
 80145ec:	6062      	str	r2, [r4, #4]
 80145ee:	04d9      	lsls	r1, r3, #19
 80145f0:	6922      	ldr	r2, [r4, #16]
 80145f2:	6022      	str	r2, [r4, #0]
 80145f4:	d504      	bpl.n	8014600 <__sflush_r+0x7c>
 80145f6:	1c42      	adds	r2, r0, #1
 80145f8:	d101      	bne.n	80145fe <__sflush_r+0x7a>
 80145fa:	682b      	ldr	r3, [r5, #0]
 80145fc:	b903      	cbnz	r3, 8014600 <__sflush_r+0x7c>
 80145fe:	6560      	str	r0, [r4, #84]	; 0x54
 8014600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014602:	602f      	str	r7, [r5, #0]
 8014604:	2900      	cmp	r1, #0
 8014606:	d0ca      	beq.n	801459e <__sflush_r+0x1a>
 8014608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801460c:	4299      	cmp	r1, r3
 801460e:	d002      	beq.n	8014616 <__sflush_r+0x92>
 8014610:	4628      	mov	r0, r5
 8014612:	f000 f9ef 	bl	80149f4 <_free_r>
 8014616:	2000      	movs	r0, #0
 8014618:	6360      	str	r0, [r4, #52]	; 0x34
 801461a:	e7c1      	b.n	80145a0 <__sflush_r+0x1c>
 801461c:	6a21      	ldr	r1, [r4, #32]
 801461e:	2301      	movs	r3, #1
 8014620:	4628      	mov	r0, r5
 8014622:	47b0      	blx	r6
 8014624:	1c41      	adds	r1, r0, #1
 8014626:	d1c7      	bne.n	80145b8 <__sflush_r+0x34>
 8014628:	682b      	ldr	r3, [r5, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d0c4      	beq.n	80145b8 <__sflush_r+0x34>
 801462e:	2b1d      	cmp	r3, #29
 8014630:	d001      	beq.n	8014636 <__sflush_r+0xb2>
 8014632:	2b16      	cmp	r3, #22
 8014634:	d101      	bne.n	801463a <__sflush_r+0xb6>
 8014636:	602f      	str	r7, [r5, #0]
 8014638:	e7b1      	b.n	801459e <__sflush_r+0x1a>
 801463a:	89a3      	ldrh	r3, [r4, #12]
 801463c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014640:	81a3      	strh	r3, [r4, #12]
 8014642:	e7ad      	b.n	80145a0 <__sflush_r+0x1c>
 8014644:	690f      	ldr	r7, [r1, #16]
 8014646:	2f00      	cmp	r7, #0
 8014648:	d0a9      	beq.n	801459e <__sflush_r+0x1a>
 801464a:	0793      	lsls	r3, r2, #30
 801464c:	680e      	ldr	r6, [r1, #0]
 801464e:	bf08      	it	eq
 8014650:	694b      	ldreq	r3, [r1, #20]
 8014652:	600f      	str	r7, [r1, #0]
 8014654:	bf18      	it	ne
 8014656:	2300      	movne	r3, #0
 8014658:	eba6 0807 	sub.w	r8, r6, r7
 801465c:	608b      	str	r3, [r1, #8]
 801465e:	f1b8 0f00 	cmp.w	r8, #0
 8014662:	dd9c      	ble.n	801459e <__sflush_r+0x1a>
 8014664:	6a21      	ldr	r1, [r4, #32]
 8014666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014668:	4643      	mov	r3, r8
 801466a:	463a      	mov	r2, r7
 801466c:	4628      	mov	r0, r5
 801466e:	47b0      	blx	r6
 8014670:	2800      	cmp	r0, #0
 8014672:	dc06      	bgt.n	8014682 <__sflush_r+0xfe>
 8014674:	89a3      	ldrh	r3, [r4, #12]
 8014676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801467a:	81a3      	strh	r3, [r4, #12]
 801467c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014680:	e78e      	b.n	80145a0 <__sflush_r+0x1c>
 8014682:	4407      	add	r7, r0
 8014684:	eba8 0800 	sub.w	r8, r8, r0
 8014688:	e7e9      	b.n	801465e <__sflush_r+0xda>
 801468a:	bf00      	nop
 801468c:	20400001 	.word	0x20400001

08014690 <_fflush_r>:
 8014690:	b538      	push	{r3, r4, r5, lr}
 8014692:	690b      	ldr	r3, [r1, #16]
 8014694:	4605      	mov	r5, r0
 8014696:	460c      	mov	r4, r1
 8014698:	b913      	cbnz	r3, 80146a0 <_fflush_r+0x10>
 801469a:	2500      	movs	r5, #0
 801469c:	4628      	mov	r0, r5
 801469e:	bd38      	pop	{r3, r4, r5, pc}
 80146a0:	b118      	cbz	r0, 80146aa <_fflush_r+0x1a>
 80146a2:	6983      	ldr	r3, [r0, #24]
 80146a4:	b90b      	cbnz	r3, 80146aa <_fflush_r+0x1a>
 80146a6:	f000 f887 	bl	80147b8 <__sinit>
 80146aa:	4b14      	ldr	r3, [pc, #80]	; (80146fc <_fflush_r+0x6c>)
 80146ac:	429c      	cmp	r4, r3
 80146ae:	d11b      	bne.n	80146e8 <_fflush_r+0x58>
 80146b0:	686c      	ldr	r4, [r5, #4]
 80146b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d0ef      	beq.n	801469a <_fflush_r+0xa>
 80146ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80146bc:	07d0      	lsls	r0, r2, #31
 80146be:	d404      	bmi.n	80146ca <_fflush_r+0x3a>
 80146c0:	0599      	lsls	r1, r3, #22
 80146c2:	d402      	bmi.n	80146ca <_fflush_r+0x3a>
 80146c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146c6:	f000 f927 	bl	8014918 <__retarget_lock_acquire_recursive>
 80146ca:	4628      	mov	r0, r5
 80146cc:	4621      	mov	r1, r4
 80146ce:	f7ff ff59 	bl	8014584 <__sflush_r>
 80146d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146d4:	07da      	lsls	r2, r3, #31
 80146d6:	4605      	mov	r5, r0
 80146d8:	d4e0      	bmi.n	801469c <_fflush_r+0xc>
 80146da:	89a3      	ldrh	r3, [r4, #12]
 80146dc:	059b      	lsls	r3, r3, #22
 80146de:	d4dd      	bmi.n	801469c <_fflush_r+0xc>
 80146e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146e2:	f000 f91a 	bl	801491a <__retarget_lock_release_recursive>
 80146e6:	e7d9      	b.n	801469c <_fflush_r+0xc>
 80146e8:	4b05      	ldr	r3, [pc, #20]	; (8014700 <_fflush_r+0x70>)
 80146ea:	429c      	cmp	r4, r3
 80146ec:	d101      	bne.n	80146f2 <_fflush_r+0x62>
 80146ee:	68ac      	ldr	r4, [r5, #8]
 80146f0:	e7df      	b.n	80146b2 <_fflush_r+0x22>
 80146f2:	4b04      	ldr	r3, [pc, #16]	; (8014704 <_fflush_r+0x74>)
 80146f4:	429c      	cmp	r4, r3
 80146f6:	bf08      	it	eq
 80146f8:	68ec      	ldreq	r4, [r5, #12]
 80146fa:	e7da      	b.n	80146b2 <_fflush_r+0x22>
 80146fc:	08041b54 	.word	0x08041b54
 8014700:	08041b74 	.word	0x08041b74
 8014704:	08041b34 	.word	0x08041b34

08014708 <std>:
 8014708:	2300      	movs	r3, #0
 801470a:	b510      	push	{r4, lr}
 801470c:	4604      	mov	r4, r0
 801470e:	e9c0 3300 	strd	r3, r3, [r0]
 8014712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014716:	6083      	str	r3, [r0, #8]
 8014718:	8181      	strh	r1, [r0, #12]
 801471a:	6643      	str	r3, [r0, #100]	; 0x64
 801471c:	81c2      	strh	r2, [r0, #14]
 801471e:	6183      	str	r3, [r0, #24]
 8014720:	4619      	mov	r1, r3
 8014722:	2208      	movs	r2, #8
 8014724:	305c      	adds	r0, #92	; 0x5c
 8014726:	f7ff fd39 	bl	801419c <memset>
 801472a:	4b05      	ldr	r3, [pc, #20]	; (8014740 <std+0x38>)
 801472c:	6263      	str	r3, [r4, #36]	; 0x24
 801472e:	4b05      	ldr	r3, [pc, #20]	; (8014744 <std+0x3c>)
 8014730:	62a3      	str	r3, [r4, #40]	; 0x28
 8014732:	4b05      	ldr	r3, [pc, #20]	; (8014748 <std+0x40>)
 8014734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014736:	4b05      	ldr	r3, [pc, #20]	; (801474c <std+0x44>)
 8014738:	6224      	str	r4, [r4, #32]
 801473a:	6323      	str	r3, [r4, #48]	; 0x30
 801473c:	bd10      	pop	{r4, pc}
 801473e:	bf00      	nop
 8014740:	080153fd 	.word	0x080153fd
 8014744:	0801541f 	.word	0x0801541f
 8014748:	08015457 	.word	0x08015457
 801474c:	0801547b 	.word	0x0801547b

08014750 <_cleanup_r>:
 8014750:	4901      	ldr	r1, [pc, #4]	; (8014758 <_cleanup_r+0x8>)
 8014752:	f000 b8c1 	b.w	80148d8 <_fwalk_reent>
 8014756:	bf00      	nop
 8014758:	08014691 	.word	0x08014691

0801475c <__sfmoreglue>:
 801475c:	b570      	push	{r4, r5, r6, lr}
 801475e:	1e4a      	subs	r2, r1, #1
 8014760:	2568      	movs	r5, #104	; 0x68
 8014762:	4355      	muls	r5, r2
 8014764:	460e      	mov	r6, r1
 8014766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801476a:	f000 f993 	bl	8014a94 <_malloc_r>
 801476e:	4604      	mov	r4, r0
 8014770:	b140      	cbz	r0, 8014784 <__sfmoreglue+0x28>
 8014772:	2100      	movs	r1, #0
 8014774:	e9c0 1600 	strd	r1, r6, [r0]
 8014778:	300c      	adds	r0, #12
 801477a:	60a0      	str	r0, [r4, #8]
 801477c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014780:	f7ff fd0c 	bl	801419c <memset>
 8014784:	4620      	mov	r0, r4
 8014786:	bd70      	pop	{r4, r5, r6, pc}

08014788 <__sfp_lock_acquire>:
 8014788:	4801      	ldr	r0, [pc, #4]	; (8014790 <__sfp_lock_acquire+0x8>)
 801478a:	f000 b8c5 	b.w	8014918 <__retarget_lock_acquire_recursive>
 801478e:	bf00      	nop
 8014790:	20006ea0 	.word	0x20006ea0

08014794 <__sfp_lock_release>:
 8014794:	4801      	ldr	r0, [pc, #4]	; (801479c <__sfp_lock_release+0x8>)
 8014796:	f000 b8c0 	b.w	801491a <__retarget_lock_release_recursive>
 801479a:	bf00      	nop
 801479c:	20006ea0 	.word	0x20006ea0

080147a0 <__sinit_lock_acquire>:
 80147a0:	4801      	ldr	r0, [pc, #4]	; (80147a8 <__sinit_lock_acquire+0x8>)
 80147a2:	f000 b8b9 	b.w	8014918 <__retarget_lock_acquire_recursive>
 80147a6:	bf00      	nop
 80147a8:	20006e9b 	.word	0x20006e9b

080147ac <__sinit_lock_release>:
 80147ac:	4801      	ldr	r0, [pc, #4]	; (80147b4 <__sinit_lock_release+0x8>)
 80147ae:	f000 b8b4 	b.w	801491a <__retarget_lock_release_recursive>
 80147b2:	bf00      	nop
 80147b4:	20006e9b 	.word	0x20006e9b

080147b8 <__sinit>:
 80147b8:	b510      	push	{r4, lr}
 80147ba:	4604      	mov	r4, r0
 80147bc:	f7ff fff0 	bl	80147a0 <__sinit_lock_acquire>
 80147c0:	69a3      	ldr	r3, [r4, #24]
 80147c2:	b11b      	cbz	r3, 80147cc <__sinit+0x14>
 80147c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147c8:	f7ff bff0 	b.w	80147ac <__sinit_lock_release>
 80147cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80147d0:	6523      	str	r3, [r4, #80]	; 0x50
 80147d2:	4b13      	ldr	r3, [pc, #76]	; (8014820 <__sinit+0x68>)
 80147d4:	4a13      	ldr	r2, [pc, #76]	; (8014824 <__sinit+0x6c>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80147da:	42a3      	cmp	r3, r4
 80147dc:	bf04      	itt	eq
 80147de:	2301      	moveq	r3, #1
 80147e0:	61a3      	streq	r3, [r4, #24]
 80147e2:	4620      	mov	r0, r4
 80147e4:	f000 f820 	bl	8014828 <__sfp>
 80147e8:	6060      	str	r0, [r4, #4]
 80147ea:	4620      	mov	r0, r4
 80147ec:	f000 f81c 	bl	8014828 <__sfp>
 80147f0:	60a0      	str	r0, [r4, #8]
 80147f2:	4620      	mov	r0, r4
 80147f4:	f000 f818 	bl	8014828 <__sfp>
 80147f8:	2200      	movs	r2, #0
 80147fa:	60e0      	str	r0, [r4, #12]
 80147fc:	2104      	movs	r1, #4
 80147fe:	6860      	ldr	r0, [r4, #4]
 8014800:	f7ff ff82 	bl	8014708 <std>
 8014804:	68a0      	ldr	r0, [r4, #8]
 8014806:	2201      	movs	r2, #1
 8014808:	2109      	movs	r1, #9
 801480a:	f7ff ff7d 	bl	8014708 <std>
 801480e:	68e0      	ldr	r0, [r4, #12]
 8014810:	2202      	movs	r2, #2
 8014812:	2112      	movs	r1, #18
 8014814:	f7ff ff78 	bl	8014708 <std>
 8014818:	2301      	movs	r3, #1
 801481a:	61a3      	str	r3, [r4, #24]
 801481c:	e7d2      	b.n	80147c4 <__sinit+0xc>
 801481e:	bf00      	nop
 8014820:	08041a7c 	.word	0x08041a7c
 8014824:	08014751 	.word	0x08014751

08014828 <__sfp>:
 8014828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801482a:	4607      	mov	r7, r0
 801482c:	f7ff ffac 	bl	8014788 <__sfp_lock_acquire>
 8014830:	4b1e      	ldr	r3, [pc, #120]	; (80148ac <__sfp+0x84>)
 8014832:	681e      	ldr	r6, [r3, #0]
 8014834:	69b3      	ldr	r3, [r6, #24]
 8014836:	b913      	cbnz	r3, 801483e <__sfp+0x16>
 8014838:	4630      	mov	r0, r6
 801483a:	f7ff ffbd 	bl	80147b8 <__sinit>
 801483e:	3648      	adds	r6, #72	; 0x48
 8014840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014844:	3b01      	subs	r3, #1
 8014846:	d503      	bpl.n	8014850 <__sfp+0x28>
 8014848:	6833      	ldr	r3, [r6, #0]
 801484a:	b30b      	cbz	r3, 8014890 <__sfp+0x68>
 801484c:	6836      	ldr	r6, [r6, #0]
 801484e:	e7f7      	b.n	8014840 <__sfp+0x18>
 8014850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014854:	b9d5      	cbnz	r5, 801488c <__sfp+0x64>
 8014856:	4b16      	ldr	r3, [pc, #88]	; (80148b0 <__sfp+0x88>)
 8014858:	60e3      	str	r3, [r4, #12]
 801485a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801485e:	6665      	str	r5, [r4, #100]	; 0x64
 8014860:	f000 f859 	bl	8014916 <__retarget_lock_init_recursive>
 8014864:	f7ff ff96 	bl	8014794 <__sfp_lock_release>
 8014868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801486c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014870:	6025      	str	r5, [r4, #0]
 8014872:	61a5      	str	r5, [r4, #24]
 8014874:	2208      	movs	r2, #8
 8014876:	4629      	mov	r1, r5
 8014878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801487c:	f7ff fc8e 	bl	801419c <memset>
 8014880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014888:	4620      	mov	r0, r4
 801488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801488c:	3468      	adds	r4, #104	; 0x68
 801488e:	e7d9      	b.n	8014844 <__sfp+0x1c>
 8014890:	2104      	movs	r1, #4
 8014892:	4638      	mov	r0, r7
 8014894:	f7ff ff62 	bl	801475c <__sfmoreglue>
 8014898:	4604      	mov	r4, r0
 801489a:	6030      	str	r0, [r6, #0]
 801489c:	2800      	cmp	r0, #0
 801489e:	d1d5      	bne.n	801484c <__sfp+0x24>
 80148a0:	f7ff ff78 	bl	8014794 <__sfp_lock_release>
 80148a4:	230c      	movs	r3, #12
 80148a6:	603b      	str	r3, [r7, #0]
 80148a8:	e7ee      	b.n	8014888 <__sfp+0x60>
 80148aa:	bf00      	nop
 80148ac:	08041a7c 	.word	0x08041a7c
 80148b0:	ffff0001 	.word	0xffff0001

080148b4 <fiprintf>:
 80148b4:	b40e      	push	{r1, r2, r3}
 80148b6:	b503      	push	{r0, r1, lr}
 80148b8:	4601      	mov	r1, r0
 80148ba:	ab03      	add	r3, sp, #12
 80148bc:	4805      	ldr	r0, [pc, #20]	; (80148d4 <fiprintf+0x20>)
 80148be:	f853 2b04 	ldr.w	r2, [r3], #4
 80148c2:	6800      	ldr	r0, [r0, #0]
 80148c4:	9301      	str	r3, [sp, #4]
 80148c6:	f000 fac5 	bl	8014e54 <_vfiprintf_r>
 80148ca:	b002      	add	sp, #8
 80148cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80148d0:	b003      	add	sp, #12
 80148d2:	4770      	bx	lr
 80148d4:	20000024 	.word	0x20000024

080148d8 <_fwalk_reent>:
 80148d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148dc:	4606      	mov	r6, r0
 80148de:	4688      	mov	r8, r1
 80148e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80148e4:	2700      	movs	r7, #0
 80148e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148ea:	f1b9 0901 	subs.w	r9, r9, #1
 80148ee:	d505      	bpl.n	80148fc <_fwalk_reent+0x24>
 80148f0:	6824      	ldr	r4, [r4, #0]
 80148f2:	2c00      	cmp	r4, #0
 80148f4:	d1f7      	bne.n	80148e6 <_fwalk_reent+0xe>
 80148f6:	4638      	mov	r0, r7
 80148f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148fc:	89ab      	ldrh	r3, [r5, #12]
 80148fe:	2b01      	cmp	r3, #1
 8014900:	d907      	bls.n	8014912 <_fwalk_reent+0x3a>
 8014902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014906:	3301      	adds	r3, #1
 8014908:	d003      	beq.n	8014912 <_fwalk_reent+0x3a>
 801490a:	4629      	mov	r1, r5
 801490c:	4630      	mov	r0, r6
 801490e:	47c0      	blx	r8
 8014910:	4307      	orrs	r7, r0
 8014912:	3568      	adds	r5, #104	; 0x68
 8014914:	e7e9      	b.n	80148ea <_fwalk_reent+0x12>

08014916 <__retarget_lock_init_recursive>:
 8014916:	4770      	bx	lr

08014918 <__retarget_lock_acquire_recursive>:
 8014918:	4770      	bx	lr

0801491a <__retarget_lock_release_recursive>:
 801491a:	4770      	bx	lr

0801491c <__swhatbuf_r>:
 801491c:	b570      	push	{r4, r5, r6, lr}
 801491e:	460e      	mov	r6, r1
 8014920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014924:	2900      	cmp	r1, #0
 8014926:	b096      	sub	sp, #88	; 0x58
 8014928:	4614      	mov	r4, r2
 801492a:	461d      	mov	r5, r3
 801492c:	da07      	bge.n	801493e <__swhatbuf_r+0x22>
 801492e:	2300      	movs	r3, #0
 8014930:	602b      	str	r3, [r5, #0]
 8014932:	89b3      	ldrh	r3, [r6, #12]
 8014934:	061a      	lsls	r2, r3, #24
 8014936:	d410      	bmi.n	801495a <__swhatbuf_r+0x3e>
 8014938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801493c:	e00e      	b.n	801495c <__swhatbuf_r+0x40>
 801493e:	466a      	mov	r2, sp
 8014940:	f000 fdca 	bl	80154d8 <_fstat_r>
 8014944:	2800      	cmp	r0, #0
 8014946:	dbf2      	blt.n	801492e <__swhatbuf_r+0x12>
 8014948:	9a01      	ldr	r2, [sp, #4]
 801494a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801494e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014952:	425a      	negs	r2, r3
 8014954:	415a      	adcs	r2, r3
 8014956:	602a      	str	r2, [r5, #0]
 8014958:	e7ee      	b.n	8014938 <__swhatbuf_r+0x1c>
 801495a:	2340      	movs	r3, #64	; 0x40
 801495c:	2000      	movs	r0, #0
 801495e:	6023      	str	r3, [r4, #0]
 8014960:	b016      	add	sp, #88	; 0x58
 8014962:	bd70      	pop	{r4, r5, r6, pc}

08014964 <__smakebuf_r>:
 8014964:	898b      	ldrh	r3, [r1, #12]
 8014966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014968:	079d      	lsls	r5, r3, #30
 801496a:	4606      	mov	r6, r0
 801496c:	460c      	mov	r4, r1
 801496e:	d507      	bpl.n	8014980 <__smakebuf_r+0x1c>
 8014970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014974:	6023      	str	r3, [r4, #0]
 8014976:	6123      	str	r3, [r4, #16]
 8014978:	2301      	movs	r3, #1
 801497a:	6163      	str	r3, [r4, #20]
 801497c:	b002      	add	sp, #8
 801497e:	bd70      	pop	{r4, r5, r6, pc}
 8014980:	ab01      	add	r3, sp, #4
 8014982:	466a      	mov	r2, sp
 8014984:	f7ff ffca 	bl	801491c <__swhatbuf_r>
 8014988:	9900      	ldr	r1, [sp, #0]
 801498a:	4605      	mov	r5, r0
 801498c:	4630      	mov	r0, r6
 801498e:	f000 f881 	bl	8014a94 <_malloc_r>
 8014992:	b948      	cbnz	r0, 80149a8 <__smakebuf_r+0x44>
 8014994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014998:	059a      	lsls	r2, r3, #22
 801499a:	d4ef      	bmi.n	801497c <__smakebuf_r+0x18>
 801499c:	f023 0303 	bic.w	r3, r3, #3
 80149a0:	f043 0302 	orr.w	r3, r3, #2
 80149a4:	81a3      	strh	r3, [r4, #12]
 80149a6:	e7e3      	b.n	8014970 <__smakebuf_r+0xc>
 80149a8:	4b0d      	ldr	r3, [pc, #52]	; (80149e0 <__smakebuf_r+0x7c>)
 80149aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80149ac:	89a3      	ldrh	r3, [r4, #12]
 80149ae:	6020      	str	r0, [r4, #0]
 80149b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149b4:	81a3      	strh	r3, [r4, #12]
 80149b6:	9b00      	ldr	r3, [sp, #0]
 80149b8:	6163      	str	r3, [r4, #20]
 80149ba:	9b01      	ldr	r3, [sp, #4]
 80149bc:	6120      	str	r0, [r4, #16]
 80149be:	b15b      	cbz	r3, 80149d8 <__smakebuf_r+0x74>
 80149c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149c4:	4630      	mov	r0, r6
 80149c6:	f000 fd99 	bl	80154fc <_isatty_r>
 80149ca:	b128      	cbz	r0, 80149d8 <__smakebuf_r+0x74>
 80149cc:	89a3      	ldrh	r3, [r4, #12]
 80149ce:	f023 0303 	bic.w	r3, r3, #3
 80149d2:	f043 0301 	orr.w	r3, r3, #1
 80149d6:	81a3      	strh	r3, [r4, #12]
 80149d8:	89a0      	ldrh	r0, [r4, #12]
 80149da:	4305      	orrs	r5, r0
 80149dc:	81a5      	strh	r5, [r4, #12]
 80149de:	e7cd      	b.n	801497c <__smakebuf_r+0x18>
 80149e0:	08014751 	.word	0x08014751

080149e4 <malloc>:
 80149e4:	4b02      	ldr	r3, [pc, #8]	; (80149f0 <malloc+0xc>)
 80149e6:	4601      	mov	r1, r0
 80149e8:	6818      	ldr	r0, [r3, #0]
 80149ea:	f000 b853 	b.w	8014a94 <_malloc_r>
 80149ee:	bf00      	nop
 80149f0:	20000024 	.word	0x20000024

080149f4 <_free_r>:
 80149f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149f6:	2900      	cmp	r1, #0
 80149f8:	d048      	beq.n	8014a8c <_free_r+0x98>
 80149fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149fe:	9001      	str	r0, [sp, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	f1a1 0404 	sub.w	r4, r1, #4
 8014a06:	bfb8      	it	lt
 8014a08:	18e4      	addlt	r4, r4, r3
 8014a0a:	f000 fd99 	bl	8015540 <__malloc_lock>
 8014a0e:	4a20      	ldr	r2, [pc, #128]	; (8014a90 <_free_r+0x9c>)
 8014a10:	9801      	ldr	r0, [sp, #4]
 8014a12:	6813      	ldr	r3, [r2, #0]
 8014a14:	4615      	mov	r5, r2
 8014a16:	b933      	cbnz	r3, 8014a26 <_free_r+0x32>
 8014a18:	6063      	str	r3, [r4, #4]
 8014a1a:	6014      	str	r4, [r2, #0]
 8014a1c:	b003      	add	sp, #12
 8014a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a22:	f000 bd93 	b.w	801554c <__malloc_unlock>
 8014a26:	42a3      	cmp	r3, r4
 8014a28:	d90b      	bls.n	8014a42 <_free_r+0x4e>
 8014a2a:	6821      	ldr	r1, [r4, #0]
 8014a2c:	1862      	adds	r2, r4, r1
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	bf04      	itt	eq
 8014a32:	681a      	ldreq	r2, [r3, #0]
 8014a34:	685b      	ldreq	r3, [r3, #4]
 8014a36:	6063      	str	r3, [r4, #4]
 8014a38:	bf04      	itt	eq
 8014a3a:	1852      	addeq	r2, r2, r1
 8014a3c:	6022      	streq	r2, [r4, #0]
 8014a3e:	602c      	str	r4, [r5, #0]
 8014a40:	e7ec      	b.n	8014a1c <_free_r+0x28>
 8014a42:	461a      	mov	r2, r3
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	b10b      	cbz	r3, 8014a4c <_free_r+0x58>
 8014a48:	42a3      	cmp	r3, r4
 8014a4a:	d9fa      	bls.n	8014a42 <_free_r+0x4e>
 8014a4c:	6811      	ldr	r1, [r2, #0]
 8014a4e:	1855      	adds	r5, r2, r1
 8014a50:	42a5      	cmp	r5, r4
 8014a52:	d10b      	bne.n	8014a6c <_free_r+0x78>
 8014a54:	6824      	ldr	r4, [r4, #0]
 8014a56:	4421      	add	r1, r4
 8014a58:	1854      	adds	r4, r2, r1
 8014a5a:	42a3      	cmp	r3, r4
 8014a5c:	6011      	str	r1, [r2, #0]
 8014a5e:	d1dd      	bne.n	8014a1c <_free_r+0x28>
 8014a60:	681c      	ldr	r4, [r3, #0]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	6053      	str	r3, [r2, #4]
 8014a66:	4421      	add	r1, r4
 8014a68:	6011      	str	r1, [r2, #0]
 8014a6a:	e7d7      	b.n	8014a1c <_free_r+0x28>
 8014a6c:	d902      	bls.n	8014a74 <_free_r+0x80>
 8014a6e:	230c      	movs	r3, #12
 8014a70:	6003      	str	r3, [r0, #0]
 8014a72:	e7d3      	b.n	8014a1c <_free_r+0x28>
 8014a74:	6825      	ldr	r5, [r4, #0]
 8014a76:	1961      	adds	r1, r4, r5
 8014a78:	428b      	cmp	r3, r1
 8014a7a:	bf04      	itt	eq
 8014a7c:	6819      	ldreq	r1, [r3, #0]
 8014a7e:	685b      	ldreq	r3, [r3, #4]
 8014a80:	6063      	str	r3, [r4, #4]
 8014a82:	bf04      	itt	eq
 8014a84:	1949      	addeq	r1, r1, r5
 8014a86:	6021      	streq	r1, [r4, #0]
 8014a88:	6054      	str	r4, [r2, #4]
 8014a8a:	e7c7      	b.n	8014a1c <_free_r+0x28>
 8014a8c:	b003      	add	sp, #12
 8014a8e:	bd30      	pop	{r4, r5, pc}
 8014a90:	2000068c 	.word	0x2000068c

08014a94 <_malloc_r>:
 8014a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a96:	1ccd      	adds	r5, r1, #3
 8014a98:	f025 0503 	bic.w	r5, r5, #3
 8014a9c:	3508      	adds	r5, #8
 8014a9e:	2d0c      	cmp	r5, #12
 8014aa0:	bf38      	it	cc
 8014aa2:	250c      	movcc	r5, #12
 8014aa4:	2d00      	cmp	r5, #0
 8014aa6:	4606      	mov	r6, r0
 8014aa8:	db01      	blt.n	8014aae <_malloc_r+0x1a>
 8014aaa:	42a9      	cmp	r1, r5
 8014aac:	d903      	bls.n	8014ab6 <_malloc_r+0x22>
 8014aae:	230c      	movs	r3, #12
 8014ab0:	6033      	str	r3, [r6, #0]
 8014ab2:	2000      	movs	r0, #0
 8014ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ab6:	f000 fd43 	bl	8015540 <__malloc_lock>
 8014aba:	4921      	ldr	r1, [pc, #132]	; (8014b40 <_malloc_r+0xac>)
 8014abc:	680a      	ldr	r2, [r1, #0]
 8014abe:	4614      	mov	r4, r2
 8014ac0:	b99c      	cbnz	r4, 8014aea <_malloc_r+0x56>
 8014ac2:	4f20      	ldr	r7, [pc, #128]	; (8014b44 <_malloc_r+0xb0>)
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	b923      	cbnz	r3, 8014ad2 <_malloc_r+0x3e>
 8014ac8:	4621      	mov	r1, r4
 8014aca:	4630      	mov	r0, r6
 8014acc:	f000 fc86 	bl	80153dc <_sbrk_r>
 8014ad0:	6038      	str	r0, [r7, #0]
 8014ad2:	4629      	mov	r1, r5
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f000 fc81 	bl	80153dc <_sbrk_r>
 8014ada:	1c43      	adds	r3, r0, #1
 8014adc:	d123      	bne.n	8014b26 <_malloc_r+0x92>
 8014ade:	230c      	movs	r3, #12
 8014ae0:	6033      	str	r3, [r6, #0]
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f000 fd32 	bl	801554c <__malloc_unlock>
 8014ae8:	e7e3      	b.n	8014ab2 <_malloc_r+0x1e>
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	1b5b      	subs	r3, r3, r5
 8014aee:	d417      	bmi.n	8014b20 <_malloc_r+0x8c>
 8014af0:	2b0b      	cmp	r3, #11
 8014af2:	d903      	bls.n	8014afc <_malloc_r+0x68>
 8014af4:	6023      	str	r3, [r4, #0]
 8014af6:	441c      	add	r4, r3
 8014af8:	6025      	str	r5, [r4, #0]
 8014afa:	e004      	b.n	8014b06 <_malloc_r+0x72>
 8014afc:	6863      	ldr	r3, [r4, #4]
 8014afe:	42a2      	cmp	r2, r4
 8014b00:	bf0c      	ite	eq
 8014b02:	600b      	streq	r3, [r1, #0]
 8014b04:	6053      	strne	r3, [r2, #4]
 8014b06:	4630      	mov	r0, r6
 8014b08:	f000 fd20 	bl	801554c <__malloc_unlock>
 8014b0c:	f104 000b 	add.w	r0, r4, #11
 8014b10:	1d23      	adds	r3, r4, #4
 8014b12:	f020 0007 	bic.w	r0, r0, #7
 8014b16:	1ac2      	subs	r2, r0, r3
 8014b18:	d0cc      	beq.n	8014ab4 <_malloc_r+0x20>
 8014b1a:	1a1b      	subs	r3, r3, r0
 8014b1c:	50a3      	str	r3, [r4, r2]
 8014b1e:	e7c9      	b.n	8014ab4 <_malloc_r+0x20>
 8014b20:	4622      	mov	r2, r4
 8014b22:	6864      	ldr	r4, [r4, #4]
 8014b24:	e7cc      	b.n	8014ac0 <_malloc_r+0x2c>
 8014b26:	1cc4      	adds	r4, r0, #3
 8014b28:	f024 0403 	bic.w	r4, r4, #3
 8014b2c:	42a0      	cmp	r0, r4
 8014b2e:	d0e3      	beq.n	8014af8 <_malloc_r+0x64>
 8014b30:	1a21      	subs	r1, r4, r0
 8014b32:	4630      	mov	r0, r6
 8014b34:	f000 fc52 	bl	80153dc <_sbrk_r>
 8014b38:	3001      	adds	r0, #1
 8014b3a:	d1dd      	bne.n	8014af8 <_malloc_r+0x64>
 8014b3c:	e7cf      	b.n	8014ade <_malloc_r+0x4a>
 8014b3e:	bf00      	nop
 8014b40:	2000068c 	.word	0x2000068c
 8014b44:	20000690 	.word	0x20000690

08014b48 <__ssputs_r>:
 8014b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b4c:	688e      	ldr	r6, [r1, #8]
 8014b4e:	429e      	cmp	r6, r3
 8014b50:	4682      	mov	sl, r0
 8014b52:	460c      	mov	r4, r1
 8014b54:	4690      	mov	r8, r2
 8014b56:	461f      	mov	r7, r3
 8014b58:	d838      	bhi.n	8014bcc <__ssputs_r+0x84>
 8014b5a:	898a      	ldrh	r2, [r1, #12]
 8014b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014b60:	d032      	beq.n	8014bc8 <__ssputs_r+0x80>
 8014b62:	6825      	ldr	r5, [r4, #0]
 8014b64:	6909      	ldr	r1, [r1, #16]
 8014b66:	eba5 0901 	sub.w	r9, r5, r1
 8014b6a:	6965      	ldr	r5, [r4, #20]
 8014b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014b74:	3301      	adds	r3, #1
 8014b76:	444b      	add	r3, r9
 8014b78:	106d      	asrs	r5, r5, #1
 8014b7a:	429d      	cmp	r5, r3
 8014b7c:	bf38      	it	cc
 8014b7e:	461d      	movcc	r5, r3
 8014b80:	0553      	lsls	r3, r2, #21
 8014b82:	d531      	bpl.n	8014be8 <__ssputs_r+0xa0>
 8014b84:	4629      	mov	r1, r5
 8014b86:	f7ff ff85 	bl	8014a94 <_malloc_r>
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	b950      	cbnz	r0, 8014ba4 <__ssputs_r+0x5c>
 8014b8e:	230c      	movs	r3, #12
 8014b90:	f8ca 3000 	str.w	r3, [sl]
 8014b94:	89a3      	ldrh	r3, [r4, #12]
 8014b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b9a:	81a3      	strh	r3, [r4, #12]
 8014b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ba4:	6921      	ldr	r1, [r4, #16]
 8014ba6:	464a      	mov	r2, r9
 8014ba8:	f7ff fad0 	bl	801414c <memcpy>
 8014bac:	89a3      	ldrh	r3, [r4, #12]
 8014bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bb6:	81a3      	strh	r3, [r4, #12]
 8014bb8:	6126      	str	r6, [r4, #16]
 8014bba:	6165      	str	r5, [r4, #20]
 8014bbc:	444e      	add	r6, r9
 8014bbe:	eba5 0509 	sub.w	r5, r5, r9
 8014bc2:	6026      	str	r6, [r4, #0]
 8014bc4:	60a5      	str	r5, [r4, #8]
 8014bc6:	463e      	mov	r6, r7
 8014bc8:	42be      	cmp	r6, r7
 8014bca:	d900      	bls.n	8014bce <__ssputs_r+0x86>
 8014bcc:	463e      	mov	r6, r7
 8014bce:	4632      	mov	r2, r6
 8014bd0:	6820      	ldr	r0, [r4, #0]
 8014bd2:	4641      	mov	r1, r8
 8014bd4:	f7ff fac8 	bl	8014168 <memmove>
 8014bd8:	68a3      	ldr	r3, [r4, #8]
 8014bda:	6822      	ldr	r2, [r4, #0]
 8014bdc:	1b9b      	subs	r3, r3, r6
 8014bde:	4432      	add	r2, r6
 8014be0:	60a3      	str	r3, [r4, #8]
 8014be2:	6022      	str	r2, [r4, #0]
 8014be4:	2000      	movs	r0, #0
 8014be6:	e7db      	b.n	8014ba0 <__ssputs_r+0x58>
 8014be8:	462a      	mov	r2, r5
 8014bea:	f000 fcb5 	bl	8015558 <_realloc_r>
 8014bee:	4606      	mov	r6, r0
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d1e1      	bne.n	8014bb8 <__ssputs_r+0x70>
 8014bf4:	6921      	ldr	r1, [r4, #16]
 8014bf6:	4650      	mov	r0, sl
 8014bf8:	f7ff fefc 	bl	80149f4 <_free_r>
 8014bfc:	e7c7      	b.n	8014b8e <__ssputs_r+0x46>
	...

08014c00 <_svfiprintf_r>:
 8014c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c04:	4698      	mov	r8, r3
 8014c06:	898b      	ldrh	r3, [r1, #12]
 8014c08:	061b      	lsls	r3, r3, #24
 8014c0a:	b09d      	sub	sp, #116	; 0x74
 8014c0c:	4607      	mov	r7, r0
 8014c0e:	460d      	mov	r5, r1
 8014c10:	4614      	mov	r4, r2
 8014c12:	d50e      	bpl.n	8014c32 <_svfiprintf_r+0x32>
 8014c14:	690b      	ldr	r3, [r1, #16]
 8014c16:	b963      	cbnz	r3, 8014c32 <_svfiprintf_r+0x32>
 8014c18:	2140      	movs	r1, #64	; 0x40
 8014c1a:	f7ff ff3b 	bl	8014a94 <_malloc_r>
 8014c1e:	6028      	str	r0, [r5, #0]
 8014c20:	6128      	str	r0, [r5, #16]
 8014c22:	b920      	cbnz	r0, 8014c2e <_svfiprintf_r+0x2e>
 8014c24:	230c      	movs	r3, #12
 8014c26:	603b      	str	r3, [r7, #0]
 8014c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c2c:	e0d1      	b.n	8014dd2 <_svfiprintf_r+0x1d2>
 8014c2e:	2340      	movs	r3, #64	; 0x40
 8014c30:	616b      	str	r3, [r5, #20]
 8014c32:	2300      	movs	r3, #0
 8014c34:	9309      	str	r3, [sp, #36]	; 0x24
 8014c36:	2320      	movs	r3, #32
 8014c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c40:	2330      	movs	r3, #48	; 0x30
 8014c42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014dec <_svfiprintf_r+0x1ec>
 8014c46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c4a:	f04f 0901 	mov.w	r9, #1
 8014c4e:	4623      	mov	r3, r4
 8014c50:	469a      	mov	sl, r3
 8014c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c56:	b10a      	cbz	r2, 8014c5c <_svfiprintf_r+0x5c>
 8014c58:	2a25      	cmp	r2, #37	; 0x25
 8014c5a:	d1f9      	bne.n	8014c50 <_svfiprintf_r+0x50>
 8014c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8014c60:	d00b      	beq.n	8014c7a <_svfiprintf_r+0x7a>
 8014c62:	465b      	mov	r3, fp
 8014c64:	4622      	mov	r2, r4
 8014c66:	4629      	mov	r1, r5
 8014c68:	4638      	mov	r0, r7
 8014c6a:	f7ff ff6d 	bl	8014b48 <__ssputs_r>
 8014c6e:	3001      	adds	r0, #1
 8014c70:	f000 80aa 	beq.w	8014dc8 <_svfiprintf_r+0x1c8>
 8014c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c76:	445a      	add	r2, fp
 8014c78:	9209      	str	r2, [sp, #36]	; 0x24
 8014c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	f000 80a2 	beq.w	8014dc8 <_svfiprintf_r+0x1c8>
 8014c84:	2300      	movs	r3, #0
 8014c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c8e:	f10a 0a01 	add.w	sl, sl, #1
 8014c92:	9304      	str	r3, [sp, #16]
 8014c94:	9307      	str	r3, [sp, #28]
 8014c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8014c9c:	4654      	mov	r4, sl
 8014c9e:	2205      	movs	r2, #5
 8014ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ca4:	4851      	ldr	r0, [pc, #324]	; (8014dec <_svfiprintf_r+0x1ec>)
 8014ca6:	f7eb fae3 	bl	8000270 <memchr>
 8014caa:	9a04      	ldr	r2, [sp, #16]
 8014cac:	b9d8      	cbnz	r0, 8014ce6 <_svfiprintf_r+0xe6>
 8014cae:	06d0      	lsls	r0, r2, #27
 8014cb0:	bf44      	itt	mi
 8014cb2:	2320      	movmi	r3, #32
 8014cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cb8:	0711      	lsls	r1, r2, #28
 8014cba:	bf44      	itt	mi
 8014cbc:	232b      	movmi	r3, #43	; 0x2b
 8014cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8014cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8014cc8:	d015      	beq.n	8014cf6 <_svfiprintf_r+0xf6>
 8014cca:	9a07      	ldr	r2, [sp, #28]
 8014ccc:	4654      	mov	r4, sl
 8014cce:	2000      	movs	r0, #0
 8014cd0:	f04f 0c0a 	mov.w	ip, #10
 8014cd4:	4621      	mov	r1, r4
 8014cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cda:	3b30      	subs	r3, #48	; 0x30
 8014cdc:	2b09      	cmp	r3, #9
 8014cde:	d94e      	bls.n	8014d7e <_svfiprintf_r+0x17e>
 8014ce0:	b1b0      	cbz	r0, 8014d10 <_svfiprintf_r+0x110>
 8014ce2:	9207      	str	r2, [sp, #28]
 8014ce4:	e014      	b.n	8014d10 <_svfiprintf_r+0x110>
 8014ce6:	eba0 0308 	sub.w	r3, r0, r8
 8014cea:	fa09 f303 	lsl.w	r3, r9, r3
 8014cee:	4313      	orrs	r3, r2
 8014cf0:	9304      	str	r3, [sp, #16]
 8014cf2:	46a2      	mov	sl, r4
 8014cf4:	e7d2      	b.n	8014c9c <_svfiprintf_r+0x9c>
 8014cf6:	9b03      	ldr	r3, [sp, #12]
 8014cf8:	1d19      	adds	r1, r3, #4
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	9103      	str	r1, [sp, #12]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	bfbb      	ittet	lt
 8014d02:	425b      	neglt	r3, r3
 8014d04:	f042 0202 	orrlt.w	r2, r2, #2
 8014d08:	9307      	strge	r3, [sp, #28]
 8014d0a:	9307      	strlt	r3, [sp, #28]
 8014d0c:	bfb8      	it	lt
 8014d0e:	9204      	strlt	r2, [sp, #16]
 8014d10:	7823      	ldrb	r3, [r4, #0]
 8014d12:	2b2e      	cmp	r3, #46	; 0x2e
 8014d14:	d10c      	bne.n	8014d30 <_svfiprintf_r+0x130>
 8014d16:	7863      	ldrb	r3, [r4, #1]
 8014d18:	2b2a      	cmp	r3, #42	; 0x2a
 8014d1a:	d135      	bne.n	8014d88 <_svfiprintf_r+0x188>
 8014d1c:	9b03      	ldr	r3, [sp, #12]
 8014d1e:	1d1a      	adds	r2, r3, #4
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	9203      	str	r2, [sp, #12]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	bfb8      	it	lt
 8014d28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014d2c:	3402      	adds	r4, #2
 8014d2e:	9305      	str	r3, [sp, #20]
 8014d30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014dfc <_svfiprintf_r+0x1fc>
 8014d34:	7821      	ldrb	r1, [r4, #0]
 8014d36:	2203      	movs	r2, #3
 8014d38:	4650      	mov	r0, sl
 8014d3a:	f7eb fa99 	bl	8000270 <memchr>
 8014d3e:	b140      	cbz	r0, 8014d52 <_svfiprintf_r+0x152>
 8014d40:	2340      	movs	r3, #64	; 0x40
 8014d42:	eba0 000a 	sub.w	r0, r0, sl
 8014d46:	fa03 f000 	lsl.w	r0, r3, r0
 8014d4a:	9b04      	ldr	r3, [sp, #16]
 8014d4c:	4303      	orrs	r3, r0
 8014d4e:	3401      	adds	r4, #1
 8014d50:	9304      	str	r3, [sp, #16]
 8014d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d56:	4826      	ldr	r0, [pc, #152]	; (8014df0 <_svfiprintf_r+0x1f0>)
 8014d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d5c:	2206      	movs	r2, #6
 8014d5e:	f7eb fa87 	bl	8000270 <memchr>
 8014d62:	2800      	cmp	r0, #0
 8014d64:	d038      	beq.n	8014dd8 <_svfiprintf_r+0x1d8>
 8014d66:	4b23      	ldr	r3, [pc, #140]	; (8014df4 <_svfiprintf_r+0x1f4>)
 8014d68:	bb1b      	cbnz	r3, 8014db2 <_svfiprintf_r+0x1b2>
 8014d6a:	9b03      	ldr	r3, [sp, #12]
 8014d6c:	3307      	adds	r3, #7
 8014d6e:	f023 0307 	bic.w	r3, r3, #7
 8014d72:	3308      	adds	r3, #8
 8014d74:	9303      	str	r3, [sp, #12]
 8014d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d78:	4433      	add	r3, r6
 8014d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8014d7c:	e767      	b.n	8014c4e <_svfiprintf_r+0x4e>
 8014d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d82:	460c      	mov	r4, r1
 8014d84:	2001      	movs	r0, #1
 8014d86:	e7a5      	b.n	8014cd4 <_svfiprintf_r+0xd4>
 8014d88:	2300      	movs	r3, #0
 8014d8a:	3401      	adds	r4, #1
 8014d8c:	9305      	str	r3, [sp, #20]
 8014d8e:	4619      	mov	r1, r3
 8014d90:	f04f 0c0a 	mov.w	ip, #10
 8014d94:	4620      	mov	r0, r4
 8014d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d9a:	3a30      	subs	r2, #48	; 0x30
 8014d9c:	2a09      	cmp	r2, #9
 8014d9e:	d903      	bls.n	8014da8 <_svfiprintf_r+0x1a8>
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d0c5      	beq.n	8014d30 <_svfiprintf_r+0x130>
 8014da4:	9105      	str	r1, [sp, #20]
 8014da6:	e7c3      	b.n	8014d30 <_svfiprintf_r+0x130>
 8014da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8014dac:	4604      	mov	r4, r0
 8014dae:	2301      	movs	r3, #1
 8014db0:	e7f0      	b.n	8014d94 <_svfiprintf_r+0x194>
 8014db2:	ab03      	add	r3, sp, #12
 8014db4:	9300      	str	r3, [sp, #0]
 8014db6:	462a      	mov	r2, r5
 8014db8:	4b0f      	ldr	r3, [pc, #60]	; (8014df8 <_svfiprintf_r+0x1f8>)
 8014dba:	a904      	add	r1, sp, #16
 8014dbc:	4638      	mov	r0, r7
 8014dbe:	f3af 8000 	nop.w
 8014dc2:	1c42      	adds	r2, r0, #1
 8014dc4:	4606      	mov	r6, r0
 8014dc6:	d1d6      	bne.n	8014d76 <_svfiprintf_r+0x176>
 8014dc8:	89ab      	ldrh	r3, [r5, #12]
 8014dca:	065b      	lsls	r3, r3, #25
 8014dcc:	f53f af2c 	bmi.w	8014c28 <_svfiprintf_r+0x28>
 8014dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014dd2:	b01d      	add	sp, #116	; 0x74
 8014dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd8:	ab03      	add	r3, sp, #12
 8014dda:	9300      	str	r3, [sp, #0]
 8014ddc:	462a      	mov	r2, r5
 8014dde:	4b06      	ldr	r3, [pc, #24]	; (8014df8 <_svfiprintf_r+0x1f8>)
 8014de0:	a904      	add	r1, sp, #16
 8014de2:	4638      	mov	r0, r7
 8014de4:	f000 f9d4 	bl	8015190 <_printf_i>
 8014de8:	e7eb      	b.n	8014dc2 <_svfiprintf_r+0x1c2>
 8014dea:	bf00      	nop
 8014dec:	08041b94 	.word	0x08041b94
 8014df0:	08041b9e 	.word	0x08041b9e
 8014df4:	00000000 	.word	0x00000000
 8014df8:	08014b49 	.word	0x08014b49
 8014dfc:	08041b9a 	.word	0x08041b9a

08014e00 <__sfputc_r>:
 8014e00:	6893      	ldr	r3, [r2, #8]
 8014e02:	3b01      	subs	r3, #1
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	b410      	push	{r4}
 8014e08:	6093      	str	r3, [r2, #8]
 8014e0a:	da08      	bge.n	8014e1e <__sfputc_r+0x1e>
 8014e0c:	6994      	ldr	r4, [r2, #24]
 8014e0e:	42a3      	cmp	r3, r4
 8014e10:	db01      	blt.n	8014e16 <__sfputc_r+0x16>
 8014e12:	290a      	cmp	r1, #10
 8014e14:	d103      	bne.n	8014e1e <__sfputc_r+0x1e>
 8014e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e1a:	f7ff bad5 	b.w	80143c8 <__swbuf_r>
 8014e1e:	6813      	ldr	r3, [r2, #0]
 8014e20:	1c58      	adds	r0, r3, #1
 8014e22:	6010      	str	r0, [r2, #0]
 8014e24:	7019      	strb	r1, [r3, #0]
 8014e26:	4608      	mov	r0, r1
 8014e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e2c:	4770      	bx	lr

08014e2e <__sfputs_r>:
 8014e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e30:	4606      	mov	r6, r0
 8014e32:	460f      	mov	r7, r1
 8014e34:	4614      	mov	r4, r2
 8014e36:	18d5      	adds	r5, r2, r3
 8014e38:	42ac      	cmp	r4, r5
 8014e3a:	d101      	bne.n	8014e40 <__sfputs_r+0x12>
 8014e3c:	2000      	movs	r0, #0
 8014e3e:	e007      	b.n	8014e50 <__sfputs_r+0x22>
 8014e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e44:	463a      	mov	r2, r7
 8014e46:	4630      	mov	r0, r6
 8014e48:	f7ff ffda 	bl	8014e00 <__sfputc_r>
 8014e4c:	1c43      	adds	r3, r0, #1
 8014e4e:	d1f3      	bne.n	8014e38 <__sfputs_r+0xa>
 8014e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e54 <_vfiprintf_r>:
 8014e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e58:	460d      	mov	r5, r1
 8014e5a:	b09d      	sub	sp, #116	; 0x74
 8014e5c:	4614      	mov	r4, r2
 8014e5e:	4698      	mov	r8, r3
 8014e60:	4606      	mov	r6, r0
 8014e62:	b118      	cbz	r0, 8014e6c <_vfiprintf_r+0x18>
 8014e64:	6983      	ldr	r3, [r0, #24]
 8014e66:	b90b      	cbnz	r3, 8014e6c <_vfiprintf_r+0x18>
 8014e68:	f7ff fca6 	bl	80147b8 <__sinit>
 8014e6c:	4b89      	ldr	r3, [pc, #548]	; (8015094 <_vfiprintf_r+0x240>)
 8014e6e:	429d      	cmp	r5, r3
 8014e70:	d11b      	bne.n	8014eaa <_vfiprintf_r+0x56>
 8014e72:	6875      	ldr	r5, [r6, #4]
 8014e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e76:	07d9      	lsls	r1, r3, #31
 8014e78:	d405      	bmi.n	8014e86 <_vfiprintf_r+0x32>
 8014e7a:	89ab      	ldrh	r3, [r5, #12]
 8014e7c:	059a      	lsls	r2, r3, #22
 8014e7e:	d402      	bmi.n	8014e86 <_vfiprintf_r+0x32>
 8014e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e82:	f7ff fd49 	bl	8014918 <__retarget_lock_acquire_recursive>
 8014e86:	89ab      	ldrh	r3, [r5, #12]
 8014e88:	071b      	lsls	r3, r3, #28
 8014e8a:	d501      	bpl.n	8014e90 <_vfiprintf_r+0x3c>
 8014e8c:	692b      	ldr	r3, [r5, #16]
 8014e8e:	b9eb      	cbnz	r3, 8014ecc <_vfiprintf_r+0x78>
 8014e90:	4629      	mov	r1, r5
 8014e92:	4630      	mov	r0, r6
 8014e94:	f7ff faea 	bl	801446c <__swsetup_r>
 8014e98:	b1c0      	cbz	r0, 8014ecc <_vfiprintf_r+0x78>
 8014e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e9c:	07dc      	lsls	r4, r3, #31
 8014e9e:	d50e      	bpl.n	8014ebe <_vfiprintf_r+0x6a>
 8014ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ea4:	b01d      	add	sp, #116	; 0x74
 8014ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eaa:	4b7b      	ldr	r3, [pc, #492]	; (8015098 <_vfiprintf_r+0x244>)
 8014eac:	429d      	cmp	r5, r3
 8014eae:	d101      	bne.n	8014eb4 <_vfiprintf_r+0x60>
 8014eb0:	68b5      	ldr	r5, [r6, #8]
 8014eb2:	e7df      	b.n	8014e74 <_vfiprintf_r+0x20>
 8014eb4:	4b79      	ldr	r3, [pc, #484]	; (801509c <_vfiprintf_r+0x248>)
 8014eb6:	429d      	cmp	r5, r3
 8014eb8:	bf08      	it	eq
 8014eba:	68f5      	ldreq	r5, [r6, #12]
 8014ebc:	e7da      	b.n	8014e74 <_vfiprintf_r+0x20>
 8014ebe:	89ab      	ldrh	r3, [r5, #12]
 8014ec0:	0598      	lsls	r0, r3, #22
 8014ec2:	d4ed      	bmi.n	8014ea0 <_vfiprintf_r+0x4c>
 8014ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ec6:	f7ff fd28 	bl	801491a <__retarget_lock_release_recursive>
 8014eca:	e7e9      	b.n	8014ea0 <_vfiprintf_r+0x4c>
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9309      	str	r3, [sp, #36]	; 0x24
 8014ed0:	2320      	movs	r3, #32
 8014ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014eda:	2330      	movs	r3, #48	; 0x30
 8014edc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80150a0 <_vfiprintf_r+0x24c>
 8014ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ee4:	f04f 0901 	mov.w	r9, #1
 8014ee8:	4623      	mov	r3, r4
 8014eea:	469a      	mov	sl, r3
 8014eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ef0:	b10a      	cbz	r2, 8014ef6 <_vfiprintf_r+0xa2>
 8014ef2:	2a25      	cmp	r2, #37	; 0x25
 8014ef4:	d1f9      	bne.n	8014eea <_vfiprintf_r+0x96>
 8014ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8014efa:	d00b      	beq.n	8014f14 <_vfiprintf_r+0xc0>
 8014efc:	465b      	mov	r3, fp
 8014efe:	4622      	mov	r2, r4
 8014f00:	4629      	mov	r1, r5
 8014f02:	4630      	mov	r0, r6
 8014f04:	f7ff ff93 	bl	8014e2e <__sfputs_r>
 8014f08:	3001      	adds	r0, #1
 8014f0a:	f000 80aa 	beq.w	8015062 <_vfiprintf_r+0x20e>
 8014f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f10:	445a      	add	r2, fp
 8014f12:	9209      	str	r2, [sp, #36]	; 0x24
 8014f14:	f89a 3000 	ldrb.w	r3, [sl]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	f000 80a2 	beq.w	8015062 <_vfiprintf_r+0x20e>
 8014f1e:	2300      	movs	r3, #0
 8014f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f28:	f10a 0a01 	add.w	sl, sl, #1
 8014f2c:	9304      	str	r3, [sp, #16]
 8014f2e:	9307      	str	r3, [sp, #28]
 8014f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f34:	931a      	str	r3, [sp, #104]	; 0x68
 8014f36:	4654      	mov	r4, sl
 8014f38:	2205      	movs	r2, #5
 8014f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f3e:	4858      	ldr	r0, [pc, #352]	; (80150a0 <_vfiprintf_r+0x24c>)
 8014f40:	f7eb f996 	bl	8000270 <memchr>
 8014f44:	9a04      	ldr	r2, [sp, #16]
 8014f46:	b9d8      	cbnz	r0, 8014f80 <_vfiprintf_r+0x12c>
 8014f48:	06d1      	lsls	r1, r2, #27
 8014f4a:	bf44      	itt	mi
 8014f4c:	2320      	movmi	r3, #32
 8014f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f52:	0713      	lsls	r3, r2, #28
 8014f54:	bf44      	itt	mi
 8014f56:	232b      	movmi	r3, #43	; 0x2b
 8014f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8014f60:	2b2a      	cmp	r3, #42	; 0x2a
 8014f62:	d015      	beq.n	8014f90 <_vfiprintf_r+0x13c>
 8014f64:	9a07      	ldr	r2, [sp, #28]
 8014f66:	4654      	mov	r4, sl
 8014f68:	2000      	movs	r0, #0
 8014f6a:	f04f 0c0a 	mov.w	ip, #10
 8014f6e:	4621      	mov	r1, r4
 8014f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f74:	3b30      	subs	r3, #48	; 0x30
 8014f76:	2b09      	cmp	r3, #9
 8014f78:	d94e      	bls.n	8015018 <_vfiprintf_r+0x1c4>
 8014f7a:	b1b0      	cbz	r0, 8014faa <_vfiprintf_r+0x156>
 8014f7c:	9207      	str	r2, [sp, #28]
 8014f7e:	e014      	b.n	8014faa <_vfiprintf_r+0x156>
 8014f80:	eba0 0308 	sub.w	r3, r0, r8
 8014f84:	fa09 f303 	lsl.w	r3, r9, r3
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	9304      	str	r3, [sp, #16]
 8014f8c:	46a2      	mov	sl, r4
 8014f8e:	e7d2      	b.n	8014f36 <_vfiprintf_r+0xe2>
 8014f90:	9b03      	ldr	r3, [sp, #12]
 8014f92:	1d19      	adds	r1, r3, #4
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	9103      	str	r1, [sp, #12]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	bfbb      	ittet	lt
 8014f9c:	425b      	neglt	r3, r3
 8014f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8014fa2:	9307      	strge	r3, [sp, #28]
 8014fa4:	9307      	strlt	r3, [sp, #28]
 8014fa6:	bfb8      	it	lt
 8014fa8:	9204      	strlt	r2, [sp, #16]
 8014faa:	7823      	ldrb	r3, [r4, #0]
 8014fac:	2b2e      	cmp	r3, #46	; 0x2e
 8014fae:	d10c      	bne.n	8014fca <_vfiprintf_r+0x176>
 8014fb0:	7863      	ldrb	r3, [r4, #1]
 8014fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8014fb4:	d135      	bne.n	8015022 <_vfiprintf_r+0x1ce>
 8014fb6:	9b03      	ldr	r3, [sp, #12]
 8014fb8:	1d1a      	adds	r2, r3, #4
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	9203      	str	r2, [sp, #12]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	bfb8      	it	lt
 8014fc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014fc6:	3402      	adds	r4, #2
 8014fc8:	9305      	str	r3, [sp, #20]
 8014fca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80150b0 <_vfiprintf_r+0x25c>
 8014fce:	7821      	ldrb	r1, [r4, #0]
 8014fd0:	2203      	movs	r2, #3
 8014fd2:	4650      	mov	r0, sl
 8014fd4:	f7eb f94c 	bl	8000270 <memchr>
 8014fd8:	b140      	cbz	r0, 8014fec <_vfiprintf_r+0x198>
 8014fda:	2340      	movs	r3, #64	; 0x40
 8014fdc:	eba0 000a 	sub.w	r0, r0, sl
 8014fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8014fe4:	9b04      	ldr	r3, [sp, #16]
 8014fe6:	4303      	orrs	r3, r0
 8014fe8:	3401      	adds	r4, #1
 8014fea:	9304      	str	r3, [sp, #16]
 8014fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ff0:	482c      	ldr	r0, [pc, #176]	; (80150a4 <_vfiprintf_r+0x250>)
 8014ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ff6:	2206      	movs	r2, #6
 8014ff8:	f7eb f93a 	bl	8000270 <memchr>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d03f      	beq.n	8015080 <_vfiprintf_r+0x22c>
 8015000:	4b29      	ldr	r3, [pc, #164]	; (80150a8 <_vfiprintf_r+0x254>)
 8015002:	bb1b      	cbnz	r3, 801504c <_vfiprintf_r+0x1f8>
 8015004:	9b03      	ldr	r3, [sp, #12]
 8015006:	3307      	adds	r3, #7
 8015008:	f023 0307 	bic.w	r3, r3, #7
 801500c:	3308      	adds	r3, #8
 801500e:	9303      	str	r3, [sp, #12]
 8015010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015012:	443b      	add	r3, r7
 8015014:	9309      	str	r3, [sp, #36]	; 0x24
 8015016:	e767      	b.n	8014ee8 <_vfiprintf_r+0x94>
 8015018:	fb0c 3202 	mla	r2, ip, r2, r3
 801501c:	460c      	mov	r4, r1
 801501e:	2001      	movs	r0, #1
 8015020:	e7a5      	b.n	8014f6e <_vfiprintf_r+0x11a>
 8015022:	2300      	movs	r3, #0
 8015024:	3401      	adds	r4, #1
 8015026:	9305      	str	r3, [sp, #20]
 8015028:	4619      	mov	r1, r3
 801502a:	f04f 0c0a 	mov.w	ip, #10
 801502e:	4620      	mov	r0, r4
 8015030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015034:	3a30      	subs	r2, #48	; 0x30
 8015036:	2a09      	cmp	r2, #9
 8015038:	d903      	bls.n	8015042 <_vfiprintf_r+0x1ee>
 801503a:	2b00      	cmp	r3, #0
 801503c:	d0c5      	beq.n	8014fca <_vfiprintf_r+0x176>
 801503e:	9105      	str	r1, [sp, #20]
 8015040:	e7c3      	b.n	8014fca <_vfiprintf_r+0x176>
 8015042:	fb0c 2101 	mla	r1, ip, r1, r2
 8015046:	4604      	mov	r4, r0
 8015048:	2301      	movs	r3, #1
 801504a:	e7f0      	b.n	801502e <_vfiprintf_r+0x1da>
 801504c:	ab03      	add	r3, sp, #12
 801504e:	9300      	str	r3, [sp, #0]
 8015050:	462a      	mov	r2, r5
 8015052:	4b16      	ldr	r3, [pc, #88]	; (80150ac <_vfiprintf_r+0x258>)
 8015054:	a904      	add	r1, sp, #16
 8015056:	4630      	mov	r0, r6
 8015058:	f3af 8000 	nop.w
 801505c:	4607      	mov	r7, r0
 801505e:	1c78      	adds	r0, r7, #1
 8015060:	d1d6      	bne.n	8015010 <_vfiprintf_r+0x1bc>
 8015062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015064:	07d9      	lsls	r1, r3, #31
 8015066:	d405      	bmi.n	8015074 <_vfiprintf_r+0x220>
 8015068:	89ab      	ldrh	r3, [r5, #12]
 801506a:	059a      	lsls	r2, r3, #22
 801506c:	d402      	bmi.n	8015074 <_vfiprintf_r+0x220>
 801506e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015070:	f7ff fc53 	bl	801491a <__retarget_lock_release_recursive>
 8015074:	89ab      	ldrh	r3, [r5, #12]
 8015076:	065b      	lsls	r3, r3, #25
 8015078:	f53f af12 	bmi.w	8014ea0 <_vfiprintf_r+0x4c>
 801507c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801507e:	e711      	b.n	8014ea4 <_vfiprintf_r+0x50>
 8015080:	ab03      	add	r3, sp, #12
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	462a      	mov	r2, r5
 8015086:	4b09      	ldr	r3, [pc, #36]	; (80150ac <_vfiprintf_r+0x258>)
 8015088:	a904      	add	r1, sp, #16
 801508a:	4630      	mov	r0, r6
 801508c:	f000 f880 	bl	8015190 <_printf_i>
 8015090:	e7e4      	b.n	801505c <_vfiprintf_r+0x208>
 8015092:	bf00      	nop
 8015094:	08041b54 	.word	0x08041b54
 8015098:	08041b74 	.word	0x08041b74
 801509c:	08041b34 	.word	0x08041b34
 80150a0:	08041b94 	.word	0x08041b94
 80150a4:	08041b9e 	.word	0x08041b9e
 80150a8:	00000000 	.word	0x00000000
 80150ac:	08014e2f 	.word	0x08014e2f
 80150b0:	08041b9a 	.word	0x08041b9a

080150b4 <_printf_common>:
 80150b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150b8:	4616      	mov	r6, r2
 80150ba:	4699      	mov	r9, r3
 80150bc:	688a      	ldr	r2, [r1, #8]
 80150be:	690b      	ldr	r3, [r1, #16]
 80150c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80150c4:	4293      	cmp	r3, r2
 80150c6:	bfb8      	it	lt
 80150c8:	4613      	movlt	r3, r2
 80150ca:	6033      	str	r3, [r6, #0]
 80150cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80150d0:	4607      	mov	r7, r0
 80150d2:	460c      	mov	r4, r1
 80150d4:	b10a      	cbz	r2, 80150da <_printf_common+0x26>
 80150d6:	3301      	adds	r3, #1
 80150d8:	6033      	str	r3, [r6, #0]
 80150da:	6823      	ldr	r3, [r4, #0]
 80150dc:	0699      	lsls	r1, r3, #26
 80150de:	bf42      	ittt	mi
 80150e0:	6833      	ldrmi	r3, [r6, #0]
 80150e2:	3302      	addmi	r3, #2
 80150e4:	6033      	strmi	r3, [r6, #0]
 80150e6:	6825      	ldr	r5, [r4, #0]
 80150e8:	f015 0506 	ands.w	r5, r5, #6
 80150ec:	d106      	bne.n	80150fc <_printf_common+0x48>
 80150ee:	f104 0a19 	add.w	sl, r4, #25
 80150f2:	68e3      	ldr	r3, [r4, #12]
 80150f4:	6832      	ldr	r2, [r6, #0]
 80150f6:	1a9b      	subs	r3, r3, r2
 80150f8:	42ab      	cmp	r3, r5
 80150fa:	dc26      	bgt.n	801514a <_printf_common+0x96>
 80150fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015100:	1e13      	subs	r3, r2, #0
 8015102:	6822      	ldr	r2, [r4, #0]
 8015104:	bf18      	it	ne
 8015106:	2301      	movne	r3, #1
 8015108:	0692      	lsls	r2, r2, #26
 801510a:	d42b      	bmi.n	8015164 <_printf_common+0xb0>
 801510c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015110:	4649      	mov	r1, r9
 8015112:	4638      	mov	r0, r7
 8015114:	47c0      	blx	r8
 8015116:	3001      	adds	r0, #1
 8015118:	d01e      	beq.n	8015158 <_printf_common+0xa4>
 801511a:	6823      	ldr	r3, [r4, #0]
 801511c:	68e5      	ldr	r5, [r4, #12]
 801511e:	6832      	ldr	r2, [r6, #0]
 8015120:	f003 0306 	and.w	r3, r3, #6
 8015124:	2b04      	cmp	r3, #4
 8015126:	bf08      	it	eq
 8015128:	1aad      	subeq	r5, r5, r2
 801512a:	68a3      	ldr	r3, [r4, #8]
 801512c:	6922      	ldr	r2, [r4, #16]
 801512e:	bf0c      	ite	eq
 8015130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015134:	2500      	movne	r5, #0
 8015136:	4293      	cmp	r3, r2
 8015138:	bfc4      	itt	gt
 801513a:	1a9b      	subgt	r3, r3, r2
 801513c:	18ed      	addgt	r5, r5, r3
 801513e:	2600      	movs	r6, #0
 8015140:	341a      	adds	r4, #26
 8015142:	42b5      	cmp	r5, r6
 8015144:	d11a      	bne.n	801517c <_printf_common+0xc8>
 8015146:	2000      	movs	r0, #0
 8015148:	e008      	b.n	801515c <_printf_common+0xa8>
 801514a:	2301      	movs	r3, #1
 801514c:	4652      	mov	r2, sl
 801514e:	4649      	mov	r1, r9
 8015150:	4638      	mov	r0, r7
 8015152:	47c0      	blx	r8
 8015154:	3001      	adds	r0, #1
 8015156:	d103      	bne.n	8015160 <_printf_common+0xac>
 8015158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015160:	3501      	adds	r5, #1
 8015162:	e7c6      	b.n	80150f2 <_printf_common+0x3e>
 8015164:	18e1      	adds	r1, r4, r3
 8015166:	1c5a      	adds	r2, r3, #1
 8015168:	2030      	movs	r0, #48	; 0x30
 801516a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801516e:	4422      	add	r2, r4
 8015170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015178:	3302      	adds	r3, #2
 801517a:	e7c7      	b.n	801510c <_printf_common+0x58>
 801517c:	2301      	movs	r3, #1
 801517e:	4622      	mov	r2, r4
 8015180:	4649      	mov	r1, r9
 8015182:	4638      	mov	r0, r7
 8015184:	47c0      	blx	r8
 8015186:	3001      	adds	r0, #1
 8015188:	d0e6      	beq.n	8015158 <_printf_common+0xa4>
 801518a:	3601      	adds	r6, #1
 801518c:	e7d9      	b.n	8015142 <_printf_common+0x8e>
	...

08015190 <_printf_i>:
 8015190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015194:	460c      	mov	r4, r1
 8015196:	4691      	mov	r9, r2
 8015198:	7e27      	ldrb	r7, [r4, #24]
 801519a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801519c:	2f78      	cmp	r7, #120	; 0x78
 801519e:	4680      	mov	r8, r0
 80151a0:	469a      	mov	sl, r3
 80151a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80151a6:	d807      	bhi.n	80151b8 <_printf_i+0x28>
 80151a8:	2f62      	cmp	r7, #98	; 0x62
 80151aa:	d80a      	bhi.n	80151c2 <_printf_i+0x32>
 80151ac:	2f00      	cmp	r7, #0
 80151ae:	f000 80d8 	beq.w	8015362 <_printf_i+0x1d2>
 80151b2:	2f58      	cmp	r7, #88	; 0x58
 80151b4:	f000 80a3 	beq.w	80152fe <_printf_i+0x16e>
 80151b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80151bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80151c0:	e03a      	b.n	8015238 <_printf_i+0xa8>
 80151c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80151c6:	2b15      	cmp	r3, #21
 80151c8:	d8f6      	bhi.n	80151b8 <_printf_i+0x28>
 80151ca:	a001      	add	r0, pc, #4	; (adr r0, 80151d0 <_printf_i+0x40>)
 80151cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80151d0:	08015229 	.word	0x08015229
 80151d4:	0801523d 	.word	0x0801523d
 80151d8:	080151b9 	.word	0x080151b9
 80151dc:	080151b9 	.word	0x080151b9
 80151e0:	080151b9 	.word	0x080151b9
 80151e4:	080151b9 	.word	0x080151b9
 80151e8:	0801523d 	.word	0x0801523d
 80151ec:	080151b9 	.word	0x080151b9
 80151f0:	080151b9 	.word	0x080151b9
 80151f4:	080151b9 	.word	0x080151b9
 80151f8:	080151b9 	.word	0x080151b9
 80151fc:	08015349 	.word	0x08015349
 8015200:	0801526d 	.word	0x0801526d
 8015204:	0801532b 	.word	0x0801532b
 8015208:	080151b9 	.word	0x080151b9
 801520c:	080151b9 	.word	0x080151b9
 8015210:	0801536b 	.word	0x0801536b
 8015214:	080151b9 	.word	0x080151b9
 8015218:	0801526d 	.word	0x0801526d
 801521c:	080151b9 	.word	0x080151b9
 8015220:	080151b9 	.word	0x080151b9
 8015224:	08015333 	.word	0x08015333
 8015228:	680b      	ldr	r3, [r1, #0]
 801522a:	1d1a      	adds	r2, r3, #4
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	600a      	str	r2, [r1, #0]
 8015230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015238:	2301      	movs	r3, #1
 801523a:	e0a3      	b.n	8015384 <_printf_i+0x1f4>
 801523c:	6825      	ldr	r5, [r4, #0]
 801523e:	6808      	ldr	r0, [r1, #0]
 8015240:	062e      	lsls	r6, r5, #24
 8015242:	f100 0304 	add.w	r3, r0, #4
 8015246:	d50a      	bpl.n	801525e <_printf_i+0xce>
 8015248:	6805      	ldr	r5, [r0, #0]
 801524a:	600b      	str	r3, [r1, #0]
 801524c:	2d00      	cmp	r5, #0
 801524e:	da03      	bge.n	8015258 <_printf_i+0xc8>
 8015250:	232d      	movs	r3, #45	; 0x2d
 8015252:	426d      	negs	r5, r5
 8015254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015258:	485e      	ldr	r0, [pc, #376]	; (80153d4 <_printf_i+0x244>)
 801525a:	230a      	movs	r3, #10
 801525c:	e019      	b.n	8015292 <_printf_i+0x102>
 801525e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015262:	6805      	ldr	r5, [r0, #0]
 8015264:	600b      	str	r3, [r1, #0]
 8015266:	bf18      	it	ne
 8015268:	b22d      	sxthne	r5, r5
 801526a:	e7ef      	b.n	801524c <_printf_i+0xbc>
 801526c:	680b      	ldr	r3, [r1, #0]
 801526e:	6825      	ldr	r5, [r4, #0]
 8015270:	1d18      	adds	r0, r3, #4
 8015272:	6008      	str	r0, [r1, #0]
 8015274:	0628      	lsls	r0, r5, #24
 8015276:	d501      	bpl.n	801527c <_printf_i+0xec>
 8015278:	681d      	ldr	r5, [r3, #0]
 801527a:	e002      	b.n	8015282 <_printf_i+0xf2>
 801527c:	0669      	lsls	r1, r5, #25
 801527e:	d5fb      	bpl.n	8015278 <_printf_i+0xe8>
 8015280:	881d      	ldrh	r5, [r3, #0]
 8015282:	4854      	ldr	r0, [pc, #336]	; (80153d4 <_printf_i+0x244>)
 8015284:	2f6f      	cmp	r7, #111	; 0x6f
 8015286:	bf0c      	ite	eq
 8015288:	2308      	moveq	r3, #8
 801528a:	230a      	movne	r3, #10
 801528c:	2100      	movs	r1, #0
 801528e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015292:	6866      	ldr	r6, [r4, #4]
 8015294:	60a6      	str	r6, [r4, #8]
 8015296:	2e00      	cmp	r6, #0
 8015298:	bfa2      	ittt	ge
 801529a:	6821      	ldrge	r1, [r4, #0]
 801529c:	f021 0104 	bicge.w	r1, r1, #4
 80152a0:	6021      	strge	r1, [r4, #0]
 80152a2:	b90d      	cbnz	r5, 80152a8 <_printf_i+0x118>
 80152a4:	2e00      	cmp	r6, #0
 80152a6:	d04d      	beq.n	8015344 <_printf_i+0x1b4>
 80152a8:	4616      	mov	r6, r2
 80152aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80152ae:	fb03 5711 	mls	r7, r3, r1, r5
 80152b2:	5dc7      	ldrb	r7, [r0, r7]
 80152b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80152b8:	462f      	mov	r7, r5
 80152ba:	42bb      	cmp	r3, r7
 80152bc:	460d      	mov	r5, r1
 80152be:	d9f4      	bls.n	80152aa <_printf_i+0x11a>
 80152c0:	2b08      	cmp	r3, #8
 80152c2:	d10b      	bne.n	80152dc <_printf_i+0x14c>
 80152c4:	6823      	ldr	r3, [r4, #0]
 80152c6:	07df      	lsls	r7, r3, #31
 80152c8:	d508      	bpl.n	80152dc <_printf_i+0x14c>
 80152ca:	6923      	ldr	r3, [r4, #16]
 80152cc:	6861      	ldr	r1, [r4, #4]
 80152ce:	4299      	cmp	r1, r3
 80152d0:	bfde      	ittt	le
 80152d2:	2330      	movle	r3, #48	; 0x30
 80152d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80152d8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80152dc:	1b92      	subs	r2, r2, r6
 80152de:	6122      	str	r2, [r4, #16]
 80152e0:	f8cd a000 	str.w	sl, [sp]
 80152e4:	464b      	mov	r3, r9
 80152e6:	aa03      	add	r2, sp, #12
 80152e8:	4621      	mov	r1, r4
 80152ea:	4640      	mov	r0, r8
 80152ec:	f7ff fee2 	bl	80150b4 <_printf_common>
 80152f0:	3001      	adds	r0, #1
 80152f2:	d14c      	bne.n	801538e <_printf_i+0x1fe>
 80152f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152f8:	b004      	add	sp, #16
 80152fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152fe:	4835      	ldr	r0, [pc, #212]	; (80153d4 <_printf_i+0x244>)
 8015300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015304:	6823      	ldr	r3, [r4, #0]
 8015306:	680e      	ldr	r6, [r1, #0]
 8015308:	061f      	lsls	r7, r3, #24
 801530a:	f856 5b04 	ldr.w	r5, [r6], #4
 801530e:	600e      	str	r6, [r1, #0]
 8015310:	d514      	bpl.n	801533c <_printf_i+0x1ac>
 8015312:	07d9      	lsls	r1, r3, #31
 8015314:	bf44      	itt	mi
 8015316:	f043 0320 	orrmi.w	r3, r3, #32
 801531a:	6023      	strmi	r3, [r4, #0]
 801531c:	b91d      	cbnz	r5, 8015326 <_printf_i+0x196>
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	f023 0320 	bic.w	r3, r3, #32
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	2310      	movs	r3, #16
 8015328:	e7b0      	b.n	801528c <_printf_i+0xfc>
 801532a:	6823      	ldr	r3, [r4, #0]
 801532c:	f043 0320 	orr.w	r3, r3, #32
 8015330:	6023      	str	r3, [r4, #0]
 8015332:	2378      	movs	r3, #120	; 0x78
 8015334:	4828      	ldr	r0, [pc, #160]	; (80153d8 <_printf_i+0x248>)
 8015336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801533a:	e7e3      	b.n	8015304 <_printf_i+0x174>
 801533c:	065e      	lsls	r6, r3, #25
 801533e:	bf48      	it	mi
 8015340:	b2ad      	uxthmi	r5, r5
 8015342:	e7e6      	b.n	8015312 <_printf_i+0x182>
 8015344:	4616      	mov	r6, r2
 8015346:	e7bb      	b.n	80152c0 <_printf_i+0x130>
 8015348:	680b      	ldr	r3, [r1, #0]
 801534a:	6826      	ldr	r6, [r4, #0]
 801534c:	6960      	ldr	r0, [r4, #20]
 801534e:	1d1d      	adds	r5, r3, #4
 8015350:	600d      	str	r5, [r1, #0]
 8015352:	0635      	lsls	r5, r6, #24
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	d501      	bpl.n	801535c <_printf_i+0x1cc>
 8015358:	6018      	str	r0, [r3, #0]
 801535a:	e002      	b.n	8015362 <_printf_i+0x1d2>
 801535c:	0671      	lsls	r1, r6, #25
 801535e:	d5fb      	bpl.n	8015358 <_printf_i+0x1c8>
 8015360:	8018      	strh	r0, [r3, #0]
 8015362:	2300      	movs	r3, #0
 8015364:	6123      	str	r3, [r4, #16]
 8015366:	4616      	mov	r6, r2
 8015368:	e7ba      	b.n	80152e0 <_printf_i+0x150>
 801536a:	680b      	ldr	r3, [r1, #0]
 801536c:	1d1a      	adds	r2, r3, #4
 801536e:	600a      	str	r2, [r1, #0]
 8015370:	681e      	ldr	r6, [r3, #0]
 8015372:	6862      	ldr	r2, [r4, #4]
 8015374:	2100      	movs	r1, #0
 8015376:	4630      	mov	r0, r6
 8015378:	f7ea ff7a 	bl	8000270 <memchr>
 801537c:	b108      	cbz	r0, 8015382 <_printf_i+0x1f2>
 801537e:	1b80      	subs	r0, r0, r6
 8015380:	6060      	str	r0, [r4, #4]
 8015382:	6863      	ldr	r3, [r4, #4]
 8015384:	6123      	str	r3, [r4, #16]
 8015386:	2300      	movs	r3, #0
 8015388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801538c:	e7a8      	b.n	80152e0 <_printf_i+0x150>
 801538e:	6923      	ldr	r3, [r4, #16]
 8015390:	4632      	mov	r2, r6
 8015392:	4649      	mov	r1, r9
 8015394:	4640      	mov	r0, r8
 8015396:	47d0      	blx	sl
 8015398:	3001      	adds	r0, #1
 801539a:	d0ab      	beq.n	80152f4 <_printf_i+0x164>
 801539c:	6823      	ldr	r3, [r4, #0]
 801539e:	079b      	lsls	r3, r3, #30
 80153a0:	d413      	bmi.n	80153ca <_printf_i+0x23a>
 80153a2:	68e0      	ldr	r0, [r4, #12]
 80153a4:	9b03      	ldr	r3, [sp, #12]
 80153a6:	4298      	cmp	r0, r3
 80153a8:	bfb8      	it	lt
 80153aa:	4618      	movlt	r0, r3
 80153ac:	e7a4      	b.n	80152f8 <_printf_i+0x168>
 80153ae:	2301      	movs	r3, #1
 80153b0:	4632      	mov	r2, r6
 80153b2:	4649      	mov	r1, r9
 80153b4:	4640      	mov	r0, r8
 80153b6:	47d0      	blx	sl
 80153b8:	3001      	adds	r0, #1
 80153ba:	d09b      	beq.n	80152f4 <_printf_i+0x164>
 80153bc:	3501      	adds	r5, #1
 80153be:	68e3      	ldr	r3, [r4, #12]
 80153c0:	9903      	ldr	r1, [sp, #12]
 80153c2:	1a5b      	subs	r3, r3, r1
 80153c4:	42ab      	cmp	r3, r5
 80153c6:	dcf2      	bgt.n	80153ae <_printf_i+0x21e>
 80153c8:	e7eb      	b.n	80153a2 <_printf_i+0x212>
 80153ca:	2500      	movs	r5, #0
 80153cc:	f104 0619 	add.w	r6, r4, #25
 80153d0:	e7f5      	b.n	80153be <_printf_i+0x22e>
 80153d2:	bf00      	nop
 80153d4:	08041ba5 	.word	0x08041ba5
 80153d8:	08041bb6 	.word	0x08041bb6

080153dc <_sbrk_r>:
 80153dc:	b538      	push	{r3, r4, r5, lr}
 80153de:	4d06      	ldr	r5, [pc, #24]	; (80153f8 <_sbrk_r+0x1c>)
 80153e0:	2300      	movs	r3, #0
 80153e2:	4604      	mov	r4, r0
 80153e4:	4608      	mov	r0, r1
 80153e6:	602b      	str	r3, [r5, #0]
 80153e8:	f7eb fe4a 	bl	8001080 <_sbrk>
 80153ec:	1c43      	adds	r3, r0, #1
 80153ee:	d102      	bne.n	80153f6 <_sbrk_r+0x1a>
 80153f0:	682b      	ldr	r3, [r5, #0]
 80153f2:	b103      	cbz	r3, 80153f6 <_sbrk_r+0x1a>
 80153f4:	6023      	str	r3, [r4, #0]
 80153f6:	bd38      	pop	{r3, r4, r5, pc}
 80153f8:	20006e94 	.word	0x20006e94

080153fc <__sread>:
 80153fc:	b510      	push	{r4, lr}
 80153fe:	460c      	mov	r4, r1
 8015400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015404:	f000 f8ce 	bl	80155a4 <_read_r>
 8015408:	2800      	cmp	r0, #0
 801540a:	bfab      	itete	ge
 801540c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801540e:	89a3      	ldrhlt	r3, [r4, #12]
 8015410:	181b      	addge	r3, r3, r0
 8015412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015416:	bfac      	ite	ge
 8015418:	6563      	strge	r3, [r4, #84]	; 0x54
 801541a:	81a3      	strhlt	r3, [r4, #12]
 801541c:	bd10      	pop	{r4, pc}

0801541e <__swrite>:
 801541e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015422:	461f      	mov	r7, r3
 8015424:	898b      	ldrh	r3, [r1, #12]
 8015426:	05db      	lsls	r3, r3, #23
 8015428:	4605      	mov	r5, r0
 801542a:	460c      	mov	r4, r1
 801542c:	4616      	mov	r6, r2
 801542e:	d505      	bpl.n	801543c <__swrite+0x1e>
 8015430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015434:	2302      	movs	r3, #2
 8015436:	2200      	movs	r2, #0
 8015438:	f000 f870 	bl	801551c <_lseek_r>
 801543c:	89a3      	ldrh	r3, [r4, #12]
 801543e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015446:	81a3      	strh	r3, [r4, #12]
 8015448:	4632      	mov	r2, r6
 801544a:	463b      	mov	r3, r7
 801544c:	4628      	mov	r0, r5
 801544e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015452:	f000 b817 	b.w	8015484 <_write_r>

08015456 <__sseek>:
 8015456:	b510      	push	{r4, lr}
 8015458:	460c      	mov	r4, r1
 801545a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801545e:	f000 f85d 	bl	801551c <_lseek_r>
 8015462:	1c43      	adds	r3, r0, #1
 8015464:	89a3      	ldrh	r3, [r4, #12]
 8015466:	bf15      	itete	ne
 8015468:	6560      	strne	r0, [r4, #84]	; 0x54
 801546a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801546e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015472:	81a3      	strheq	r3, [r4, #12]
 8015474:	bf18      	it	ne
 8015476:	81a3      	strhne	r3, [r4, #12]
 8015478:	bd10      	pop	{r4, pc}

0801547a <__sclose>:
 801547a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801547e:	f000 b81b 	b.w	80154b8 <_close_r>
	...

08015484 <_write_r>:
 8015484:	b538      	push	{r3, r4, r5, lr}
 8015486:	4d07      	ldr	r5, [pc, #28]	; (80154a4 <_write_r+0x20>)
 8015488:	4604      	mov	r4, r0
 801548a:	4608      	mov	r0, r1
 801548c:	4611      	mov	r1, r2
 801548e:	2200      	movs	r2, #0
 8015490:	602a      	str	r2, [r5, #0]
 8015492:	461a      	mov	r2, r3
 8015494:	f7eb fda3 	bl	8000fde <_write>
 8015498:	1c43      	adds	r3, r0, #1
 801549a:	d102      	bne.n	80154a2 <_write_r+0x1e>
 801549c:	682b      	ldr	r3, [r5, #0]
 801549e:	b103      	cbz	r3, 80154a2 <_write_r+0x1e>
 80154a0:	6023      	str	r3, [r4, #0]
 80154a2:	bd38      	pop	{r3, r4, r5, pc}
 80154a4:	20006e94 	.word	0x20006e94

080154a8 <abort>:
 80154a8:	b508      	push	{r3, lr}
 80154aa:	2006      	movs	r0, #6
 80154ac:	f000 f8b4 	bl	8015618 <raise>
 80154b0:	2001      	movs	r0, #1
 80154b2:	f7eb fd6d 	bl	8000f90 <_exit>
	...

080154b8 <_close_r>:
 80154b8:	b538      	push	{r3, r4, r5, lr}
 80154ba:	4d06      	ldr	r5, [pc, #24]	; (80154d4 <_close_r+0x1c>)
 80154bc:	2300      	movs	r3, #0
 80154be:	4604      	mov	r4, r0
 80154c0:	4608      	mov	r0, r1
 80154c2:	602b      	str	r3, [r5, #0]
 80154c4:	f7eb fda7 	bl	8001016 <_close>
 80154c8:	1c43      	adds	r3, r0, #1
 80154ca:	d102      	bne.n	80154d2 <_close_r+0x1a>
 80154cc:	682b      	ldr	r3, [r5, #0]
 80154ce:	b103      	cbz	r3, 80154d2 <_close_r+0x1a>
 80154d0:	6023      	str	r3, [r4, #0]
 80154d2:	bd38      	pop	{r3, r4, r5, pc}
 80154d4:	20006e94 	.word	0x20006e94

080154d8 <_fstat_r>:
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	4d07      	ldr	r5, [pc, #28]	; (80154f8 <_fstat_r+0x20>)
 80154dc:	2300      	movs	r3, #0
 80154de:	4604      	mov	r4, r0
 80154e0:	4608      	mov	r0, r1
 80154e2:	4611      	mov	r1, r2
 80154e4:	602b      	str	r3, [r5, #0]
 80154e6:	f7eb fda2 	bl	800102e <_fstat>
 80154ea:	1c43      	adds	r3, r0, #1
 80154ec:	d102      	bne.n	80154f4 <_fstat_r+0x1c>
 80154ee:	682b      	ldr	r3, [r5, #0]
 80154f0:	b103      	cbz	r3, 80154f4 <_fstat_r+0x1c>
 80154f2:	6023      	str	r3, [r4, #0]
 80154f4:	bd38      	pop	{r3, r4, r5, pc}
 80154f6:	bf00      	nop
 80154f8:	20006e94 	.word	0x20006e94

080154fc <_isatty_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4d06      	ldr	r5, [pc, #24]	; (8015518 <_isatty_r+0x1c>)
 8015500:	2300      	movs	r3, #0
 8015502:	4604      	mov	r4, r0
 8015504:	4608      	mov	r0, r1
 8015506:	602b      	str	r3, [r5, #0]
 8015508:	f7eb fda1 	bl	800104e <_isatty>
 801550c:	1c43      	adds	r3, r0, #1
 801550e:	d102      	bne.n	8015516 <_isatty_r+0x1a>
 8015510:	682b      	ldr	r3, [r5, #0]
 8015512:	b103      	cbz	r3, 8015516 <_isatty_r+0x1a>
 8015514:	6023      	str	r3, [r4, #0]
 8015516:	bd38      	pop	{r3, r4, r5, pc}
 8015518:	20006e94 	.word	0x20006e94

0801551c <_lseek_r>:
 801551c:	b538      	push	{r3, r4, r5, lr}
 801551e:	4d07      	ldr	r5, [pc, #28]	; (801553c <_lseek_r+0x20>)
 8015520:	4604      	mov	r4, r0
 8015522:	4608      	mov	r0, r1
 8015524:	4611      	mov	r1, r2
 8015526:	2200      	movs	r2, #0
 8015528:	602a      	str	r2, [r5, #0]
 801552a:	461a      	mov	r2, r3
 801552c:	f7eb fd9a 	bl	8001064 <_lseek>
 8015530:	1c43      	adds	r3, r0, #1
 8015532:	d102      	bne.n	801553a <_lseek_r+0x1e>
 8015534:	682b      	ldr	r3, [r5, #0]
 8015536:	b103      	cbz	r3, 801553a <_lseek_r+0x1e>
 8015538:	6023      	str	r3, [r4, #0]
 801553a:	bd38      	pop	{r3, r4, r5, pc}
 801553c:	20006e94 	.word	0x20006e94

08015540 <__malloc_lock>:
 8015540:	4801      	ldr	r0, [pc, #4]	; (8015548 <__malloc_lock+0x8>)
 8015542:	f7ff b9e9 	b.w	8014918 <__retarget_lock_acquire_recursive>
 8015546:	bf00      	nop
 8015548:	20006e9c 	.word	0x20006e9c

0801554c <__malloc_unlock>:
 801554c:	4801      	ldr	r0, [pc, #4]	; (8015554 <__malloc_unlock+0x8>)
 801554e:	f7ff b9e4 	b.w	801491a <__retarget_lock_release_recursive>
 8015552:	bf00      	nop
 8015554:	20006e9c 	.word	0x20006e9c

08015558 <_realloc_r>:
 8015558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801555a:	4607      	mov	r7, r0
 801555c:	4614      	mov	r4, r2
 801555e:	460e      	mov	r6, r1
 8015560:	b921      	cbnz	r1, 801556c <_realloc_r+0x14>
 8015562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015566:	4611      	mov	r1, r2
 8015568:	f7ff ba94 	b.w	8014a94 <_malloc_r>
 801556c:	b922      	cbnz	r2, 8015578 <_realloc_r+0x20>
 801556e:	f7ff fa41 	bl	80149f4 <_free_r>
 8015572:	4625      	mov	r5, r4
 8015574:	4628      	mov	r0, r5
 8015576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015578:	f000 f86a 	bl	8015650 <_malloc_usable_size_r>
 801557c:	42a0      	cmp	r0, r4
 801557e:	d20f      	bcs.n	80155a0 <_realloc_r+0x48>
 8015580:	4621      	mov	r1, r4
 8015582:	4638      	mov	r0, r7
 8015584:	f7ff fa86 	bl	8014a94 <_malloc_r>
 8015588:	4605      	mov	r5, r0
 801558a:	2800      	cmp	r0, #0
 801558c:	d0f2      	beq.n	8015574 <_realloc_r+0x1c>
 801558e:	4631      	mov	r1, r6
 8015590:	4622      	mov	r2, r4
 8015592:	f7fe fddb 	bl	801414c <memcpy>
 8015596:	4631      	mov	r1, r6
 8015598:	4638      	mov	r0, r7
 801559a:	f7ff fa2b 	bl	80149f4 <_free_r>
 801559e:	e7e9      	b.n	8015574 <_realloc_r+0x1c>
 80155a0:	4635      	mov	r5, r6
 80155a2:	e7e7      	b.n	8015574 <_realloc_r+0x1c>

080155a4 <_read_r>:
 80155a4:	b538      	push	{r3, r4, r5, lr}
 80155a6:	4d07      	ldr	r5, [pc, #28]	; (80155c4 <_read_r+0x20>)
 80155a8:	4604      	mov	r4, r0
 80155aa:	4608      	mov	r0, r1
 80155ac:	4611      	mov	r1, r2
 80155ae:	2200      	movs	r2, #0
 80155b0:	602a      	str	r2, [r5, #0]
 80155b2:	461a      	mov	r2, r3
 80155b4:	f7eb fcf6 	bl	8000fa4 <_read>
 80155b8:	1c43      	adds	r3, r0, #1
 80155ba:	d102      	bne.n	80155c2 <_read_r+0x1e>
 80155bc:	682b      	ldr	r3, [r5, #0]
 80155be:	b103      	cbz	r3, 80155c2 <_read_r+0x1e>
 80155c0:	6023      	str	r3, [r4, #0]
 80155c2:	bd38      	pop	{r3, r4, r5, pc}
 80155c4:	20006e94 	.word	0x20006e94

080155c8 <_raise_r>:
 80155c8:	291f      	cmp	r1, #31
 80155ca:	b538      	push	{r3, r4, r5, lr}
 80155cc:	4604      	mov	r4, r0
 80155ce:	460d      	mov	r5, r1
 80155d0:	d904      	bls.n	80155dc <_raise_r+0x14>
 80155d2:	2316      	movs	r3, #22
 80155d4:	6003      	str	r3, [r0, #0]
 80155d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155da:	bd38      	pop	{r3, r4, r5, pc}
 80155dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80155de:	b112      	cbz	r2, 80155e6 <_raise_r+0x1e>
 80155e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80155e4:	b94b      	cbnz	r3, 80155fa <_raise_r+0x32>
 80155e6:	4620      	mov	r0, r4
 80155e8:	f000 f830 	bl	801564c <_getpid_r>
 80155ec:	462a      	mov	r2, r5
 80155ee:	4601      	mov	r1, r0
 80155f0:	4620      	mov	r0, r4
 80155f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155f6:	f000 b817 	b.w	8015628 <_kill_r>
 80155fa:	2b01      	cmp	r3, #1
 80155fc:	d00a      	beq.n	8015614 <_raise_r+0x4c>
 80155fe:	1c59      	adds	r1, r3, #1
 8015600:	d103      	bne.n	801560a <_raise_r+0x42>
 8015602:	2316      	movs	r3, #22
 8015604:	6003      	str	r3, [r0, #0]
 8015606:	2001      	movs	r0, #1
 8015608:	e7e7      	b.n	80155da <_raise_r+0x12>
 801560a:	2400      	movs	r4, #0
 801560c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015610:	4628      	mov	r0, r5
 8015612:	4798      	blx	r3
 8015614:	2000      	movs	r0, #0
 8015616:	e7e0      	b.n	80155da <_raise_r+0x12>

08015618 <raise>:
 8015618:	4b02      	ldr	r3, [pc, #8]	; (8015624 <raise+0xc>)
 801561a:	4601      	mov	r1, r0
 801561c:	6818      	ldr	r0, [r3, #0]
 801561e:	f7ff bfd3 	b.w	80155c8 <_raise_r>
 8015622:	bf00      	nop
 8015624:	20000024 	.word	0x20000024

08015628 <_kill_r>:
 8015628:	b538      	push	{r3, r4, r5, lr}
 801562a:	4d07      	ldr	r5, [pc, #28]	; (8015648 <_kill_r+0x20>)
 801562c:	2300      	movs	r3, #0
 801562e:	4604      	mov	r4, r0
 8015630:	4608      	mov	r0, r1
 8015632:	4611      	mov	r1, r2
 8015634:	602b      	str	r3, [r5, #0]
 8015636:	f7eb fc99 	bl	8000f6c <_kill>
 801563a:	1c43      	adds	r3, r0, #1
 801563c:	d102      	bne.n	8015644 <_kill_r+0x1c>
 801563e:	682b      	ldr	r3, [r5, #0]
 8015640:	b103      	cbz	r3, 8015644 <_kill_r+0x1c>
 8015642:	6023      	str	r3, [r4, #0]
 8015644:	bd38      	pop	{r3, r4, r5, pc}
 8015646:	bf00      	nop
 8015648:	20006e94 	.word	0x20006e94

0801564c <_getpid_r>:
 801564c:	f7eb bc86 	b.w	8000f5c <_getpid>

08015650 <_malloc_usable_size_r>:
 8015650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015654:	1f18      	subs	r0, r3, #4
 8015656:	2b00      	cmp	r3, #0
 8015658:	bfbc      	itt	lt
 801565a:	580b      	ldrlt	r3, [r1, r0]
 801565c:	18c0      	addlt	r0, r0, r3
 801565e:	4770      	bx	lr

08015660 <_init>:
 8015660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015662:	bf00      	nop
 8015664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015666:	bc08      	pop	{r3}
 8015668:	469e      	mov	lr, r3
 801566a:	4770      	bx	lr

0801566c <_fini>:
 801566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801566e:	bf00      	nop
 8015670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015672:	bc08      	pop	{r3}
 8015674:	469e      	mov	lr, r3
 8015676:	4770      	bx	lr
